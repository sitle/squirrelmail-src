$Id$
$Author$
$Date$
--

Controller - Architecture Proposal
Luke Ehresman <luke@squirrelamil.org>
=====================================

Purpose:  This file accompanies the file ::sm2-data_flow.png:: which contains my
proposal for how the authentication will happen, and how control gets passed to
the controller.


Description
===========
This diagram shows how the user will interact with SquirrelMail 2.  There are 4
different parts to the user interaction which are noted by the big red numbers 1
through 4 at the top of the picture.

   1.  Login Screen

      The login screen is displayed through a server-specified config
      option.  This will be the same login screen for all users on a server, and
      is changed by the administrator (the default template/controller).  The
      reasoning for this is manifold:  (1) So the login screen can tie in with
      whatever the site design is, (2) So we don't have to query the user
      preference before they give us their user name (or mess with cookies for
      it).

   2.  Authentication Sent via POST 
   
      (Note that it's the third line, not the second)  This line represents the
      form submission from the Login screen which contains the username and
      password.  This gets routed into the AUTH API and can have a success or
      failure state.  If success, it goes to the controller with the default
      state, remembering that authentication was successful.  Now we are in a 
      loop at number 4.  If it failed, go to step 3.

   3.  Username and/or Password incorrect screen

      This should display some sort of notification that the authentication
      failed, and give them an option to try again (starting back at #1).

   4.  Authentication Successful

      If authentication was successful, we'll just go ahead and load up their
      preferences into a global $pref object which can be accessed anywhere in the
      program.  We then query the $pref object for their preferred
      controller/template combiniation and pass control to that controller.  It
      then handles all things with the rest of the application.  Then the
      information is passed to the chosen template and is sent back to the user.
      That process is repeated until the user decides to quit.  


Controller
==========
Now take a look at the zoomed out section, titled "CONTROLLER".  This is a very
rhudamentary representation of how the controller works.  Each controller will
take into account STATE information, so that it knows which page to load at what
time.  This will most likely be stored in the session data.  If we are coming
from the login screen, the STATE will be set at "default" which can be defined
for each controller (normallly displaying the message list).

Depending on the state, different API implementations will be loaded, and data
processing will take place.  All this time, it will be communicating with the
template and creating a $template variable to be displayed at the end.


Login Screen
============
I mentioned earlier about the login screen and how it will only use the system
default controller/template combination.  To make this happen, each template
must have a template for the "login" screen.  It actually won't have any section
in the controller, that happens in the /index.php.
