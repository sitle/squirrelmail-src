$Id$
$Author$
$Date$
--

Control Structure
Author: Luke Ehresman <luke@squirrelmail.org>
=============================================

Purpose:  To give an overview of how SM2 is designed, and how control passes
from one section to another.  This document explains how we separated logic from
display.  It also shows how to implemente templates.


Introduction
============
Our control structure is very powerful.  Basically, it is split up into three
different sections, each of which are described in detail later in this
document.  This simple diagram briefly outlines our model:

                  (CORE)--[(CONTROLLER)--(TEMPLATE)]

We allow reimplementation at differnt levels to get different levels of
functionality.  For instance, you can write a new controller, which will change
how data is retrieved from the core libraries and how it is displayed to the
user.  You can also create new templates for these different controllers which
allows for variations in the look-and-feel of each controller.

Below is another diagram, this one describes the one-to-many relationship that
this hierarchy contains.  For instance, there will only be one set of core
libraries.  That is what the developers spend most of their time maintaining.
The core can have many controllers that fetch the data in different ways and
send the data to a template.  Many templates can be defined for each controller.
Note that only one controller and one template are used at a given time.

                                    CORE
                                     |
                            +--------+--------+
                            |        |        |
                          CTLR1    CTLR2    CTLR3
                          /          |         \
                         /           |          \
                   +-------+      +------+      +------+
                   |       |      |      |      |      |
                  TPL1    TPL2   TPL3   TPL4   TPL5   TPL6


CORE
====
The CORE is basically index.php and all the libraries and APIs that give
Squirrelmail its power.  These provide the core functionality in SM2.


CONTROLLER--TEMPLATE
====================
Through discussions and meetings that we have had, we came up with two paths we
could take as far as templating is concerned:

  1.  Standard templates that are just front-ends to display the data
      that they are handed.  These are limited in functionality as they
      must stay in one form (just changing the look/feel).

  2.  Having the templates fetch the data and display it however it
      wants to.  This allows for RADICAL differences in behavior between
      templates, and offers much more power to the administrator or
      company using the product.

We decided that #2 was better and offered more flexability and power, but we
weren't sure how to have a template powerful enough to fetch data and display it
at the same time.  After much discussion, we decided to split the templates into
two sections: logic and display.  The logic is known as the controller, and the
display is known as the template.


CONTROLLER
==========
The controller will spit out data to the template.  That is its main function.
For instance, you might want the folder list to include IMAP folders, and NNTP
folders.  The controller for this functionality would load up both of those APIs
and spit that data to the TEMPLATE.  The templating information is then returned
to the CORE (index.php) and is displayed from there.


TEMPLATE
========
These will most likely be a standard template type of deal.  Something like
PTemplate or FastTemplate, or even XML/XSL possibly.  We're not sure.  But the
template will specify which controller to fetch data from, and will format that
data accordingly. 
