Itroduction to SquirrelMail 2
Luke Ehresman <luke@squirrelmail.org>
=====================================

This first posting of the SquirrelMail code is far from functional, and we
were hoping to have had more in place before releasing.  However, currently
there is a good base architecture in place for you to start working on, and
extend and on which to add functionality.

These documents explain where we were heading, and what has already been put
in place.  These documents are not intended to stay around forever, but
rather to just give an introduction to what we have done in this very PRE
release to the developers.

What is in place?  Really, just some very core functionality.  Right now,
it's possible to log in, and view the messages in some folders.  The folder
list appears on the left, and that is all.  There is only one front-end
(classic) that has been developed to any extent.  Hardly anything of use is
implemented.  However, the back-end APIs are in place and have base
functionality.  Some of the base function libraries have been written as
well.

  Table of Contents:
  --------------------
  1.  Front-Ends
  2.  Back-end APIs
  3.  Plugins
  4.  Options Page
  5.  Utility Functions

1. Front-Ends
=============
To start with, I'll explain a little about how we are handling the
separation of logic and display.  We compromised a little bit, and have
developed a method for doing this that is very powerful, but still
effectively separates the core functionaltiy from all of the display.  These
templates are called "front-ends" and are written in PHP.  This choice was
made to make it very easy to integrate SquirrelMail into an existing web
site that already has custom PHP functions that are used to make the display
happen (or even to use an existing templating system).

All of the necessary .php files are included in the root directory (/) such
as 'compose.php' and 'folders.php'.  These files do all authentication and
load up all the global preferences and session data.  They also load up
configuration information and any other APIs that are needed.  It then
passes control to its counterpart in the front-ends directory
(/front-ends/classic/compose.php) which then does all the display necessary.
[see figure 1]

The file initially loaded in the root directory should handle as much of the
processing as possible, and should get data ready for displaying by the
front-end.  This prevents the front-end from needing to do any processing on
its own, and also makes the displayed data the same across multiple
front-ends.

There is also a base file called /page.php that is to be used for any extra
pages that are needed by the front-end, or possibly even plugins.  This file
should be called with the extra query parameter called 'page'.  For
instance,  "http://mail.mysite.com/page.php?page=option2" will authenticate
the user, load config and prefs, and then pass control to
/front-ends/classic/option2.php.  This allows for expanding the front-end as
far as it wants to go beyond what SquirrelMail itself provides as base
functionality.

  [figure 1]
      .-----------------------------------------.
      |  /compose.php                           |
      |   * Authenticates User                  |
      |   * Loads Config File                   |
      |   * Loads Preferences                   |
      |   * etc.                                |
      |                                         |
      |  INCLUDES:                              |
      |  .-----------------------------------.  |
      |  |  /front-ends/classic/compose.php  |  |
      |  |   * Handles ALL display           |  |
      |  |   * Does any special processing   |  |
      |  |   * etc.                          |  |
      |  `-----------------------------------'  |
      `-----------------------------------------'

*******************
**** IMPORTANT ****
*******************
It is absolutely necessary to keep as much of the logic out of the
front-ends as possible.  In order to accomidate this, we have started
creating a utility library.  These functions will do any tedious operations
on data that could be used by more than one front-end.  By separating it out
like this, it removes duplication of code (which is very bad).  This utility
library is located in /lib and are the *.inc files.

     Reasoning:
     ----------
     We decided to use this method for several key reasons.  First and
     foremost for speed.  This eliminates the need for extra processing
     of template files before displaying.  Yes, we lose some cool
     functionality that templating provides, but we gain a lot of
     simplicity and speed.  It eliminates quite a bit of overhead.
   
     Second, using PHP in our front-ends allows for maximum
     customizability.  The front-end designer is not constrained to using
     frames, no-frames, or even displaying the same data on pages.  It
     will be possible (and fairly simple) to create front-ends that mimic
     the look-and-feel of such webmail clients as IMP, Exchange, WebMail,
     Yahoo, Hotmail, etc.  Not that that mimicing those are our biggest
     priority, but it's just an example of the power presented.



2. Back-End APIs
================
There are currently 8 APIs that we have created specs for, and most of them 
have been implemented as well.  A list of the APIs can be found in the file
'needed_apis.txt'.  These back-end APIs are designed in such a way so that
they can be re-implemented providing a way to access a whole new data
source without needing to change any of the rest of the code in
SquirrelMail.

Documentation for these APIs is in the /doc/apis/ directory.  It is just a
sketch, and will probably need to change a bit before 1.9.0 is released.  I
suggest, however, that the API specifications freeze rather quickly and that
they don't change too often.  That will provide the maximum usability and
will allow people to create their own APIs and encourage them to contribute
them back to us as well.

Between releases, when there are changes in the API specifications, it will
be necessary to document the changes specifically and to lay out how to
bring the APIs up to standards.  Version numbering of the APIs will also
probably be a good thing to do.  They should be numbered independantly from
each other, and from the core SquirrelMail.  That way when only one API
changes, it will be obvious by the version number.

Note:
The sq_mail API is just a copy-paste-tweak from the current SM1 imap
libraries.  It is highly suggested that these be rewritten to be optomized
before any release happens!!



3.  Plugins
===========
We currently do not have any plugin support built into SM2.  However, we
have thought about it a lot.  Plugins in SM2 should be like they are in SM1
-- changes to front-end functionality.  How will this work with all the
different front-ends?  It will be dificult, but we have a suggestion that
will work, we believe.

First off, plugin development will HAVE to be much more strict than it
currently is.  There will be a master list of hooks and what can be done at
each hook.  For instance, some hooks can do output, some can't.  Some can
access the sq_mail API, some can't.  It should be documented what each hook
CAN and CAN'T access, and a general idea of where the hook is executed on a
page load (before any output, after all output, below the message header,
etc).

When a front-end developer creates a new front-end, they will look through
this master-list and add hooks to their front-end based on these specs.

It's recommended, however, that plugins try to NOT do complicated output.
It will be hard for the front-ends to maintain a coherent design if plugins
have their own look-and-feel.  Currently the only place where plugins create
their own pages and have complex output is in the options page.  To see our
accomidation for this, read the section "4.  Options Page".


4.  Options Page
================
We recommend (but haven't yet implemented) that the entire options page be
object oriented and dynamically created.  There could be a global options
object that gets implemented whenever there is a new section.  For instance,
the "Display Preferences" option object, the "Folder Preferences" options
object, etc.  Plugins can easily take advantage of this by simply creating
their own options object that gets included when the options page is being
dynaically created.

All the options should be stored inside this object as well, along with the
path for where to post when complete (/plugins/squirrelspell/opt_save.php).
The post script will save all the incoming data and redirect back to the
options page.


5.  Utility Functions
=====================
Earlier in this document, the utility functions were mentioned.  The utility
functions will do any tedious work that might possibly need done in the
front ends and/or plugins.  This helps us standardize everything, and make
it easy for fixing bugs rather than needing to fix it in 10 places.  All
utility functions should start with 'sm_' to prevent namespace problems.
Along with that note, all plugins should be named with 'sm_PLUGIN-NAME' as
well.

Some possible functions that the utility functions will carry out could be:
  * Given a timestamp, return a formatted date string
  * Given number of total messages, and what message we're currently on,
    whether there is a NEXT and/or PREVIOUS link, and what the link shoould
    link to.
  * A link creator that all links are wrapped with so that it is easy to
    change all links if necessary
