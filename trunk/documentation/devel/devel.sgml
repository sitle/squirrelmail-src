<!doctype linuxdoc system>
<!--
 $Id$

 Copyright (c) 2005-2006 The SquirrelMail Project Team
 This file is part of SquirrelMail webmail interface documentation.

 SquirrelMail is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 SquirrelMail is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with SquirrelMail; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 02110-1301, USA
-->
<article>

<title>SquirrelMail Developer's Manual
<author>The SquirrelMail Project Team:
<!-- put your name here -->
</author>
<date>$Date$
<abstract>
This document provides information for developers of SquirrelMail webmail interface.
</abstract>

<toc>

<p>
Document version: $Revision$

<sect>SquirrelMail overview
<p>
SquirrelMail is a standards-based webmail package written in PHP4. It includes
built-in pure PHP support for the IMAP and SMTP protocols, and all pages render
in pure HTML 4.0 (with no JavaScript required) for maximum compatibility across
browsers. It has very few requirements and is very easy to configure and
install. SquirrelMail has all the functionality you would want from an email
client, including strong MIME support, address books, and folder manipulation.

<sect>General guidelines
<p>
This section should provide some generic information.

<sect1>Coding guidelines
<p>
Import wiki page

<sect1>SM_PATH
<p>
Information about SM_PATH constant

<sect1><tt>includes/validate.php</tt>
<p>
Information about files included by <tt>validate.php</tt>

<sect1>Compatibility
<p>
Information about compatibility plugin.

<sect>Developing plugins
<p>
In addition to this document, please check out the SquirrelMail
development FAQ for more information. Also, help writing plugins
is easily obtained by posting to the squirrelmail-plugins mailing
list.

Useful links:
<itemize>
<item><url url="http://www.squirrelmail.org/wiki/DeveloperFAQ" name="FAQ">
<item><url url="http://www.squirrelmail.org/wiki/DevelopingPlugins" name="Plugin Development wiki">
<item><url url="http://www.squirrelmail.org/wiki/MailingLists" name="SquirrelMail mailing lists">
</itemize>

<sect1>The plugin architecture
<p>
The plugin architecture of SquirrelMail is designed to make it possible
to add new features without having to patch SquirrelMail itself.
Functionality like password changing, displaying ads and calendars should
be possible to add as plugins.

<sect2>The Idea
<p>
The idea is to be able to run random code at given places in the
SquirrelMail code. This random code should then be able to do whatever
needed to enhance the functionality of SquirrelMail. The places where
code can be executed are called "hooks".

There are some limitations in what these hooks can do. It is difficult
to use them to change the layout and to change functionality that
already is in SquirrelMail.

Some way for the plugins to interact with the help subsystem and
translations will be provided.

<sect2>The Implementation
<p>
The plugin jumping off point in the main SquirrelMail code is in the
file <tt>functions/plugin.php</tt>. In places where hooks are made available,
they are executed by calling the function <tt>do_hook('hookname')</tt>. The
<tt>do_hook</tt> function then traverses the array
<tt>$squirrelmail_plugin_hooks['hookname']</tt> and executes all the functions
that are named in that array. Those functions are placed there when
plugins register themselves with SquirrelMail as discussed below. A
plugin may add its own internal functions to this array under any
hook name provided by the SquirrelMail developers.

A plugin must reside in a subdirectory in the <tt>plugins/</tt> directory. The
name of the subdirectory is considered to be the name of the plugin.
(The plugin will not function correctly if this is not the case.)

To start using a plugin, its name must be added to the <tt>$plugins</tt> array
in <tt>config.php</tt> like this:

<tscreen><verb>
$plugins[0] = 'plugin_name';
</verb></tscreen>

When a plugin is registered, the file <tt>plugins/plugin_name/setup.php</tt> is
included and the function <tt>squirrelmail_plugin_init_plugin_name()</tt> is
called with no parameters. That function is where the plugin may
register itself against any hooks it wishes to take advantage of.

<sect1>Writing plugins
<p>
All plugins must contain a file called <tt>setup.php</tt> and must include a
function called <tt>squirrelmail_plugin_init_plugin_name()</tt> therein. Since
including numerous plugins can slow SquirrelMail performance
considerably, the <tt>setup.php</tt> file should contain little else. Any
functions that are registered against plugin hooks should do little
more than call another function in a different file.

Any other files used by the plugin should also be placed in the
plugin directory (or subdirectory thereof) and should contain the
bulk of the plugin logic.

The function <tt>squirrelmail_plugin_init_plugin_name()</tt> is called to
initalize a plugin. This function could look something like this (if
the plugin was named "demo" and resided in the directory <tt>plugins/demo/</tt>):

<tscreen><verb>
function squirrelmail_plugin_init_demo () {
   global $squirrelmail_plugin_hooks;

   $squirrelmail_plugin_hooks['generic_header']['demo'] = 'plugin_demo_header';
   $squirrelmail_plugin_hooks['menuline']['demo'] = 'plugin_demo_menuline';
}
</verb></tscreen>

Please note that as of SquirrelMail 1.5.0, this function will no longer
be called at run time and will instead be called only once at configuration
time. Thus, the inclusion of any dynamic code (anything except hook
registration) here is strongly discouraged.

In this example, the "demo" plugin should also have two other functions
in its <tt>setup.php</tt> file called <tt>plugin_demo_header()</tt> and <tt>plugin_demo_menuline()</tt>.
The first of these might look something like this:
<tscreen><verb>
function plugin_demo_header()
{
   include_once(SM_PATH . 'plugins/demo/functions.php');
   plugin_demo_header_do();
}
</verb></tscreen>

The function called <tt>plugin_demo_header_do()</tt> would be in the file called
<tt>functions.php</tt> in the <tt>demo</tt> plugin directory and would contain the plugin's
core logic for the <tt>generic_header</tt> hook.

<sect1>Hooks
<p>
Hooks, when executed, are called with differing parameters and may or may
not take return values, all depending on the type of hook being called and
the context in which it is being used. On the source side (where the hook
call originates), all hooks have at least one parameter, which is the
name of the hook. After that, things get complicated.

<sect2>Hook Types: Parameters and Return Values
<p>
SquirrelMail uses four hook functions. do_hook(), do_hook_function(),
concat_hook_function() and boolean_hook_function().

do_hook() function is simple function that allows to inject custom HTML or
override default interface data. Function does not pass any data and doesn't ask
for anything back. A limited number of do_hook calls do pass some extra
parameters, in which case your plugin may modify the given data if you do so by
reference. It is not necessary to return anything from your function in such a
case; modifying the parameter data by reference is what does the job (although
the hook call itself (in the source) must grab the return value for this to
work). Note that in this case, the parameter to your hook function will be an
array, the first element simply being the hook name, followed by any other
parameters that may have been included in the actual hook call in the source.
Modify parameters with care!

do_hook_function() was intended to be the main hook type used when the
source needs to get something back from your plugin. It is somewhat
limited in that it will only use the value returned from the LAST
plugin registered against the hook. The source for this hook might
use the return value for internal purposes, or might expect you to
provide text or HTML to be sent to the client browser (you'll have to
look at its use in context to understand how you should return values
here). The parameters that your hook function gets will be anything
you see AFTER the hook name in the actual hook call in the source.
These cannot be changed in the same way that the do_hook parameters
can be.

concat_hook_function() fixes some shortcomings of do_hook_function().
It can use the return values of all plugins registered against the hook. In
order to do so, the return value is assumed to be a string, which is just piled
on top of whatever it got from the other plugins working on the same
hook. Again, you'll have to inspect the source code to see how such data is put
to use, but most of the time, it is used to create a string of HTML to be
inserted into the output page. The parameters that your hook function will get
are the same as for the do_hook_function; they are anything AFTER the hook name
in the actual hook call in the source.

boolean_hook_function() was introduced in SquirrelMail 1.x.x. It provides
plugins options to "vote" for some action. What that action is is entirely
dependent on how the hook is used in the source (look for yourself). Plugins
make their "vote" by returning boolean TRUE or FALSE values. This hook may be
configured to "tally votes" in one of three ways. This configuration is done
with the third parameter in the hook call in the source:
<itemize>
  <item>&gt; 0 -- Any one or more TRUEs will override any FALSEs
  <item>&lt; 0 -- Any one or more FALSEs will override any TRUEs
  <item>= 0 -- Majority wins. Ties are broken in this case with the last
  parameter in the hook call in the source.
</itemize>

Your hook function will get the second paramter in the hook call in the source
as its parameter (this might be an array if multiple values need to be passed).

<sect2>List of Hooks
<p>
This is a list of all hooks currently available in SquirrelMail, ordered
by file.

TODO: reduce list of hooks by grouping them into separate chapters.

<tscreen><verb>
  Hook Name                      Found In                        Called With(#)
  ---------                      --------                        --------------
  loading_constants              functions/constants.php         do_hook
  logout_error                   functions/display_messages.php  do_hook
  error_box                      functions/display_messages.php  concat_hook
  get_pref_override              functions/file_prefs.php        hook_func
  get_pref                       functions/file_prefs.php        hook_func
  special_mailbox                functions/imap_mailbox.php      hook_func
% rename_or_delete_folder        functions/imap_mailbox.php      hook_func
  folder_status (since 1.5.1)    functions/imap_mailbox.php      hook_func
                                 functions/imap_general.php      hook_func
  mailbox_index_before           functions/mailbox_display.php   do_hook
  mailbox_form_before            functions/mailbox_display.php   do_hook
  mailbox_index_after            functions/mailbox_display.php   do_hook
  check_handleAsSent_result      functions/mailbox_display.php   do_hook
  subject_link                   functions/mailbox_display.php   concat_hook
  mailbox_display_buttons        functions/mailbox_display.php   do_hook
  mailbox_display_button_action  functions/mailbox_display.php   hook_func
  message_body                   functions/mime.php              do_hook
^ attachment $type0/$type1       functions/mime.php              do_hook
  attachments_bottom             functions/mime.php              hook_func
  decode_body                    functions/mime.php              hook_func
  generic_header                 functions/page_header.php       do_hook
  menuline                       functions/page_header.php       do_hook
  prefs_backend                  functions/prefs.php             hook_func
  loading_prefs                  include/load_prefs.php          do_hook
  addrbook_html_search_below     src/addrbook_search_html.php    do_hook
  addressbook_bottom             src/addressbook.php             do_hook
! compose_form                   src/compose.php                 do_hook
  compose_bottom                 src/compose.php                 do_hook
  compose_button_row             src/compose.php                 do_hook
  compose_send                   src/compose.php                 do_hook
  compose_send_after             src/compose.php                 do_hook
  folders_bottom                 src/folders.php                 do_hook
  help_top                       src/help.php                    do_hook
  help_chapter                   src/help.php                    do_hook
  help_bottom                    src/help.php                    do_hook
  left_main_after_each_folder    src/left_main.php               concat_hook
  left_main_before               src/left_main.php               do_hook
  left_main_after                src/left_main.php               do_hook
  login_cookie                   src/login.php                   do_hook
  login_top                      src/login.php                   do_hook
  login_form                     src/login.php                   concat_hook
    (was do_hook before 1.5.1)
  login_bottom                   src/login.php                   do_hook
* optpage_set_loadinfo           src/options.php                 do_hook
* optpage_loadhook_personal      src/options.php                 do_hook
* optpage_loadhook_display       src/options.php                 do_hook
* optpage_loadhook_highlight     src/options.php                 do_hook
* optpage_loadhook_folder        src/options.php                 do_hook
* optpage_loadhook_order         src/options.php                 do_hook
* options_personal_save          src/options.php                 do_hook
* options_display_save           src/options.php                 do_hook
* options_folder_save            src/options.php                 do_hook
* options_save                   src/options.php                 do_hook
* optpage_register_block         src/options.php                 do_hook
* options_link_and_description   src/options.php                 do_hook
* options_personal_inside        src/options.php                 do_hook
* options_display_inside         src/options.php                 do_hook
* options_highlight_inside       src/options.php                 do_hook
* options_folder_inside          src/options.php                 do_hook
* options_order_inside           src/options.php                 do_hook
* options_personal_bottom        src/options.php                 do_hook
* options_display_bottom         src/options.php                 do_hook
* options_highlight_bottom       src/options.php                 do_hook
* options_folder_bottom          src/options.php                 do_hook
* options_order_bottom           src/options.php                 do_hook
* options_highlight_bottom       src/options_highlight.php       do_hook
& options_identities_top         src/options_identities.php      do_hook
  message_body                   src/printer_friendly_bottom.php do_hook
  read_body_header               src/read_body.php               do_hook
  read_body_menu_top             src/read_body.php               hook_func
  read_body_menu_bottom          src/read_body.php               do_hook
  read_body_header_right         src/read_body.php               do_hook
  read_body_top                  src/read_body.php               do_hook
  read_body_bottom               src/read_body.php               do_hook
  login_before                   src/redirect.php                do_hook
  login_verified                 src/redirect.php                do_hook
  right_main_after_header        src/right_main.php              do_hook
  right_main_bottom              src/right_main.php              do_hook
  search_before_form             src/search.php                  do_hook
  search_after_form              src/search.php                  do_hook
  search_bottom                  src/search.php                  do_hook
  logout                         src/signout.php                 do_hook
  webmail_top                    src/webmail.php                 do_hook
  webmail_bottom                 src/webmail.php                 concat_hook
  logout_above_text              src/signout.php                 concat_hook
O info_bottom                    plugins/info/options.php        do_hook
</verb></tscreen>

<sect2>Address book hooks
<p>
SquirrelMail 1.4.5 and 1.5.1 introduced two hooks that allow custom address book
backends. These hooks are placed in <tt>functions/addressbook.php</tt> file.
<tt/abook_add_class/ hook is simple hook designed to load custom address book
classes before any other code is loaded. abook_init hook allows to modify <tt/$abook/
object that represents configured address books. Hook is executed after
initiation of local address book backends (file and DB based ones) and before
remote (LDAP) backend init. Second abook_init argument stores address book
object, third argument stores return value of <tt/$abook-&gt;add_backend/ method.

<sect2>Identity Hooks
<p>
This set of hooks allows to add plugin options to SquirrelMail identity
preferences.

<descrip>
  <tag/options_identities_process/
   This hook is called at the top of the Identities page, which is
   most useful when the user has changed any identity settings - this
   is where you'll want to save any custom information you are keeping
   for each identity or catch any custom submit buttons that you may
   have added to the identities page. The arguments to this hook are:

   <tscreen><verb>
    (SquirrelMail 1.4.4 or older and 1.5.0)
      [0] = hook name (always "options_identities_process")
      [1] = should I run the SaveUpdateFunction() (alterable)
   </verb></tscreen>

   Obviously, set the second array element to 1/true if you want to
   trigger SaveUpdateFunction() after the hook is finished - by default,
   it will not be called.

   <tscreen><verb>
    (SquirrelMail 1.4.6+ or 1.5.1+)
      [0] = hook name (always "options_identities_process")
      [1] = action (hook is used only in 'update' action and any custom
            action added to form with option_identities_table and
            option_identities_buttons hooks)
      [2] = processed identity number
   </verb></tscreen>

   Hook is not available in SquirrelMail 1.4.5.

  <tag/options_identities_renumber/
   This hook is called when one of the identities is being renumbered,
   such as if the user had three identities and deletes the second -
   this hook would be called with an array that looks like this:
   ('options_identities_renumber', 2, 1). The arguments to this hook
   are:

   <tscreen><verb>
      [0] = hook name (always "options_identities_renumber")
      [1] = being renumbered from ('default' or 1 through (# idents) - 1)
      [2] = being renumbered to ('default' or 1 through (# idents) - 1)
   </verb></tscreen>

   Hook is not available in SquirrelMail 1.4.5. Renumbering order differs
   in 1.4.5+ and 1.5.1+.

  <tag/options_identities_table/
   This hook allows you to insert additional rows into the table that
   holds each identity. The arguments to this hook are:

   <tscreen><verb>
      [0] = additional HTML attributes applied to table row.
            use it like this in your plugin:
               <tr "<?php echo $args[0]; ?>">
      [1] = is this an empty section (the one at the end of the list)?
      [2] = what is the 'post' value? (ident # or empty string if default)
   </verb></tscreen>

   You need to return any HTML you would like to add to the table.
   You could add a table row with code similar to this:

   <tscreen><verb>
      function demo_identities_table(&ero;$args) {
         return '<tr bgcolor="' . $args[0] . '"><td>&ero;nbsp;&etago;td><td>'
              . 'YOUR CODE HERE' . '&etago;td>&etago;tr>' . "\n";
      }
   </verb></tscreen>

   First hook argument was modified in 1.4.5/1.5.1. In SquirrelMail 1.4.1-1.4.4
   and 1.5.0 argument contains only background color. You should use
   <tt>&lt;tr bgcolor="&lt;?php echo $args[0]; ?&gt;"&gt;</tt> in these SquirrelMail versions.

   <tag/options_identities_buttons/
   This hook allows you to add a button (or other HTML) to the row of
   buttons under each identity. The arguments to this hook are:

   <tscreen><verb>
      [0] = is this an empty section (the one at the end of the list)?
      [1] = what is the 'post' value? (ident # or empty string if default)
   </verb></tscreen>

   You need to return any HTML you would like to add here. You could add
   a button with code similar to this:

   <tscreen><verb>
      function demo_identities_button(&ero;$args) {
         return '<input type="submit" name="demo_button_' . $args[1]
              . '" value="Press Me" />';
      }
   </verb></tscreen>

   Input element should use 'smaction[action_name][identity_no]' value in
   'name' attribute, if you want to process your button actions in
   SquirrelMail 1.4.6+ and 1.5.1+ options_identity_process hook.
</descrip>

See sample implementation of identity hooks in SquirrelMail demo plugin.

<tscreen><verb>
  cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/squirrelmail \
    co plugins/demo
</verb></tscreen>

<sect2>Attachment Hooks
<p>
When a message has attachments, this hook is called with the MIME types. For
instance, a .zip file hook is "attachment application/x-zip". The hook should
probably show a link to do a specific action, such as "Verify" or "View" for a
.zip file. Thus, to register your plugin for .zip attachments, you'd do this
in <tt>setup.php</tt> (assuming your plugin is called "demo"):

<tscreen><verb>
   $squirrelmail_plugin_hooks['attachment application/x-zip']['demo']
      = 'demo_handle_zip_attachment';
</verb></tscreen>

This is a breakdown of the data passed in the array to the hook that is called:

<tscreen><verb>
  [0] = Hook's name ('attachment text/plain')
  [1] = Array of links of actions (see below) (alterable)
  [2] = Used for returning to mail message (startMessage)
  [3] = Used for finding message to display (id)
  [4] = Mailbox name, urlencode()'d (urlMailbox)
  [5] = Entity ID inside mail message (ent)
  [6] = Default URL to go to when filename is clicked on (alterable)
  [7] = Filename that is displayed for the attachment
  [8] = Sent if message was found from a search (where)
  [9] = Sent if message was found from a search (what)
</verb></tscreen>

To set up links for actions, you assign them like this:
<tscreen><verb>
  $Args[1]['<plugin_name>']['href'] = 'URL to link to';
  $Args[1]['<plugin_name>']['text'] = _("What to display");
  $Args[1]['<plugin_name>']['extra'] = 'extra stuff, such as an <img ...> tag';
</verb></tscreen>

Note: _("What to display") is explained in the section about
internationalization.

You can leave the 'text' empty and put an image tag in 'extra' to show an
image-only link for the attachment, or do the opposite (leave 'extra' empty)
to display a text-only link.

It's also possible to specify a hook as "attachment type0/*",
for example "attachment text/*". This hook will be executed whenever there's
no more specific rule available for that type.

Putting all this together, the <tt>demo_handle_zip_attachment()</tt> function should
look like this (note the argument being passed):

<tscreen><verb>
   function demo_handle_zip_attachment(&$Args)
   {
      include_once(SM_PATH . 'plugins/demo/functions.php');
      demo_handle_zip_attachment_do($Args);
   }
</verb></tscreen>

And the <tt>demo_handle_zip_attachment_do()</tt> function in the
<tt>plugins/demo/functions.php</tt> file would typically (but not necessarily)
display a custom link:

<tscreen><verb>
   function demo_handle_zip_attachment_do(&ero;$Args)
   {
      $Args[1]['demo']['href'] = SM_PATH . 'plugins/demo/zip_handler.php?'
         . 'passed_id=' . $Args[3] . '&ero;mailbox=' . $Args[4]
         . '&ero;passed_ent_id=' . $Args[5];
      $Args[1]['demo']['text'] = _("Show zip contents");
   }
</verb></tscreen>

The file plugins/demo/zip_handler.php can now do whatever it needs with the
attachment (note that this will hand information about how to retrieve the
source message from the IMAP server as GET varibles).

<sect>Internationalization
<p>
This chapter should explain how SquirrelMail internationalization works and
provide information about some aspects of implementation.

<sect1>Supported languages
<p>
Valid language codes are (<em>list depends on SquirrelMail version</em>):
<itemize>
  <item>ar    - Arabic, windows-1256 charset
  <item>bg_BG - Bulgarian, windows-1251 charset
  <item>bn_IN - Bengali, utf-8 charset
  <item>ca_ES - Catalan, iso-8859-1 charset
  <item>cs_CZ - Czech, iso-8859-2 charset
  <item>cy_GB - Welsh, iso-8859-1 charset
  <item>da_DK - Danish, iso-8859-1 charset
  <item>de_DE - German, iso-8859-1 charset
  <item>el_GR - Greek, iso-8859-7 charset
  <item>en_GB - British, iso-8859-15 charset
  <item>en_US - English, charset depends on $default_charset
  <item>es_ES - Spanish, iso-8859-1 charset
  <item>et_EE - Estonian, iso-8859-15 charset
  <item>eu_ES - Basque, iso-8859-1 charset
  <item>fa_IR - Farsi, utf-8 charset
  <item>fi_FI - Finnish, iso-8859-1 charset
  <item>fo_FO - Faroese, iso-8859-1 charset
  <item>fr_FR - French, iso-8859-1 charset
  <item>he_IL - Hebrew, windows-1255 charset
  <item>hr_HR - Croatian, iso-8859-2 charset
  <item>hu_HU - Hungarian, iso-8859-2 charset
  <item>id_ID - Indonesian, iso-8859-1 charset
  <item>is_IS - Icelandic, iso-8859-1 charset
  <item>it_IT - Italian, iso-8859-1 charset
  <item>ja_JP - Japanese, euc-jp charset (emails are created in iso-2022-jp)
  <item>ka - Georgian, utf-8 charset (since 1.5.1 and 1.4.6)
  <item>ko_KR - Korean, euc-kr charset
  <item>lt_LT - Lithuanian, utf-8 charset
  <item>ms_MY - Malay, iso-8859-1 charset
  <item>nb_NO - Norwegian (Bokmal), iso-8859-1 charset
  <item>nl_NL - Dutch, iso-8859-1 charset
  <item>nn_NO - Norwegian (Nynorsk), iso-8859-1 charset
  <item>pl_PL - Polish, iso-8859-2 charset
  <item>pt_BR - Portuguese (Brazil), iso-8859-1 charset
  <item>pt_PT - Portuguese (Portugal), iso-8859-1 charset
  <item>ro_RO - Romanian, iso-8859-2 charset
  <item>ru_UA - Ukrainian Russian, koi8-r charset
  <item>ru_RU - Russian, utf-8 charset
  <item>sk_SK - Slovak, iso-8859-2 charset
  <item>sl_SI - Slovenian, iso-8859-2 charset
  <item>sr_YU - Serbian, iso-8859-2 charset
  <item>sv_SE - Swedish, iso-8859-1 charset
  <item>ug    - Uighur, utf-8 charset (some systems don't support Uighur system locale)
  <item>th_TH - Thai, tis-620 charset
  <item>tl_PH - Tagalog, iso-8859-1 charset (main translation is missing, only some plugins are translated)
  <item>tr_TR - Turkish, iso-8859-9 charset
  <item>uk_UA - Ukrainian, koi8-u charset
  <item>zh_CN - Chinese Simplified, gb2312 charset
  <item>zh_TW - Chinese Traditional, big5 charset
</itemize>

Charset totals:
<itemize>
  <item>iso-8859-1   = 21
  <item>iso-8859-2   = 8
  <item>utf-8        = 6
  <item>iso-8859-15  = 2
  <item>iso-8859-7   = 1
  <item>iso-8859-9   = 1
  <item>koi8-r       = 1
  <item>koi8-u       = 1
  <item>windows-1251 = 1
  <item>windows-1255 = 1
  <item>windows-1256 = 1
  <item>tis-620      = 1
  <item>gb2312       = 1
  <item>big5         = 1
  <item>euc-jp       = 1
  <item>euc-kr       = 1
</itemize>

<sect1>The <tt>$languages</tt> array
<p>
The <tt>$languages</tt> array is stored in <tt>functions/i18n.php</tt> and defines translations
that are enabled in SquirrelMail. Since SquirrelMail 1.5.1 <tt>functions/i18n.php</tt>
stores only English entry. Other languages are loaded automatically from
<tt>locale/&lt;language_code&gt;/setup.php</tt> files.

Format of array:
<tscreen><verb>
    $languages['language_code']['key'] = 'value'
</verb></tscreen>

Possible array key names:
<descrip>
  <tag/NAME/ Translation name in English. Any 8bit symbols must be HTML encoded.
  <tag/CHARSET/ Charset used by translation
  <tag/ALIAS/ 'language_code' should contain short language name
              (ISO-639). 'value' should contain name of other 'language_code'
              that defines translation with NAME and CHARSET keys.
              Entry links short language form with long form (language+country).
              See: http://www.loc.gov/standards/iso639-2/langhome.html and
              http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html
  <tag/ALTNAME/ Native translation name. Any 8bit symbols must be HTML encoded.
              Name is visible when $show_alternative_names is enabled.
  <tag/LOCALE/ Full locale name (in xx_XX.charset format or other format required
              by PHP gettext functions). From 1.4.4/1.5.1 'value' can contain
              array. If PHP version is older than 4.3.0, system uses only first
              locale name listed in array. First locale name must be compatible
              with FreeBSD system locale names.
  <tag/DIR/ Text direction. Used to define Right-to-Left languages. Possible
              values 'rtl' or 'ltr'. If undefined - defaults to 'ltr'.
  <tag/XTRA_CODE/ translation uses special functions. (see chapter about XTRA_CODE functions)
</descrip>

Each 'language_code' definition requires NAME+CHARSET or ALIAS keys. Other keys are
optional.

<sect1>XTRA_CODE functions
<p>
XTRA_CODE functions provide way to change interface behavior, when translation
requires special handling of some SquirrelMail functions. Functions are enabled
by setting XTRA_CODE option in $languages array and including appropriate
functions in <tt>functions/i18n.php</tt>. First part of function name is word listed in
$languages['language_code']['XTRA_CODE'] value. Second part is one of special
keywords. Possible keywords:
<descrip>
 <tag/_decode/ Used in <tt>src/compose.php</tt>, <tt>src/i18n.php</tt>, <tt>src/view_text.php</tt>, and <tt>functions/mime.php</tt>.
Requires mbstring support.

 <tag/_encode/ Used in <tt>src/compose.php</tt>, and <tt>src/read_body.php</tt>.

 <tag/_encodeheader/ Used in <tt>functions/mime.php</tt>. Should accept one string
 argument and return correctly encoded MIME header string.

 <tag/_decodeheader/ Used in <tt>functions/mime.php</tt>. Returning function

 <tag/_downloadfilename/ Used in <tt>functions/mime.php</tt>.

 <tag/_utf7_imap_encode/ Used in <tt>functions/imap_utf7_local.php</tt>. Returning function

 <tag/_utf7_imap_decode/ Used in <tt>functions/imap_utf7_local.php</tt>. Returning function

 <tag/_strimwidth/ Used in <tt>functions/mailbox_display.php</tt>. Returning function

 <tag/_wordwrap/ Used in <tt>functions/strings.php</tt> (sqWordWrap).
</descrip>

<sect1>Display of different charsets
<p>
When SquirrelMail generates HTML pages, it uses charset defined in translation
selected by end user. Interface can display emails encoded in different
charsets. In order to display characters that might be unsupported by user's
charset, SquirrelMail uses decoding functions that convert non us-ascii symbols
into HTML entities. All decoding functions are stored in functions/decode/
directory.

By default SquirrelMail includes decoding functions that support iso-8859-x,
windows-125x, utf-8, us-ascii, koi8-r, koi8-u, tis-620, ns-4551_1, iso-ir-111,
cp855 and cp866 charsets. Other decoding functions are distributed in separate
packages. Separate packaging of decoding functions is supported from
SquirrelMail 1.4.4 and 1.5.0. us-ascii decoding replaces all 8bit symbols with
question marks. UTF-8 decoding function does not enable decoding of five and six
byte UTF-8 symbols by default (code is commented) and replaces all incorrectly
formated 8bit symbols with question marks.

Some decoding functions might require PHP recode extension or PHP 4.3+ mbstring
extension. If your PHP installation does not support them, you might be using
slower and cpu/memory intensive functions.

<sect1>IMAP folder names
<p>
IMAP folder names use UTF7-IMAP charset. Folder names that are stored in
conf.pl must be encoded in UTF7-IMAP charset. SquirrelMail uses internal
functions that convert folder names from/to UTF7-IMAP charset. By default those
functions work with ISO-8859-1 charset. Other charsets are supported only
when PHP mbstring extension supports them.

TODO: write independent implementation of charset to UTF7-IMAP conversion.

<sect1>Plural forms
<p>
Since 1.5.1 SquirrelMail includes support of plural forms. It allows to use
correct translation forms with numbers. For example. "We have %s squirrel on
the roof." and "We have %s squirrels on the roof." can be written in one
function call without checking actual number for squirrels. Gettext functions
also deal with non English languages that might use different word forms for
two, five, ten or more units.

Support is provided by ngettext functions that exist in PHP gettext extension
from PHP 4.2.0 and by ngettext function replacements from php-gettext classes
(http://savannah.nongnu.org/projects/php-gettext). In order to use it correctly
when PHP gettext extension does not have ngettext support, SquirrelMail uses
bindtextdomain and textdomain wrappers that load missing functions.

If plugins want to use ngettext functions without increasing PHP requirements
to 4.2.0 with gettext support, they should require SquirrelMail 1.5.1, use
sq_bindtextdomain function instead of bindtextdomain and use sq_textdomain
function instead of textdomain function. If SquirrelMail wrapper functions
are used, there is no need to issue sq_bindtextdomain when plugins reverts to
SquirrelMail domain.

More information about ngettext and plural forms can be found at:
http://www.gnu.org/software/gettext/manual/html_chapter/gettext_10.html#SEC150

<sect1>Language setup
<p>
SquirrelMail uses <tt>set_up_language()</tt> function to setup language environment.
Environment is setup automatically when <tt>include/validate.php</tt> is loaded.

SquirrelMail gets interface language from three places:
 a) user preference. It is set in Options -> Display Preferences -> Language.
    preference uses language key. If user's preferences are not available (user
    is not logged in), system tries to extract language value from
    'squirrelmail_language' cookie.
 b) default SquirrelMail language that is set in configuration
    ($squirrelmail_default_language variable).
 c) preferred language setting provided by browser. It is used only when default
    SquirrelMail language is set to empty string

If language information is not available, SquirrelMail falls back to US English
translation.

<sect1>Time zones
<p>
If the PHP install allows modifying environment variable TZ, SquirrelMail allows
end users to select different time zone in their preferences. It can be set in
Options -> Personal Information -> Your current timezone. Time zone is
setup automatically when <tt>include/validate.php</tt> is loaded.

If TZ variable can't be modified (PHP is running is safe mode and variable
is not listed in PHP safe_mode_allowed_env_vars), user's time zone options are
not visible and interface use default webserver's time zone.

SquirrelMail 1.5.0 and older store list of available time zones in
<tt>locale/timezones.cfg</tt>. Since 1.5.1 standard times zones are moved to
<tt>include/timezones/standard.php</tt> and time zone handling differs from older
SquirrelMail versions. Time zone configuration is controlled in SquirrelMail
configuration utility (<tt/conf.pl/), 4. General Options &gt; 15. Time zone
configuration menu option. Administrator can select standard, strict, custom
and custom strict time zone handling.

Standard handling does not differ from previous SquirrelMail versions and
SquirrelMail uses GNU C geographical location based time zone names. Strict
handling uses time zone codes with offset from GMT. Strict time zones should
work on systems that don't support GNU C time zone naming. Custom and custom
strict handling uses <tt>config/timezones.php</tt> file instead of
<tt>include/timezones/standard.php</tt>.

<tt>config/timezones.php</tt> file should store $aTimeZones array with different set of
time zones. See default time zone set in <tt>include/timezones/standard.php</tt>. For
example:

<tscreen><verb>
&lt;?php
// World outside US border is a mirage

$aTimeZones=array();
$aTimeZones['America/New_York']['NAME']='US Eastern standard time';
$aTimeZones['America/New_York']['TZ']='EST5EDT';

$aTimeZones['America/Chicago']['NAME']='US Central standard time';
$aTimeZones['America/Chicago']['TZ']='CST6CDT';

// Oliver County, ND
$aTimeZones['America/North_Dakota/Center']['NAME']='US, Oliver County [ND]';
$aTimeZones['America/North_Dakota/Center']['TZ']='CST6CDT'; // CST since 1992

$aTimeZones['America/Denver']['NAME']='US Mountain standard time';
$aTimeZones['America/Denver']['TZ']='MST7MDT';

$aTimeZones['America/Los_Angeles']['NAME']='US Pacific standard time';
$aTimeZones['America/Los_Angeles']['TZ']='PST8PDT';

// Aliaska
$aTimeZones['America/Juneau']['NAME']='Aliaska, Juneau';
$aTimeZones['America/Juneau']['TZ']='NAST9NADT';
$aTimeZones['America/Yakutat']['NAME']='Aliaska, Yakutat';
$aTimeZones['America/Yakutat']['TZ']='NAST9NADT';
$aTimeZones['America/Anchorage']['NAME']='Aliaska, Anchorage';
$aTimeZones['America/Anchorage']['TZ']='NAST9NADT';
$aTimeZones['America/Nome']['NAME']='Aliaska, Nome';
$aTimeZones['America/Nome']['TZ']='NAST9NADT';
$aTimeZones['America/Adak']['NAME']='US, Aleutian Islands';
$aTimeZones['America/Adak']['TZ']='AST10ADT';

$aTimeZones['Pacific/Honolulu']['NAME']='US, Hawaii';
$aTimeZones['Pacific/Honolulu']['TZ']='UCT10';
$aTimeZones['America/Phoenix']['NAME']='US, Arizona';
$aTimeZones['America/Phoenix']['TZ']='MST7'; // gmt-7
$aTimeZones['America/Shiprock']['LINK']='America/Denver';

$aTimeZones['America/Boise']['NAME']='US, South Idaho';
$aTimeZones['America/Boise']['TZ']='MST7MDT';
$aTimeZones['America/Indianapolis']['NAME']='US, Indiana';
$aTimeZones['America/Indianapolis']['TZ']='EST5';
$aTimeZones['America/Indiana/Indianapolis']['LINK']='America/Indianapolis';
// Crawford County, Indiana
$aTimeZones['America/Indiana/Marengo']['NAME']='US, Crawford County [IN]';
$aTimeZones['America/Indiana/Marengo']['TZ']='EST5';
// Starke County, Indiana
$aTimeZones['America/Indiana/Knox']['NAME']='US, Starke County [IN]';
$aTimeZones['America/Indiana/Knox']['TZ']='EST5';
// Switzerland County, Indiana
$aTimeZones['America/Indiana/Vevay']['NAME']='US, Switzerland County [IN]';
$aTimeZones['America/Indiana/Vevay']['TZ']='EST5';
$aTimeZones['America/Louisville']['NAME']='US, Louisville [KY]';
$aTimeZones['America/Louisville']['TZ']='EST5EDT';
$aTimeZones['America/Kentucky/Louisville']['LINK']='America/Louisville';
// Wayne, Clinton, and Russell Counties, Kentucky
$aTimeZones['America/Kentucky/Monticello']['NAME']='US, Wayne, Clinton, and Russell Counties [KY]';
$aTimeZones['America/Kentucky/Monticello']['TZ']='EST5EDT';
// Michigan
$aTimeZones['America/Detroit']['NAME']='US, Michigan';
$aTimeZones['America/Detroit']['TZ']='EST5EDT';
// The Michigan border with Wisconsin switched from EST to CST/CDT in 1973.
$aTimeZones['America/Menominee']['NAME']='US, Menominee [MI]';
$aTimeZones['America/Menominee']['TZ']='CST6CDT';
?&gt;
</verb></tscreen>

GNU C time zone naming should be supported by many Unix OSes. It is recommended
way of setting time zone, because it handles historical changes and daylight
savings specific to selected geographical location. Strict time zones might
provide inaccurate or outdated time zone settings.

If modifications in TZ environment are visible in your webserver's logs (time
offset is changed), make sure that you can reproduce such behavior in latest PHP
version and report bug to PHP developers. Issue can be fixed by blocking use of
time zone (PHP safe mode and TZ is not listed in safe_mode_allowed_env_vars
setting or forced_prefs plugin) or by attaching special PHP script with
putenv('TZ=some time zone') call in PHP auto_append_file setting (suggestion is
not tested and you might have to fix all SquirrelMail exit calls).

Please note, that use of auto_append_file provides only temporally workaround
and does not fix your PHP setup. Script that runs as unprivileged user, should
be unable to affect webserver's logging system.

<sect1><tt>htmlspecialchars()</tt> vs <tt>htmlentities()</tt>
<p>
PHP provides <url
url="http://www.php.net/htmlspecialchars" name="htmlspecialchars()"> and <url
url="http://www.php.net/htmlentities" name="htmlentities()"> functions for HTML string
sanitizing. If developers want to sanitize HTML formating symbols, they should
use <tt>htmlspecialchars()</tt> and avoid using <tt>htmlentities()</tt>.

<tt>htmlentities()</tt> by default uses ISO-8859-1 charset. It sanitizes 8bit
ISO-8859-1 symbols. Other charsets use same 8bit ranges to store different
symbols.

<tt>htmlspecialchars()</tt> sanitizes only three, four or five 7bit symbols
(&amp;, &dquot;, ', &lt; and &gt;). <tt>htmlspecialchars()</tt> breaks only
<url url="http://en.wikipedia.org/wiki/ISO_2022" name="ISO-2022">
charsets and HTML encoded strings.

ISO-2022 charsets use 7bit ranges to store different symbols. Used
encoding table depends on escape sequences present in ISO-2022 text.

charset option is added to <tt>htmlentities()</tt> and <tt>htmlspecialchars()</tt> only in
PHP v.4.1.0 and list of supported charsets is limited. Fallback charset is same
good old and dangerous ISO-8859-1.

Differences between two functions can be examined in <url
url="http://www.php.net/get-html-translation-table"
name="get_html_translation_table()"> function.

If SquirrelMail charset decoding functions are used, they should apply
<tt>htmlspecialchars()</tt> to decoded string automatically. Second use of
<tt>htmlspecialchars()</tt> might break decoded strings.

<sect>Links
<p>
This chapter should provide links to external sources of information. RFCs, PHP
manuals, SquirrelMail API documentation, etc.

</article>
