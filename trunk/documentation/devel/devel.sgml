<!doctype linuxdoc system>
<!--
  $Id$

  Copyright (c) 2005-2006 The SquirrelMail Project Team
  This file is part of SquirrelMail webmail interface documentation.

  SquirrelMail is free software; you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any later
  version.

  SquirrelMail is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along with
  SquirrelMail; if not, write to the Free Software Foundation, Inc., 51 Franklin
  Street, Fifth Floor, Boston, MA 02110-1301, USA
-->
<article>

<title>SquirrelMail Developer's Manual
<author>The SquirrelMail Project Team</author>
<date>$Date$
<abstract>
This document provides information for the developers of the SquirrelMail
webmail interface.
</abstract>

<toc>

<p>
Document version: $Revision$

<sect>SquirrelMail overview
<p>
SquirrelMail is a standards-based webmail package written in PHP. It includes
built-in pure PHP support for the IMAP and SMTP protocols, and all pages render
in pure HTML 4.0 (with no JavaScript required) for maximum compatibility across
browsers. It has very few requirements and is very easy to configure and
install. SquirrelMail has all the functionality you would want from an email
client, including strong MIME support, address books, and folder manipulation.

<sect1>The project goals
<p>
The founding principles of the SquirrelMail Project were aimed at an audience
that was looking for a webmail application that would run on low end servers for
clients with simple browsers and a small set of expectations. Well, the
SquirrelMail user base has swollen greatly beyond the expectations of the
original SquirrelMail developers. Much of this new audience often wants and
needs a webmail client that will be much, much more.

In order to meet adequately the expanded needs of our current client base, the
basic principles of the SquirrelMail Project must be expanded to include several
additional items. The SquirrelMail Project goals are:

<enum>
  <item>SquirrelMail must be <it/very easy/ to install and configure.
  <item>SquirrelMail must have low server <it/requirements/, allowing it to be
        run on low-end hardware with just a basic Apache and PHP installation.
  <item>SquirrelMail must have low client <it/requirements/, allowing it to be
        used on low end browsers without <it/requiring/ any fancy JavaScript, or
        so forth.
  <item>SquirrelMail will provide a <it/complete/ webmail application that can
        be used as an individual's primary access point to email.
  <item>SquirrelMail will maintain an architecture that will <it/flex/ to the
        needs of a variety of system administrators, server configurations, and
        web browsers while maintaining <it/efficiency/ and <it/speed/.
</enum>

An important note is that the principles should be expanded and not replaced.
This means that the original, founding requirements of the SquirrelMail project
must never be overlooked as new and cool things are developed. Rather, special
care should be taken to assure that both the new and the old is respected as
development progresses and the capabilities of SquirrelMail are extended.

<sect1>Project management
<p>
The SquirrelMail Project Team is organized as four subteams, in order to get
more good stuff done in a more organized fashion. There is no official project
leader. Major decisions are more of a consensus between the team leaders. Each
subteam has a leader (or two), who is responsible for coordinating the
activities of their team, answering questions, and helping new
developers/contributors get started. Even though we have team leaders, all
project members are supposed to help out with the various tasks.

<sect2>The stable branch team
<p>
<bf/Team leaders:/
<quote/Jonathan Angliss &lt;jon@squirrelmail.org&gt;/
<quote/Chris Hilts &lt;tassium@squirrelmail.org&gt;/

<bf/Team responsibilities:/

<enum>
  <item>Manage, prioritize, and fix submitted bugs regarding the stable branch.
  <item>Prepare and maintain the stable branch road map.
  <item>Decide when to make a new stable branch release.
  <item>Preparing, releasing, and announcing the stable branch releases.
  <item>Give input to the development team regarding the development branch
        going stable.
  <item>Giving approval to a development version going stable.
</enum>

<sect2>The development branch team
<p>
<bf/Team leaders:/
<quote/Marc Groot Koerkamp &lt;marc@squirrelmail.org&gt; /

<bf/Team responsibilities:/

<enum>
  <item>Manage, prioritize, and fix submitted bugs regarding the development branch.
  <item>Manage, prioritize, and implement submitted feature requests.
  <item>Design and develop a clean, modular, and scalable architecture, and
        refactor the existing code to fit into it.
  <item>Prepare and maintain the development branch road map.
  <item>Decide when to make a new development branch release.
  <item>Preparing, releasing, and announcing the development branch releases.
  <item>Give input to the stable team regarding the development branch going
        stable.
</enum>

<sect2>The internationalization team
<p>
<bf/Team leader:/
<quote/&gt;/

<bf/Team responsibilities:/

<enum>
  <item>Organize the SquirrelMail translation collection.
  <item>Validate plugins for compliance with the development guidelines
        regarding translations.
  <item>Keep an eye on the licenses of various translations.
  <item>Recruit new translators and add new languages.
  <item>Try finding new maintainers for abandoned translations.
</enum>

<sect2>The plugin team
<p>
<bf/Team leader:/
<quote/Paul Lesneiwski &lt;paul@squirrelmail.org&gt;/

<bf/Team responsibilities:/

<enum>
  <item>Organize the SquirrelMail third party plugin collection.
  <item>Validate plugins for compliance with the development guidelines.
  <item>Keep an eye on the licenses of various plugins.
  <item>Try finding new maintainers for abandoned plugins.
  <item>Suggest plugins to be integrated in the core, or to become official
        plugins.
</enum>

<sect>General guidelines
<p>
This section should provide some generic information.

<sect1>Coding guidelines
<p>
To ensure that the SquirrelMail affects the logs as little as possible, executes
as quickly as possible and stays readable to the developers, please follow these
rules when coding.

<descrip>
<tag>Code with secure global variables
<p>
All code must work with the PHP setting <tt/register_globals/ set to <tt/off/.
This isn't hard, but you'll have to let go the idea that any variable that is
passed via GET, POST, sessions or cookies is available right away. <url
url="http://php.net/manual/en/ini.core.php#ini.register-globals" name="The PHP
manual"> has a chapter on the subject, explaining the problem more in detail.

There's a special function in SquirrelMail, <tt/sqGetGlobalVar()/, designed to
retrieve variables in a safe way. Use this function instead of accessing
<tt/$_GET/ etc. directly. Here's an example:

<tscreen><verb>
global $favorite_color;
sqgetGlobalVar('favorite_color', $favorite_color, SQ_FORM);
</verb></tscreen>

In the past, there have been some rather serious issues with PHP sessions and
SquirrelMail. Thus, if you need to place any values into the user's session,
there are some built-in SquirrelMail functions that you are strongly encouraged
to make use of. Using them also makes your job easier.

Strictly speaking, globalizing the variable shouldn't be necessary for the
SquirrelMail session functions, but certain versions of PHP seem to behave more
predictably if you do.

<tscreen><verb>
function demo_session($favorite_color = 'green') {
    global $favorite_color;

    // Placing a variable into the session:
    sqsession_register($favorite_color, 'favorite_color');

    // Retrieving a variable from the session:
    sqgetGlobalVar('favorite_color', $favorite_color, SQ_SESSION);

    // Checking for the presence of a variable in the session:
    if (sqsession_is_registered('favorite_color')) {
        // do something important
    }

    // Removing a variable from the session:
    sqsession_unregister('favorite_color');
}
</verb></tscreen>

Don't use the standard PHP functions <tt/session_register()/ and
<tt/session_unregister()/.

Be conscious of variable names and how they might interfere with one another for
SquirrelMail installations with <tt/register_globals/ set to <tt/on/. That is,
if you use a variable called <tt/$username/ (and do not declare it as global),
it will have a local scope and have no effect outside of the current function
with <tt/register_globals/ set to <tt/off/, but it would have potentially
disastrous effects in an environment where <tt/register_globals/ is set to
<tt/on/.

Since SquirrelMail 1.4.7 and 1.5.1, globals are cleaned in
<tt>functions/global.php</tt>. Make sure to include that file before setting any
own global variables. If variables are set before loading
<tt>functions/global.php</tt>, they can be corrupted in setups with
<tt/register_globals/ set to <tt/on/.

Read more about the functions in the SquirrelMail API Documentation.

<itemize>
  <item><tt/sqGetGlobalVar()/ (<url
        url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_squirrelmail_functions_global_php.html#functionsqgetGlobalVar"
        name="stable"> and <url
        url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions_global_php.html#functionsqgetGlobalVar"
        name="development">)
  <item><tt/sqsession_register()/ (<url
        url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---global.php.html#functionsqsession_register"
        name="stable"> and <url
        url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---global.php.html#functionsqsession_register"
        name="development">)
  <item><tt/sqsession_is_registered()/ (<url
        url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---global.php.html#functionsqsession_is_registered"
        name="stable"> and <url
        url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---global.php.html#functionsqsession_is_registered"
        name="development">)
  <item><tt/sqsession_unregister()/ (<url
        url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---global.php.html#functionsqsession_unregister"
        name="stable"> and <url
        url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---global.php.html#functionsqsession_unregister"
        name="development">)
</itemize>

<tag>Protect incoming and outgoing data
<p>
Any untrusted data must be escaped before output. This is to prevent cross site
scripting attacks. Pass every variable that comes in through the URL, a mail
message, or other external factors, through <tt/htmlspecialchars()/ before
outputting it. Test incoming data to see if it's the right format. If, for
instance, an integer is expected; test it with <tt/is_int()/. If the data is
expected to be within a certain range, make sure that it's really within that
range before using it.

<tag>Keep the code log safe
<p>
SquirrelMail code must be log safe code, i.e. do everything to avoid PHP notices
and other error messages, so SquirrelMail developers should always have error
reporting turned all the way up. You can do this by changing two settings in
your <tt/php.ini/ and restarting your web server:

<tscreen><verb>
display_errors = On
error_reporting = E_ALL
</verb></tscreen>

This way, you'll be sure to see all notices, warnings, and errors that your code
might generate. Please make sure to fix them all before you releasing your code.
This includes to initialize variables (just <tt/$a = 0/ is initialization) and
to use <tt/isset()/ or <tt/empty()/ in tests. Use <tt>ini_get("safe_mode")</tt>
to determine if you can use <tt>putenv()</tt>.

<tag>Do not end a file with a PHP end tag
<p>
At the very end of the file, do not use the PHP end tag <tt/?&gt;/ to close off
the file. It may seem innocuous, but if you have any blank lines either before
the first <tt/&lt;?php/ tag or after the last <tt/?&gt;/ tag in any of your
plugin files, you will break SquirrelMail in ways that may seem entirely
unrelated. For instance, this will often cause a line feed character to be
included with email attachments when they are viewed or downloaded, rendering
them useless! Files which aren't included by other files, for instance the files
in the directory <tt>src/</tt>, may of course end with HTML whereas included
files may not.

To ensure compability with all PHP installations, SquirrelMail code uses the
recommended PHP start tag <tt/&lt;?php/.

<tag>Group statements with braces
<p>
There shouldn't be a space between functions etc. and the brackets when using
them, except when writing <url
url="http://php.net/manual/en/language.control-structures.php" name="control
structures">. The use of braces, i.e. "{" and "}", is mandatory, even when
grouping just one statement. The indentation is done using spaces, never
tabulators, using four spaces per indentation level.

<bf>Examples:</bf>

<tscreen><verb>
if ($result > 5) {
    return TRUE;
} else {
    return FALSE;
}

function severeTesting() {
    ...
}
</verb></tscreen>

<tag>Keep the code internationalized
<p>
All SquirrelMail strings, but those in the configuration tools
<tt>config/conf.pl</tt> and <tt>src/configtest.php</tt>, must be
internationalized.

<tag>Use Single quotes when possible
<p>
Use single quotes (') instead of double quotes (") as much as possible because
it's faster to execute, but remember that you must use double quotes (") with
the <tt>gettext()</tt> strings (e.g. <tt>_("Translatable string")</tt>). Use
single quotes (') to refer an index between brackets of an array (example:
<tt>$foo['name']</tt> and not <tt>$foo[name]</tt>).

<tag>Use UNIX style line breaks
<p>
Use UNIX style line breaks when coding (i.e. line feeds only - no carriage
returns) and keep lines no longer than 80 characters when possible. Remember
that it isn't allowed to have a break in the middle of a <tt>gettext()</tt>
string.

<tag>Write useful documentation
<p>
The SquirrelMail Project use <url url="http://phpdocu.sf.net"
name="phpDocumentor"> to document the source code. Try to follow some common
sense and document what is really needed. Documenting the code properly can be a
big help for those who will take a look at your code, fix the bugs and even
improve it, in the true open-source spirit that SquirrelMail was built upon.
Anyone who adds or modifies a function, must add basic documentation about what
it does. In short, that looks like this for the following fantasy function:

<tscreen><verb>
/**
 * This function sends an IMAP query to the server and checks for
 * errors.
 * @param string servername The hostname of the IMAP server.
 * @param string query The IMAP query to send.
 * @param bool silent True if errors should be ignored silently.
 * @return array An array containing the results of the query.
 */
function sqimap_query($servername, $query, $silent = false) {
...
</verb></tscreen>

Every PHP file must have a general description of its content, like the example
below.

<tscreen><verb>
/**
 * about.php
 *
 * An "about box" detailing SquirrelMail info.
 *
 * @copyright &ero;copy; 1999-2006 The SquirrelMail Project Team
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version &#36;Id: about.php,v 1.12 2006/04/05 00:22:11 stekkel Exp $
 * @package squirrelmail
 */
</verb></tscreen>

Plugins must have the package "plugins" and a subpackage tag with the name of
the plugin, which is "demo" in this example:

<tscreen><verb>
 * @package plugins
 * @subpackage demo
</verb></tscreen>

Extended phpDocumentor documentation can be found in the <url
url="http://phpdoc.org/docs/HTMLSmartyConverter/default/phpDocumentor/tutorial_phpDocumentor.pkg.html"
name="phpDocumentor Guide to Creating Fantastic Documentation">.

<tag>Output larger chunks of HTML outside PHP
<p>
When echoing chunks of HTML code it is better/faster to do it outside of PHP
mode and embed the occasional <tt>&lt;?php echo $variable; ?&gt;</tt> than to
put the whole lot in one or more PHP echo statements.

<tag>Refer peekers to the top level
<p>
Every subdirectory of SquirrelMail, including the plugin directories, must
contain an index file. In the documentation directory, the index file displays
the various documents, but in all other directories it's a reference to the
parent directory. At the root directory there's a reference to the login page.

Plugins developers can accomplish may copy the file <tt/index.php/ from the main
plugins directory and then modify the documentation in it as mentioned above.

</descrip>

If you have any questions about security or are unsure, please contact the mailing
list or IRC channel, because security is very important for a widely used
application like SquirrelMail!

<sect1>Including files
<p>
It's sometimes needed to reference functionality provided in other files, and
therefore those files need to be included. Files that are included by
SquirrelMail, such as <tt>functions/global.php</tt> or a plugin's
<tt/setup.php/, already have much of the functionality available, but files that
are requested directly by the client browser, such as files in <tt>src/</tt> or
a plugin's custom options page, <it/must/ have the initialization file included.

The initialization file will set up the SquirrelMail environment automatically
to ensure that the user has been authenticated and is currently logged in, all
user preferences are loaded, internationalization support is included, that
<tt/stripslashes()/ is used on all incoming data (if <tt/magic_quotes_gpc/ is
on), and that all other basic SquirrelMail resources and functions are
initialized and included.

Note that as of SquirrelMail 1.4.0, all files are accessed using a constant
called <tt/SM_PATH/ that always contains the relative path to the main
SquirrelMail directory. This constant is always available for use when including
other files from the SquirrelMail core or any plugins. For files that are
requested directly by the client browser, it needs to be set.

<sect2>Including the initialization file (before SquirrelMail 1.5.2)
<p>
Before you do anything else, you need to define the constant <tt/SM_PATH/ and
include the initialization file. Make sure that <tt/SM_PATH/ points at the top
level of the SquirrelMail installation. Here's an example for a plugin:

<tscreen><verb>
/** @ignore */
define('SM_PATH', '../../');

/* Including the SquirrelMail initialization file. */
include_once(SM_PATH . 'include/validate.php');
</verb></tscreen>

The list below contains the files that are included by
<tt>include/validate.php</tt>. If the SquirrelMail version isn't listed, files
are included from v.1.3.2.

<tscreen><verb>
1. class/mime.class.php
   1.1. class/mime/Rfc822Header.class.php
   1.2. class/mime/MessageHeader.class.php
   1.3. class/mime/AddressStructure.class.php
   1.4. class/mime/Message.class.php
   1.5. class/mime/SMimeMessage.class.php
   1.6. class/mime/Disposition.class.php
   1.7. class/mime/Language.class.php
   1.8. class/mime/ContentType.class.php
2. functions/global.php
   * Fixes differences between PHP 4.0.x and 4.1+ globals (only in 1.4.x).
   * Undoes magic_quotes_gpc=on sanitizing
   * Sets $PHP_SELF (since 1.5.1)
   * Starts session
3. functions/strings.php
   3.1. functions/global.php
   3.2. plugins/compatibility/functions.php (compatibility v.2.0.4+, requires
        code patching)
   * Sets squirrelmail version variable and constant.
   * Sets $PHP_SELF (before 1.5.1)
4. config/config.php
   4.1. config/config_local.php (from 1.4.0rc1)
5. functions/i18n.php
   5.1. functions/global.php (from 1.4.0)
   * Reads 'squirrelmail_language' cookie
   * Loads $languages (since 1.5.1 $languages array is built from
     locale/*/setup.php files)
   * Loads own gettext functions, if PHP gettext is unavailable
6. functions/auth.php
7. include/load_prefs.php
   7.1. include/validate.php
   7.2. functions/prefs.php
      7.2.1. functions/global.php (sqgetGlobalVar() function)
      7.2.2. functions/plugin.php (do_hook_function() function,,
             since 1.4.4 and 1.5.1, see 7.3)
      7.2.3. $prefs_backend (only in 1.4.3 and 1.5.0)
             do_hook_function('prefs_backend') (since 1.4.4 and 1.5.1)
             functions/db_prefs.php
             functions/file_prefs.php
        7.2.3.1. functions/display_messages.php
                 (loaded only by file_prefs.php)
        7.2.3.2. files loaded by plugin that uses 'prefs_backend' hook
   7.3. functions/plugin.php
      7.3.1. functions/global.php (from 1.4.0 and 1.5.0)
      7.3.2. functions/prefs.php (from 1.5.1)
      7.3.3. plugins/*/setup.php files for enabled plugins.
      * Starts all squirrelmail_plugin_init_pluginname functions
   7.4. functions/constants.php
   7.5. do_hook('loading_prefs')
      7.5.1. files loaded by plugins that use the 'loading_prefs' hook
8. functions/page_header.php
   8.1. functions/strings.php
   8.2. functions/html.php
   8.3. functions/imap_mailbox.php
      8.3.1. functions/imap_utf7_local.php
   8.4. functions/global.php
9. functions/prefs.php (already loaded. see 7.2)
</verb></tscreen>

<sect2>Including the initialization file (since SquirrelMail 1.5.2)
<p>
Before you do anything else, you need to include the initialization file. Here's
an example for a plugin:

<tscreen><verb>
/* Include the SquirrelMail initialization file. */
require('../../include/init.php');
</verb></tscreen>

This takes care of setting up the session, defining the constants like
<tt/SM_PATH/, and includes a minimum set of required files.

The files which are included by <tt>include/init.php</tt> depends on which file
the client browser requested. All files in <tt>src/</tt> include the following
files:

<itemize>
  <item><tt>config/config.php</tt>
  <item><tt>functions/display_messages.php</tt>
  <item><tt>functions/global.php</tt>
  <item><tt>functions/html.php</tt>
  <item><tt>functions/page_header.php</tt>
  <item><tt>functions/plugin.php</tt>
  <item><tt>include/constants.php</tt>
  <item><tt>include/languages.php</tt>
</itemize>

Except for <tt/login.php/ and <tt/redirect.php/, they also include:

<itemize>
  <item><tt>functions/strings.php</tt>
  <item><tt>functions/auth.php</tt>
</itemize>

<tt/login.php/ also includes:

<itemize>
  <item><tt>functions/prefs.php</tt>
  <item><tt>functions/db_prefs.php</tt> or <tt>functions/file_prefs.php</tt>
        depending of the configured preference backend.
</itemize>

Because the use of <tt/require()/ in <tt>include/init.php</tt>, a plugin will fail if it
tries to include already included files. Be aware of that.

<sect2>Including other files
<p>
When including files, please make sure to use the <tt/include_once()/ function
and <it/not/ <tt/include()/ or <tt/require()/. They can cause fatal errors when
other plugins or SquirrelMail files include the same file. If you use
<tt/require_once()/ instead of <tt/include_once()/, PHP will raise a fatal
error if something goes wrong with the inclusion. That's the reason plugins
<it/must/ use <tt/include_once()/ instead of <tt/require_once()/.

Files that aren't included by the initialization file can be included like this:

<tscreen><verb>
include_once(SM_PATH . 'functions/imap_general.php');
</verb></tscreen>

<sect1>The base URI funcion
<p>
TODO: Add information about the base URI funcion.

<sect1>Version numbering
<sect2>The version number format<label id="versionformat">
<p>
The approach we take for version numbering is very similar to the way the Linux
kernel handles it. With this approach, it is easy to tell what's going on just
by looking at the three-part version number. The <it>full version number</it> is
a three-part number, using the format <tt>x.y.z</tt>, indicating a specific
implementation of SquirrelMail. Our examples will be <tt>1.0.6</tt> and
<tt>1.1.2</tt>.

The first number is the <it>major release number</it> (that's the <tt>x</tt>).
At first, this was <tt>0</tt> which meant we hadn't had any major releases yet.
In January of 2001, we released <tt>1.0.0</tt> which was our first major stable
release, and everything since then has been in the <tt>1</tt> family.

A major release of SquirrelMail should have a high-level set of specific goals
that it is meeting. For SquirrelMail 1.0, this was the reaching of a stable
release. For later versions, this may include implementation of more modular
libraries and API behind the code, a templating system for the user-interface,
and so forth.

The second number is the <it>minor release number</it> (that's the <tt>y</tt>).
The minor release number will tell you whether a release is a <it>stable</it> or
<it>development</it> branch of SquirrelMail. Even numbers (<tt>0</tt>,
<tt>2</tt>, <tt>4</tt>...) mean that it's a <it>stable</it> release, and odd
numbers (<tt>1</tt>, <tt>3</tt>, <tt>5</tt>...) mean it's a <it>development</it>
release.

A minor release of SquirrelMail should have a lower-level set of specific goals
that it is meeting. These goals should, somehow or another :), be a subset of
the goals for the major release of which it is a part. Basically, the minor
releases allow for the major goals of a major release to be broken into a more
discrete, attainable set of objectives.

Lastly, the final number is a <it>release incrementor</it> (that's the
<tt>z</tt>). In a stable branch, new versions of SquirrelMail will be release as
bugs are found and squished. In a development branch, new versions of
SquirrelMail will be released as progress is made toward the goals set for the
next major and minor release. New releases will happen <it>as needed</it> in a
stable branch. In a development branch, however, they should happen
<it>frequently</it>, as more progress is made toward the next minor release.

<sect2>Important points
<p>

<itemize>
  <item>Versions with a even minor release number are stable.
  <item>Versions with a odd minor release number are development.
  <item>New incremental releases in a stable branch should ONLY CONTAIN bug
        fixes. New features should always be implemented in the current
        development branch.
</itemize>

<sect2>The release timeline
<p>
The goals and objectives for each minor release should be carefully chosen so
that a new minor release can take place every three to four months. This is so
that our users can see actual improvements and will stick with us as we work to
make SquirrelMail a better web mail application.

<sect1>Submitting a patch
<p>
If you do not have commit access to the SquirrelMail Project Subversion (SVN), you can
provide a patch for bugs or features that you want to add. The developers will
then decide whether or not it can be applied to SquirrelMail. You can submit
your patch through the patches tracker on SourceForge.net, or you can attach it
to an existing bug report or feature request.

Important points when writing a patch, to improve the chances that it will be
committed:

<itemize>
  <item>Patch against the latest SVN version (prefered) or the latest released
        version.
  <item>Always use <tt/diff -u/. Do not submit entire changed files or use
        different patch options. Make sure you don't reverse the patch.
  <item>Take care to follow the SquirrelMail coding guidelines.
</itemize>

Do you feel that your patch is ignored? Feel free to ask on the <url
url="http://www.squirrelmail.org/wiki/MailingLists" name="SquirrelMail
development mailing list">.

<sect>Internationalization
<p>
This chapter should explain how SquirrelMail internationalization works and
provide information about some aspects of implementation.

<sect1>Supported languages
<p>
TODO: Remove statistics and add them dynamically to the i18n stat's page, using
a script.

Valid language codes are (<em>list depends on SquirrelMail version</em>):
<itemize>
  <item>ar    - Arabic, windows-1256 charset
  <item>bg_BG - Bulgarian, windows-1251 charset
  <item>bn_IN - Bengali, utf-8 charset
  <item>ca_ES - Catalan, iso-8859-1 charset
  <item>cs_CZ - Czech, iso-8859-2 charset
  <item>cy_GB - Welsh, iso-8859-1 charset
  <item>da_DK - Danish, iso-8859-1 charset
  <item>de_DE - German, iso-8859-1 charset
  <item>el_GR - Greek, iso-8859-7 charset
  <item>en_GB - British, iso-8859-15 charset
  <item>en_US - English, charset depends on $default_charset
  <item>es_ES - Spanish, iso-8859-1 charset
  <item>et_EE - Estonian, iso-8859-15 charset
  <item>eu_ES - Basque, iso-8859-1 charset
  <item>fa_IR - Farsi, utf-8 charset
  <item>fi_FI - Finnish, iso-8859-1 charset
  <item>fo_FO - Faroese, iso-8859-1 charset
  <item>fr_FR - French, iso-8859-1 charset
  <item>he_IL - Hebrew, windows-1255 charset
  <item>hr_HR - Croatian, iso-8859-2 charset
  <item>hu_HU - Hungarian, iso-8859-2 charset
  <item>id_ID - Indonesian, iso-8859-1 charset
  <item>is_IS - Icelandic, iso-8859-1 charset
  <item>it_IT - Italian, iso-8859-1 charset
  <item>ja_JP - Japanese, euc-jp charset (emails are created in iso-2022-jp)
  <item>ka - Georgian, utf-8 charset (since 1.5.1 and 1.4.6)
  <item>ko_KR - Korean, euc-kr charset
  <item>lt_LT - Lithuanian, utf-8 charset
  <item>ms_MY - Malay, iso-8859-1 charset
  <item>nb_NO - Norwegian (Bokmal), iso-8859-1 charset
  <item>nl_NL - Dutch, iso-8859-1 charset
  <item>nn_NO - Norwegian (Nynorsk), iso-8859-1 charset
  <item>pl_PL - Polish, iso-8859-2 charset
  <item>pt_BR - Portuguese (Brazil), iso-8859-1 charset
  <item>pt_PT - Portuguese (Portugal), iso-8859-1 charset
  <item>ro_RO - Romanian, iso-8859-2 charset
  <item>ru_UA - Ukrainian Russian, koi8-r charset
  <item>ru_RU - Russian, utf-8 charset
  <item>sk_SK - Slovak, iso-8859-2 charset
  <item>sl_SI - Slovenian, iso-8859-2 charset
  <item>sr_YU - Serbian, iso-8859-2 charset
  <item>sv_SE - Swedish, iso-8859-1 charset
  <item>ug    - Uighur, utf-8 charset (some systems don't support Uighur system locale)
  <item>th_TH - Thai, tis-620 charset
  <item>tl_PH - Tagalog, iso-8859-1 charset (main translation is missing, only some plugins are translated)
  <item>tr_TR - Turkish, iso-8859-9 charset
  <item>uk_UA - Ukrainian, koi8-u charset
  <item>zh_CN - Chinese Simplified, gb2312 charset
  <item>zh_TW - Chinese Traditional, big5 charset
</itemize>

Charset totals:
<itemize>
  <item>iso-8859-1   = 21
  <item>iso-8859-2   = 8
  <item>utf-8        = 6
  <item>iso-8859-15  = 2
  <item>iso-8859-7   = 1
  <item>iso-8859-9   = 1
  <item>koi8-r       = 1
  <item>koi8-u       = 1
  <item>windows-1251 = 1
  <item>windows-1255 = 1
  <item>windows-1256 = 1
  <item>tis-620      = 1
  <item>gb2312       = 1
  <item>big5         = 1
  <item>euc-jp       = 1
  <item>euc-kr       = 1
</itemize>

<sect1>The <tt>$languages</tt> array
<p>
The <tt>$languages</tt> array is stored in <tt>functions/i18n.php</tt> and defines translations
that are enabled in SquirrelMail. Since SquirrelMail 1.5.1 <tt>functions/i18n.php</tt>
stores only English entry. Other languages are loaded automatically from
<tt>locale/&lt;language_code&gt;/setup.php</tt> files.

Format of array:

<tscreen><verb>
    $languages['language_code']['key'] = 'value'
</verb></tscreen>

Possible array key names:
<descrip>
  <tag/NAME/ Translation name in English. Any 8bit symbols must be HTML encoded.
  <tag/CHARSET/ Charset used by translation
  <tag/ALIAS/ 'language_code' should contain short language name
              (ISO-639). 'value' should contain name of other 'language_code'
              that defines translation with NAME and CHARSET keys.
              Entry links short language form with long form (language+country).
              See: http://www.loc.gov/standards/iso639-2/langhome.html and
              http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html
  <tag/ALTNAME/ Native translation name. Any 8bit symbols must be HTML encoded.
              Name is visible when $show_alternative_names is enabled.
  <tag/LOCALE/ Full locale name (in xx_XX.charset format or other format required
              by PHP gettext functions). From 1.4.4/1.5.1 'value' can contain
              array. If PHP version is older than 4.3.0, system uses only first
              locale name listed in array. First locale name must be compatible
              with FreeBSD system locale names.
  <tag/DIR/ Text direction. Used to define Right-to-Left languages. Possible
              values 'rtl' or 'ltr'. If undefined - defaults to 'ltr'.
  <tag/XTRA_CODE/ translation uses special functions. (see chapter about XTRA_CODE functions)
</descrip>

Each 'language_code' definition requires NAME+CHARSET or ALIAS keys. Other keys are
optional.

<sect1>XTRA_CODE functions
<p>
XTRA_CODE functions provide way to change interface behavior, when translation
requires special handling of some SquirrelMail functions. Functions are enabled
by setting XTRA_CODE option in $languages array and including appropriate
functions in <tt>functions/i18n.php</tt>. First part of function name is word listed in
$languages['language_code']['XTRA_CODE'] value. Second part is one of special
keywords. Possible keywords:
<descrip>
 <tag/_decode/ Used in <tt>src/compose.php</tt>, <tt>src/i18n.php</tt>, <tt>src/view_text.php</tt>, and <tt>functions/mime.php</tt>.
Requires mbstring support.

 <tag/_encode/ Used in <tt>src/compose.php</tt>, and <tt>src/read_body.php</tt>.

 <tag/_encodeheader/ Used in <tt>functions/mime.php</tt>. Should accept one string
 argument and return correctly encoded MIME header string.

 <tag/_decodeheader/ Used in <tt>functions/mime.php</tt>. Returning function.

 <tag/_downloadfilename/ Used in <tt>functions/mime.php</tt>.

 <tag/_utf7_imap_encode/ Used in <tt>functions/imap_utf7_local.php</tt>. Returning function.

 <tag/_utf7_imap_decode/ Used in <tt>functions/imap_utf7_local.php</tt>. Returning function.

 <tag/_strimwidth/ Used in <tt>functions/mailbox_display.php</tt>. Returning function.

 <tag/_wordwrap/ Used in <tt>functions/strings.php</tt> (sqWordWrap).
</descrip>

<sect1>Display of different charsets
<p>
When SquirrelMail generates HTML pages, it uses charset defined in translation
selected by end user. Interface can display emails encoded in different
charsets. In order to display characters that might be unsupported by user's
charset, SquirrelMail uses decoding functions that convert non us-ascii symbols
into HTML entities. All decoding functions are stored in functions/decode/
directory.

By default SquirrelMail includes decoding functions that support iso-8859-x,
windows-125x, utf-8, us-ascii, koi8-r, koi8-u, tis-620, ns-4551_1, iso-ir-111,
cp855 and cp866 charsets. Other decoding functions are distributed in separate
packages. Separate packaging of decoding functions is supported from
SquirrelMail 1.4.4 and 1.5.0. us-ascii decoding replaces all 8bit symbols with
question marks. UTF-8 decoding function does not enable decoding of five and six
byte UTF-8 symbols by default (code is commented) and replaces all incorrectly
formated 8bit symbols with question marks.

Some decoding functions might require PHP recode extension or PHP 4.3+ mbstring
extension. If your PHP installation does not support them, you might be using
slower and cpu/memory intensive functions.

<sect1>IMAP folder names
<p>
IMAP folder names use UTF7-IMAP charset. Folder names that are stored in
conf.pl must be encoded in UTF7-IMAP charset. SquirrelMail uses internal
functions that convert folder names from/to UTF7-IMAP charset. By default those
functions work with ISO-8859-1 charset. Other charsets are supported only
when PHP mbstring extension supports them.

TODO: Write independent implementation of charset to UTF7-IMAP conversion.

<sect1>Plural forms
<p>
Since 1.5.1, SquirrelMail includes support of plural forms. It allows to use
correct translation forms with numbers. For example. "We have %s squirrel on
the roof." and "We have %s squirrels on the roof." can be written in one
function call without checking actual number for squirrels. Gettext functions
also deal with non English languages that might use different word forms for
two, five, ten or more units.

Support is provided by ngettext functions that exist in PHP gettext extension
from PHP 4.2.0 and by ngettext function replacements from php-gettext classes
(http://savannah.nongnu.org/projects/php-gettext). In order to use it correctly
when PHP gettext extension does not have ngettext support, SquirrelMail uses
bindtextdomain and textdomain wrappers that load missing functions.

If plugins want to use ngettext functions without increasing PHP requirements
to 4.2.0 with gettext support, they should require SquirrelMail 1.5.1, use
sq_bindtextdomain function instead of bindtextdomain and use sq_textdomain
function instead of textdomain function. If SquirrelMail wrapper functions
are used, there is no need to issue sq_bindtextdomain when plugins reverts to
SquirrelMail domain.

More information about ngettext and plural forms can be found at:
http://www.gnu.org/software/gettext/manual/html_chapter/gettext_10.html#SEC150

<sect1>Language setup
<p>
SquirrelMail uses <tt>set_up_language()</tt> function to setup language environment.
Environment is setup automatically when <tt>include/validate.php</tt> is loaded.

SquirrelMail gets interface language from three places:
 a) user preference. It is set in Options -> Display Preferences -> Language.
    preference uses language key. If user's preferences are not available (user
    is not logged in), system tries to extract language value from
    'squirrelmail_language' cookie.
 b) default SquirrelMail language that is set in configuration
    ($squirrelmail_default_language variable).
 c) preferred language setting provided by browser. It is used only when default
    SquirrelMail language is set to empty string

If language information is not available, SquirrelMail falls back to US English
translation.

<sect1>Time zones
<p>
If the PHP installation allows modifying environment variable TZ, SquirrelMail allows
the end users to select different time zone in their preferences. It can be set in
Options -> Personal Information -> Your current timezone. Time zone is
setup automatically when <tt>include/validate.php</tt> is loaded.

If TZ variable can't be modified (PHP is running is safe mode and variable
is not listed in PHP safe_mode_allowed_env_vars), user's time zone options are
not visible and interface use default webserver's time zone.

SquirrelMail 1.5.0 and older store list of available time zones in
<tt>locale/timezones.cfg</tt>. Since 1.5.1 standard times zones are moved to
<tt>include/timezones/standard.php</tt> and time zone handling differs from older
SquirrelMail versions. Time zone configuration is controlled in SquirrelMail
configuration utility (<tt/conf.pl/), 4. General Options &gt; 15. Time zone
configuration menu option. Administrator can select standard, strict, custom
and custom strict time zone handling.

Standard handling does not differ from previous SquirrelMail versions and
SquirrelMail uses GNU C geographical location based time zone names. Strict
handling uses time zone codes with offset from GMT. Strict time zones should
work on systems that don't support GNU C time zone naming. Custom and custom
strict handling uses <tt>config/timezones.php</tt> file instead of
<tt>include/timezones/standard.php</tt>.

<tt>config/timezones.php</tt> file should store $aTimeZones array with different set of
time zones. See default time zone set in <tt>include/timezones/standard.php</tt>. For
example:

<tscreen><verb>
&lt;?php
// World outside US border is a mirage

$aTimeZones=array();
$aTimeZones['America/New_York']['NAME']='US Eastern standard time';
$aTimeZones['America/New_York']['TZ']='EST5EDT';

$aTimeZones['America/Chicago']['NAME']='US Central standard time';
$aTimeZones['America/Chicago']['TZ']='CST6CDT';

// Oliver County, ND
$aTimeZones['America/North_Dakota/Center']['NAME']='US, Oliver County [ND]';
$aTimeZones['America/North_Dakota/Center']['TZ']='CST6CDT'; // CST since 1992

$aTimeZones['America/Denver']['NAME']='US Mountain standard time';
$aTimeZones['America/Denver']['TZ']='MST7MDT';

$aTimeZones['America/Los_Angeles']['NAME']='US Pacific standard time';
$aTimeZones['America/Los_Angeles']['TZ']='PST8PDT';

// Aliaska
$aTimeZones['America/Juneau']['NAME']='Aliaska, Juneau';
$aTimeZones['America/Juneau']['TZ']='NAST9NADT';
$aTimeZones['America/Yakutat']['NAME']='Aliaska, Yakutat';
$aTimeZones['America/Yakutat']['TZ']='NAST9NADT';
$aTimeZones['America/Anchorage']['NAME']='Aliaska, Anchorage';
$aTimeZones['America/Anchorage']['TZ']='NAST9NADT';
$aTimeZones['America/Nome']['NAME']='Aliaska, Nome';
$aTimeZones['America/Nome']['TZ']='NAST9NADT';
$aTimeZones['America/Adak']['NAME']='US, Aleutian Islands';
$aTimeZones['America/Adak']['TZ']='AST10ADT';

$aTimeZones['Pacific/Honolulu']['NAME']='US, Hawaii';
$aTimeZones['Pacific/Honolulu']['TZ']='UCT10';
$aTimeZones['America/Phoenix']['NAME']='US, Arizona';
$aTimeZones['America/Phoenix']['TZ']='MST7'; // gmt-7
$aTimeZones['America/Shiprock']['LINK']='America/Denver';

$aTimeZones['America/Boise']['NAME']='US, South Idaho';
$aTimeZones['America/Boise']['TZ']='MST7MDT';
$aTimeZones['America/Indianapolis']['NAME']='US, Indiana';
$aTimeZones['America/Indianapolis']['TZ']='EST5';
$aTimeZones['America/Indiana/Indianapolis']['LINK']='America/Indianapolis';
// Crawford County, Indiana
$aTimeZones['America/Indiana/Marengo']['NAME']='US, Crawford County [IN]';
$aTimeZones['America/Indiana/Marengo']['TZ']='EST5';
// Starke County, Indiana
$aTimeZones['America/Indiana/Knox']['NAME']='US, Starke County [IN]';
$aTimeZones['America/Indiana/Knox']['TZ']='EST5';
// Switzerland County, Indiana
$aTimeZones['America/Indiana/Vevay']['NAME']='US, Switzerland County [IN]';
$aTimeZones['America/Indiana/Vevay']['TZ']='EST5';
$aTimeZones['America/Louisville']['NAME']='US, Louisville [KY]';
$aTimeZones['America/Louisville']['TZ']='EST5EDT';
$aTimeZones['America/Kentucky/Louisville']['LINK']='America/Louisville';
// Wayne, Clinton, and Russell Counties, Kentucky
$aTimeZones['America/Kentucky/Monticello']['NAME']='US, Wayne, Clinton, and Russell Counties [KY]';
$aTimeZones['America/Kentucky/Monticello']['TZ']='EST5EDT';
// Michigan
$aTimeZones['America/Detroit']['NAME']='US, Michigan';
$aTimeZones['America/Detroit']['TZ']='EST5EDT';
// The Michigan border with Wisconsin switched from EST to CST/CDT in 1973.
$aTimeZones['America/Menominee']['NAME']='US, Menominee [MI]';
$aTimeZones['America/Menominee']['TZ']='CST6CDT';
?&gt;
</verb></tscreen>

GNU C time zone naming should be supported by many Unix OSes. It is recommended
way of setting time zone, because it handles historical changes and daylight
savings specific to selected geographical location. Strict time zones might
provide inaccurate or outdated time zone settings.

If modifications in TZ environment are visible in your webserver's logs (time
offset is changed), make sure that you can reproduce such behavior in latest PHP
version and report bug to PHP developers. Issue can be fixed by blocking use of
time zone (PHP safe mode and TZ is not listed in safe_mode_allowed_env_vars
setting or forced_prefs plugin) or by attaching special PHP script with
putenv('TZ=some time zone') call in PHP auto_append_file setting (suggestion is
not tested and you might have to fix all SquirrelMail exit calls).

Please note, that use of auto_append_file provides only temporally workaround
and does not fix your PHP setup. Script that runs as unprivileged user, should
be unable to affect webserver's logging system.

<sect1>Sanitizing HTML strings
<p>
PHP provides the functions <tt><url url="http://www.php.net/htmlspecialchars"
name="htmlspecialchars()"></tt> and <tt><url
url="http://www.php.net/htmlentities" name="htmlentities()"></tt> for HTML
string sanitizing. When SquirrelMail developers want to sanitize HTML formating
symbols, they should use <tt>htmlspecialchars()</tt> and avoid using
<tt>htmlentities()</tt>.

<tt>htmlentities()</tt> uses the ISO-8859-1 charset by default, sanitizing the
ISO-8859-1 eight bit symbols. Other charsets use the same eight bit ranges to
store different symbols, so this will break all translations not using
ISO-8859-1.

Depending on the parameters, <tt>htmlspecialchars()</tt> only sanitizes three,
four or five seven bit symbols (&ero;, &dquot;, ', &lt; and &gt;).
<tt>htmlspecialchars()</tt> only breaks HTML encoded strings using the <url
url="http://en.wikipedia.org/wiki/ISO_2022" name="ISO-2022"> charsets. ISO-2022
charsets use seven bit ranges to store different symbols. The used encoding
table depends on escape sequences present in ISO-2022 text.

A charset option is added to <tt>htmlentities()</tt> and
<tt>htmlspecialchars()</tt> since PHP 4.1.0 but list of supported charsets is
limited. The fallback charset is same good old and dangerous ISO-8859-1.

Differences between two functions can be examined with the <tt><url
url="http://www.php.net/get-html-translation-table"
name="get_html_translation_table()"></tt> function.

If SquirrelMail charset decoding functions are used, they should apply
<tt>htmlspecialchars()</tt> to the decoded string automatically. Don't try to
use <tt>htmlspecialchars()</tt> twince on the same string, since that might
break the decoded string.

<sect>Developing plugins
<p>
Due to the large number and wide range of functions plugins can cover it is
impractical to add all but the most popular to the SquirrelMail core project.
There is a separate <url url="http://sourceforge.net/projects/sm-plugins/"
name="SM Plugins"> project registered at SourceForge to house plugin code,
developers should consider joining this project.

In addition to this document, help writing plugins is easily obtained by posting
to the <url url="http://www.squirrelmail.org/wiki/MailingLists"
name="SquirrelMail plugins mailing list">.

<sect1>The plugin architecture
<p>
The plugin architecture of SquirrelMail is designed to make it possible to add
new features without having to patch SquirrelMail itself. Functionality like
password changing, displaying ads and calendars should be possible to add as
plugins.

<sect2>The idea
<p>
The idea is to be able to run random code at given places in the SquirrelMail
code. This random code should then be able to do whatever needed to enhance the
functionality of SquirrelMail. The places where code can be executed are called
"hooks".

There are some limitations in what these hooks can do. It is difficult to use
them to change the layout and to change functionality that already is in
SquirrelMail.

Some way for the plugins to interact with the help subsystem and translations
will be provided.

<sect2>The implementation
<p>
The plugin start point in the main SquirrelMail code is in the file
<tt>functions/plugin.php</tt>. In places where hooks are made available, they
are executed by calling one of the hook functions. The hook function then
traverses the array <tt/$squirrelmail_plugin_hooks['hookname']/ and executes all
the functions that are named in that array. Those functions are placed there
when plugins register themselves with SquirrelMail as discussed below. A plugin
may add its own internal functions to this array under any hook name provided by
the SquirrelMail developers.

A plugin must reside in a subdirectory of the <tt>plugins/</tt> directory. The
name of the subdirectory is considered to be the name of the plugin. Note that
the plugin will not function correctly if this is not the case.

To start using a plugin, its name must be added to the <tt/$plugins/ array in
<tt/config.php/ like this:

<tscreen><verb>
$plugins[] = 'plugin_name';
</verb></tscreen>

When a plugin is registered, the file <tt>plugins/plugin_name/setup.php</tt> is
included and the function <tt/squirrelmail_plugin_init_plugin_name()/ is called
with no parameters. That function is where the plugin may register itself
against any hooks it wishes to take advantage of.

<sect1>The starting point
<sect2>Plugin initialization
<p>
All plugins must contain a file called <tt/setup.php/ and must include a
function called <tt/squirrelmail_plugin_init_&lt;plugin_name&gt;()/ therein.
Since including numerous plugins can slow SquirrelMail's performance down
considerably, the <tt/setup.php/ file should contain little else. Any functions
that are registered against plugin hooks should do little more than call another
function in a different file.

Any other files used by the plugin should also be placed in the plugin directory
(or subdirectory thereof) and should contain the bulk of the plugin logic.

The function <tt/squirrelmail_plugin_init_&lt;plugin_name&gt;()/ is called to
initalize a plugin. This function could look something like this (if the plugin
was named "demo" and resided in the directory <tt>plugins/demo/</tt>):

<tscreen><verb>
function squirrelmail_plugin_init_demo() {
    global $squirrelmail_plugin_hooks;

    $squirrelmail_plugin_hooks['generic_header']['demo'] = 'plugin_demo_header';
    $squirrelmail_plugin_hooks['menuline']['demo'] = 'plugin_demo_menuline';
}
</verb></tscreen>

Please note that as of SquirrelMail 1.5.2, this function is no longer 
called at run time and is instead called (actually, just parsed) only 
once at configuration time.  Thus, the inclusion of any dynamic code 
(anything except hook registration) here is strongly discouraged.

<sect2>Adding functionality
<p>
In this example, the "demo" plugin should also have two other functions in its
<tt/setup.php/ file called <tt/plugin_demo_header()/ and
<tt/plugin_demo_menuline()/. The first of these might look something like this:

<tscreen><verb>
function plugin_demo_header() {
    include_once(SM_PATH . 'plugins/demo/functions.php');
    plugin_demo_header_do();
}
</verb></tscreen>

The function called <tt/plugin_demo_header_do()/ in the file
<tt>plugins/demo/functions.php</tt> contains the plugin's core logic for the
<tt/generic_header/ hook.

<sect1>Versioning
<sect2>Version numbering
<p>
In order to facilitate easier (and possibly automated) plugin management by 
system administrators as well as in-SquirrelMail functionality that enables
cross-plugin compatibility and communication, plugin versioning should remain 
consistent with that of SquirrelMail itself.  While SquirrelMail does its
best to work with non-standard version strings, versioning such as that
explained in <ref id="versionformat" name="Version numbering">, with the 
possible addition of an applicable SquirrelMail version, is the best way 
to track your plugin's development (i.e., "1.0.4-1.4.5" or just "1.0.4").  
Versions with only two digits ("1.0-1.4.5" or just "1.0") are also acceptable
(a third digit of zero is implied).

<sect2>Version reporting
<p>
The way any automated process gets its hands on the plugin version string
depends on the SquirrelMail version being used.  As of SqruirrelMail 1.5.2,
plugins should include an administrative function in <tt/setup.php/ that 
returns an array of details that describe the plugin, including its version 
number.  The function must be named <tt/&lt;plugin name&gt;_info()/ and 
should return an associative array of version and requirements information.  
Currently, at least the following elements are required, but the more 
information returned, the better.

<itemize>
  <item>plugin name
  <item>plugin version
  <item>minimum SquirrelMail 
  <item>version
  <item>summary
  <item>details
  <item>requires_configuration
  <item>requires_source_patch
</itemize>

Depending on the plugin, other information such as required PHP extensions
or Pear packages should be included.  Currently, SquirrelMail understands
the following values:

<tscreen><verb>
array(
   'english_name' => 'My Plugin Name',   // different than directory name
   'version' => '1.0.0',
   'required_sm_vesion' => '1.5.2',
   'summary' => 'This is the short plugin description',
   'details' => 'This is the long, detailed plugin description',
   'requires_configuration' => 1,  // can be 0 if no config file required
   'requires_source_patch' => 0,   // set to 2 if depends on SM version
   'required_plugins' => array(    // plugin name and version sub-array
                                      'compatibility' => '2.0.3',
                               ),
   'required_php_modules' => array(
                                      'recode'
                                 ),
   'required_pear_packages' => array(
                                      'Cache_Lite',
                                      'MDB2',
                                   ),
   'required_functions' => array(
                                      'recode_string',
                               ),
   'required_php_version' => '4.0.6',
   'other_requirements' => 'Courier Maildrop LDA',
   'external_project_uri' => 'http://www.example.org/my_plugin'
);
</verb></tscreen>

The more of these that are returned to SquirrelMail, the more useful 
and cooperative a plugin will be.

TODO: might be nice to see something like this for templates too (version/language(HTML,XML,XHTML,CHTML,WML,etc)/engine(Smarty,PHP,etc)/intended interface...

Prior to SquirrelMail 1.5.2, a function called <tt/&lt;plugin name&gt;_version()/ 
was required.  For the sake of compatibility, it can be piggy-backed on top of
the <tt/&lt;plugin name&gt;_info()/ function, such that <tt/setup.php/ looks like:

<tscreen><verb>
/**
  * Returns info about this plugin
  *
  */
function demo_info()
{

   return array(
                  'english_name' => 'Favorite Colors Demo',
                  'version' => '1.0',
                  'required_sm_vesion' => '1.4.0', 
                  'summary' => 'Shows user\'s favorite color in folder list.',
                  'details' => 'This plugin will show the user\'s favorite color above the folder list.',
                  'requires_configuration' => 0,
                  'requires_source_patch' => 0,
               );

}


/**
  * Returns version info about this plugin
  *
  */
function demo_version() 
{

   $info = demo_info();
   return $info['version'];

}
</verb></tscreen>

There is also a legacy version reporting mechanism that we would like plugin
authors to implement, since we are still in a transition period between the 
older and newer reporting usages. The now deprecated reporting mechanism  is to 
create a file called <tt/version/ in the plugin directory. That file should 
have only two lines: the first line should have the name of the plugin as 
named on the SquirrelMail web site (this is often a prettified version of the plugin
directory name), and the second line must have the version and nothing more. So
for our "demo" plugin, whose name on the web site might be something like "Demo
Favorite Colors", the file <tt>plugins/demo/version</tt> should have these two
lines:

<tscreen><verb>
Favorite Colors Demo
1.0
</verb></tscreen>

<sect1>Configuration
<p>
It is common to need a configuration file that holds some variables that are set
up at install time. For ease of installation and maintenance, you should place
all behavioral settings in a config file, isolated from the rest of your plugin
code. A typical file name to use is <tt/config.php/. If you are using such a
file, you should <it/not/ include a file called <tt/config.php/ in your plugin
distribution, but instead a copy of that file called <tt/config.sample.php/.
This helps systems administrators avoid overwriting the <tt/config.php/ files
and losing all of their setup information when they upgrade your plugin.

<sect1>Security considerations
<sect2>Calling external programs
<p>
All plugin authors should consider the security implications of their plugin.
Great care must always be taken if the plugin calls external programs, especially
ones that require set-uid permissions.

FIXME: more here about how to secure exec() calls with escapeshellarg() and named pipes method vs exec()


<sect2>Storing sensitive data
<p>
If a plugin needs to store sensitive user configuration files or other such data,
please consider extra steps to secure such files.  One very easy way to do so is
to wrap all configuration files in PHP tags (and C-style block comments if the
configuration data is not PHP code itself):

<tscreen><verb>
<?php /*

# below is example non-PHP configuration 
# data that is secured from prying eyes

username_1 = admin
username_2 = super_admin

*/ ?>
</verb></tscreen>

Another approach is to store sensitive configuration data in SquirrelMail's 
own <tt/$data/ directory, since most system administrators (at least those who 
have read the installation instructions) know that the <tt/$data/ directory 
needs to be protected and (hopefully) have made sure that it has been.

Never store unsecured configuration data that contains any user or system-specific 
information in your plugin directory.  Even the above suggestions
may not be sufficient depending on how sensitive the data is that you are 
storing.  In such a situation, you might think about a more complex encryption
scheme such as the one provided by the <bf/vadmin/ plugin.

Note that just shipping unsecured configuration files along with a 
configuration file for Apache (<tt/.htaccess/) is not sufficient because 
not every system uses Apache as its web server.

<sect2>Disallowing access for diabled plugins
<p>

In some cases, it is also prudent to make sure that the plugin doesn't perform 
its function when it is not enabled. Any functions or files that contain PHP
code that is <tt/not/ wrapped inside a function can be protected from being
executed when the plugin is not activated by adding code similar to this:

<tscreen><verb>
if ( !is_plugin_enabled('my_plugin_name') ) {
    exit('The plugin my_plugin_name isn't enabled in the SquirrelMail configuration.');
}
</verb></tscreen>

Note, however, that sometimes <tt/other/ plugins can legitimately access a 
disabled plugin, so don't shoot yourself in the foot with too much protection.


<sect1>Hooks
<p>
Hooks, when executed, are called with differing parameters and may or may not
take return values, all depending on the type of hook being called and the
context in which it is being used. On the source side (where the hook call
originates), all hooks have at least one parameter, which is the name of the
hook. After that, things get complicated.

<sect2>Hook types: parameters and return values
<p>
SquirrelMail uses four hook functions: <tt/do_hook()/, <tt/do_hook_function()/,
<tt/concat_hook_function()/, and <tt/boolean_hook_function()/.

The <tt/do_hook()/ function is a simple function that allows injecting custom
HTML or override default interface data. It doesn't pass any data and doesn't
ask for anything back. A limited number of <tt/do_hook()/ calls do pass some
extra parameters, in which case your plugin may modify the given data if you do
so by reference. It is not necessary to return anything from your function in
such a case; modifying the parameter data by reference is what does the job
(although the hook call itself (in the source) must grab the return value for
this to work). Note that in this case, the parameter to your hook function will
be an array, the first element simply being the hook name, followed by any other
parameters that may have been included in the actual hook call in the source.
Modify parameters with care!

Read more about the <tt/do_hook()/ function in the <url
url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---plugin.php.html#functiondo_hook"
name="stable"> and <url
url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---plugin.php.html#functiondo_hook"
name="development"> API documentation.

The <tt/do_hook_function()/ was intended to be the main hook type used when the
source needs to get something back from your plugin. It is somewhat limited in
that it will only use the value returned from the <it/last/ plugin registered
against the hook. The source for this hook might use the return value for
internal purposes, or might expect you to provide text or HTML to be sent to the
client browser (you'll have to look at its use in context to understand how you
should return values here). The parameters that your hook function gets will be
anything you see <it/after/ the hook name in the actual hook call in the source.
These cannot be changed in the same way that the <tt/do_hook()/ parameters can
be.

Read more about the <tt/do_hook_function()/ function in the <url
url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---plugin.php.html#functiondo_hook_function"
name="stable"> and <url
url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---plugin.php.html#functiondo_hook_function"
name="development"> API documentation.

The <tt/concat_hook_function()/ fixes some shortcomings of the
<tt/do_hook_function()/. It uses the return values of all plugins registered
against the hook. In order to do so, the return value is assumed to be a string,
which is just piled on top of whatever it got from the other plugins working on
the same hook. Again, you'll have to inspect the source code to see how such
data is put to use, but most of the time, it is used to create a string of HTML
to be inserted into the output page. The parameters that your hook function will
get are the same as for the <tt/do_hook_function/; they are anything <it/after/
the hook name in the actual hook call in the source.

Read more about the <tt/concat_hook_function()/ function in the <url
url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---plugin.php.html#functionconcat_hook_function"
name="stable"> and <url
url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---plugin.php.html#functionconcat_hook_function"
name="development"> API documentation.

The <tt/boolean_hook_function()/ allows plugins to vote for a specified action.
What that action is is entirely dependent on how the hook is used in the source
(look for yourself). Plugins make their vote by returning a boolean <tt/TRUE/ or
<tt/FALSE/ values. This hook may be configured to tally votes in one of three
ways. This configuration is done with the third parameter in the hook call in
the source:

<itemize>
  <item>&gt; 0 -- At least one <tt/TRUE/ will override all <tt/FALSE/.
  <item>&lt; 0 -- At least one <tt/FALSE/ will override all <tt/TRUE/.
  <item>= 0 -- Majority wins. Any ties are broken with the last parameter in the
        hook call.
</itemize>

The plugin's hook function will get the second paramter in the hook call in the
source as its parameter (this might be an array if multiple values need to be
passed).

Read more about the <tt/boolean_hook_function()/ function in the <url
url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---plugin.php.html#functionboolean_hook_function"
name="stable"> and <url
url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---plugin.php.html#functionboolean_hook_function"
name="development"> API documentation.

<sect2>List of hooks
<p>
This is a list of all hooks currently available in SquirrelMail, ordered by
file.

TODO: Update this list. (especially in 1.5.2, we are removing a great number of hooks to be replaced with the template_construct_&lt;template&gt; hook)

TODO: Reduce list of hooks by grouping them into separate chapters.

TODO: List is very out-of-synch with newest 1.5.2 and all its changes, as is the rest of the plugin documentation... much needs to be re-written

<tabular ca="llll">
<bf/Hook name/|<bf/Found in/|<bf/Called with/|<bf/Notes/@
<tt/abook&lowbar;init/|<tt>functions/addressbook.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/abook&lowbar;add&lowbar;class/|<tt>functions/addressbook.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/loading&lowbar;constants/|<tt>functions/constants.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/logout&lowbar;error/|<tt>functions/display&lowbar;messages.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/error&lowbar;box/|<tt>functions/display&lowbar;messages.php</tt>|<tt/concat&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/get&lowbar;pref&lowbar;override/|<tt>functions/file&lowbar;prefs.php</tt>|<tt/do&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/get&lowbar;pref/|<tt>functions/file&lowbar;prefs.php</tt>|<tt/do&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/options&lowbar;identities&lowbar;process/|<tt>functions/identity.php</tt>|<tt/do&lowbar;hook()/|&ero;@
<tt/options&lowbar;identities&lowbar;renumber/|<tt>functions/identity.php</tt>|<tt/do&lowbar;hook()/|&ero;%@
<tt/special&lowbar;mailbox/|<tt>functions/imap&lowbar;mailbox.php</tt>|<tt/do&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/rename&lowbar;or&lowbar;delete&lowbar;folder/|<tt>functions/imap&lowbar;mailbox.php</tt>|<tt/do&lowbar;hook&lowbar;function()/|%@
<tt/folder&lowbar;status/|<tt>functions/imap&lowbar;general.php</tt> (<tt>functions/imap&lowbar;mailbox.php</tt> since 1.5.1)|<tt/do&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/mailbox&lowbar;index&lowbar;before/|<tt>functions/mailbox&lowbar;display.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/mailbox&lowbar;form&lowbar;before/|<tt>functions/mailbox&lowbar;display.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/mailbox&lowbar;index&lowbar;after/|<tt>functions/mailbox&lowbar;display.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/check&lowbar;handleAsSent&lowbar;result/|<tt>functions/mailbox&lowbar;display.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/subject&lowbar;link/|<tt>functions/mailbox&lowbar;display.php</tt>|<tt/concat&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/mailbox&lowbar;display&lowbar;buttons/|<tt>functions/mailbox&lowbar;display.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/mailbox&lowbar;display&lowbar;button&lowbar;action/|<tt>functions/mailbox&lowbar;display.php</tt>|<tt/do&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/message&lowbar;body/|<tt>functions/mime.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt>attachment $type0/$type1</tt>|<tt>functions/mime.php</tt>|<tt/do&lowbar;hook()/|^@
<tt>attachment $type0/*</tt>|<tt>functions/mime.php</tt>|<tt/do&lowbar;hook()/|^@
<tt>attachment */*</tt>|<tt>functions/mime.php</tt>|<tt/do&lowbar;hook()/|^@
<tt/attachments&lowbar;bottom/|<tt>functions/mime.php</tt>|<tt/do&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/decode&lowbar;body/|<tt>functions/mime.php</tt>|<tt/do&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/generic&lowbar;header/|<tt>functions/page&lowbar;header.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/menuline/|<tt>functions/page&lowbar;header.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/prefs&lowbar;backend/|<tt>functions/prefs.php</tt>|<tt/do&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/config&lowbar;override/ (since 1.5.2)|<tt>include/init.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/loading&lowbar;prefs/|<tt>include/load&lowbar;prefs.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/addrbook&lowbar;html&lowbar;search&lowbar;below/|<tt>src/addrbook&lowbar;search&lowbar;html.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/addressbook&lowbar;bottom/|<tt>src/addressbook.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/compose&lowbar;form/|<tt>src/compose.php</tt>|<tt/do&lowbar;hook()/|!@
<tt/compose&lowbar;bottom/|<tt>src/compose.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/compose&lowbar;button&lowbar;row/|<tt>src/compose.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/compose&lowbar;send/|<tt>src/compose.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/compose&lowbar;send&lowbar;after/|<tt>src/compose.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/configtest/ (since 1.5.2)|<tt>src/configtest.php</tt>|<tt/boolean&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/folders&lowbar;bottom/|<tt>src/folders.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/help&lowbar;top/|<tt>src/help.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/help&lowbar;chapter/|<tt>src/help.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/help&lowbar;bottom/|<tt>src/help.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/left&lowbar;main&lowbar;after&lowbar;each&lowbar;folder/|<tt>src/left&lowbar;main.php</tt>|<tt/concat&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/left&lowbar;main&lowbar;before/|<tt>src/left&lowbar;main.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/left&lowbar;main&lowbar;after/|<tt>src/left&lowbar;main.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/login&lowbar;cookie/|<tt>src/login.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/login&lowbar;top/|<tt>src/login.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/login&lowbar;form/|<tt>src/login.php</tt>|<tt/do&lowbar;hook()/ (<tt/concat&lowbar;hook&lowbar;function()/ since 1.5.1)|&nbsp;@
<tt/login&lowbar;bottom/|<tt>src/login.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/optpage&lowbar;set&lowbar;loadinfo/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/optpage&lowbar;loadhook&lowbar;personal/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/optpage&lowbar;loadhook&lowbar;display/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/optpage&lowbar;loadhook&lowbar;highlight/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/optpage&lowbar;loadhook&lowbar;folder/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/optpage&lowbar;loadhook&lowbar;order/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;personal&lowbar;save/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;display&lowbar;save/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;folder&lowbar;save/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;save/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/optpage&lowbar;register&lowbar;block/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;link&lowbar;and&lowbar;description/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;personal&lowbar;inside/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;display&lowbar;inside/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;highlight&lowbar;inside/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;folder&lowbar;inside/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;order&lowbar;inside/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;personal&lowbar;bottom/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;display&lowbar;bottom/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;highlight&lowbar;bottom/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;folder&lowbar;bottom/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;order&lowbar;bottom/|<tt>src/options.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;highlight&lowbar;bottom/|<tt>src/options&lowbar;highlight.php</tt>|<tt/do&lowbar;hook()/|*@
<tt/options&lowbar;identities&lowbar;top/|<tt>src/options&lowbar;identities.php</tt>|<tt/do&lowbar;hook()/|&ero;@
<tt/options&lowbar;identities&lowbar;table/|<tt>src/options&lowbar;identities.php</tt>|<tt/concat&lowbar;hook&lowbar;function()/|&ero;@
<tt/options&lowbar;identities&lowbar;buttons/|<tt>src/options&lowbar;identities.php</tt>|<tt/concat&lowbar;hook&lowbar;function()/|&ero;@
<tt/message&lowbar;body/|<tt>src/printer&lowbar;friendly&lowbar;bottom.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/read&lowbar;body&lowbar;header/|<tt>src/read&lowbar;body.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/read&lowbar;body&lowbar;menu&lowbar;top/|<tt>src/read&lowbar;body.php</tt>|<tt/do&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/read&lowbar;body&lowbar;menu&lowbar;bottom/|<tt>src/read&lowbar;body.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/read&lowbar;body&lowbar;header&lowbar;right/|<tt>src/read&lowbar;body.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/read&lowbar;body&lowbar;top/|<tt>src/read&lowbar;body.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/read&lowbar;body&lowbar;bottom/|<tt>src/read&lowbar;body.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/login&lowbar;before/|<tt>src/redirect.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/login&lowbar;verified/|<tt>src/redirect.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/right&lowbar;main&lowbar;after&lowbar;header/|<tt>src/right&lowbar;main.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/right&lowbar;main&lowbar;bottom/|<tt>src/right&lowbar;main.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/search&lowbar;before&lowbar;form/|<tt>src/search.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/search&lowbar;after&lowbar;form/|<tt>src/search.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/search&lowbar;bottom/|<tt>src/search.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/logout/|<tt>src/signout.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/message&lowbar;body/ (since 1.5.2)|<tt>src/view&lowbar;html.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/message&lowbar;body/ (since 1.5.2)|<tt>src/view&lowbar;text.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/webmail&lowbar;top/|<tt>src/webmail.php</tt>|<tt/do&lowbar;hook()/|&nbsp;@
<tt/webmail&lowbar;bottom/|<tt>src/webmail.php</tt>|<tt/concat&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/logout&lowbar;above&lowbar;text/|<tt>src/signout.php</tt>|<tt/concat&lowbar;hook&lowbar;function()/|&nbsp;@
<tt/info&lowbar;bottom/|<tt>plugins/info/options.php</tt>|<tt/do&lowbar;hook()/|O
</tabular>

<tscreen><verb>
% = This hook is used in multiple places in the given file
# = Called with hook type (see below)
O = Optional hook provided by a particular plugin

&ero; = See "Identity hooks" below
^ = See "Attachment hooks" below
* = See "Options" below
! = See "Compose form hook" below
</verb></tscreen>

<sect2>The address book hooks
<p>
SquirrelMail 1.4.5 and 1.5.1 introduced two hooks that allow custom address book
backends. These hooks are placed in <tt>functions/addressbook.php</tt> file.
The <tt/abook_add_class/ hook is a simple hook designed to load custom address
book classes before any other code is loaded. The <tt/abook_init/ hook allows to
modify the <tt/$abook/ object that represents the configured address books. The
hook is executed after the initiation of the local address book backends (file
and DB based ones) and before the remote (LDAP) backend init. The second
<tt/abook_init/ argument stores the address book object, and the third argument
stores the return value of the <tt/$abook-&gt;add_backend()/ method.

<sect2>The attachment hooks
<p>
When a message has attachments, this hook is called for each attachment according
to its MIME type. For instance, a ZIP file will trigger a hook call to a hook
named "attachment application/x-zip". A plugin registered on such a hook typically 
will show a link to do a specific action, such as "Verify" or "View" for a ZIP 
file. Thus, to register your plugin for ZIP attachments, you'd do this in
<tt>setup.php</tt> (assuming your plugin is called "demo"):

<tscreen><verb>
$squirrelmail_plugin_hooks['attachment application/x-zip']['demo'] =
    'demo_handle_zip_attachment';
</verb></tscreen>

This is a breakdown of the data passed in the array to the hook that is called:

<tscreen><verb>
[0] = An array of links for actions (see below) (alterable).
[1] = The message index of the first message on the message list page within 
      which the current message is found (startMessage).  Can be used herein 
      for building URLs that point to the correct message list page.
[2] = The ID of the current message (id).  Can be used herein to build URLs 
      that point to the correct message.
[3] = The mailbox name, encoded with urlencode() (urlMailbox).  Can be used
      herein to build URLs that point to the correct message list page.
[4] = The entity ID of the attachment inside the mail message (ent).  Can 
      be used herein to build URLs that point to the correct attachment.
[5] = The default URL to go to when the filename is clicked upon (alterable,
      but only one URL is allowed, thus, the last plugin to execute for
      the current attachment wins out - usually it's better to just add a
      new action to array element 1 above).
[6] = The filename that is displayed for the attachment.
[7] = The "where" criteria that was used to find the current message (where)
      (only applicable when the message was in fact found using a search).  
      Can be used herein to build URLs that point to the correct message list 
      page.
[8] = The "what" criteria that was used to find the current message (what) 
      (only applicable when the message was in fact found using a search).
      Can be used herein to build URLs that point to the correct message list
      page.
</verb></tscreen>

To set up links for actions, add them to the array data passed in to the hook
like this:

<tscreen><verb>
$args[0]['&lt;plugin_name&gt;']['href'] = 'link URL';
$args[0]['&lt;plugin_name&gt;']['text'] = _("Text to display");
$args[0]['&lt;plugin_name&gt;']['extra'] =
    'extra stuff, such as an &lt;img ...&gt; tag (will be part of the clickable link)';
</verb></tscreen>

Note: The syntax of <tt/_("Text to display")/ is explained in the section about
internationalization.

You can leave the <tt/text/ empty and put an image tag in <tt/extra/ to show an
image-only link for the attachment, or do the opposite (leave <tt/extra/ empty)
to display a text-only link.

It's also possible to specify a hook as "attachment type0/*", for example
"attachment text/*". This hook will be executed whenever there's no more
specific rule available for that type.

There is also an "attachment */*" hook for plugins that want to handle any
and all attachments, regardless of their mime types.  Please use conservatively.

Putting all this together, the <tt/demo_handle_zip_attachment()/ function should
look like this (note how the argument is being passed):

<tscreen><verb>
function demo_handle_zip_attachment(&ero;$args) {
    include_once(SM_PATH . 'plugins/demo/functions.php');
    demo_handle_zip_attachment_do($args);
}
</verb></tscreen>

And the <tt/demo_handle_zip_attachment_do()/ function in the
<tt>plugins/demo/functions.php</tt> file would typically (but not necessarily)
display a custom link:

<tscreen><verb>
function demo_handle_zip_attachment_do(&ero;$args) {
    bindtextdomain('demo', SM_PATH . 'locale');
    textdomain('demo');

    $args[0]['demo']['href'] = SM_PATH . 'plugins/demo/zip_handler.php?' .
        'passed_id=' . $args[2] . '&ero;mailbox=' . $args[3] .
        '&ero;passed_ent_id=' . $args[4];
    $args[0]['demo']['text'] = _("Show zip contents");

    bindtextdomain('squirrelmail', SM_PATH . 'locale');
    textdomain('squirrelmail');
}
</verb></tscreen>

Note that the text domain has to be changed to properly translate the link text.

The file <tt>plugins/demo/zip_handler.php</tt> can now do whatever it needs with
the attachment (note that the link will hand information about how to retrieve the
source message from the IMAP server as GET varibles).

<sect2>The compose form hook
<p>
The <tt/compose_form/ hook allows plugins to insert their own code into the form
tag for the main message composition HTML form. Usually plugins will want to
insert some kind of code in an <tt/onsubmit/ event handler. In order to allow
more than one plugin to do so, all plugins using this hook to add some
<tt/onsubmit/ code need to add that code (without the enclosing attribute name
and quotes) as a new array entry to the global <tt/$compose_onsubmit/ array. The
code should use "return false" if the plugin has found a reason to stop form
submission, otherwise it should <it/do nothing/ (that is, please do not use
"return true", as that will prevent other plugins from using the <tt/onsubmit/
handler). SquirrelMail itself will insert a final "return true". All
<tt/onsubmit/ code will be enclosed in double quotes by SquirrelMail, so plugins
need to quote accordingly if needed. For example:

<tscreen><verb>
global $compose_onsubmit;
$compose_onsubmit[] = ' if (somevar == \'no\') return false; ';
</verb></tscreen>

Note the escaped single quotes. If you use double quotes, they would have to be
escaped as such:

<tscreen><verb>
global $compose_onsubmit;
$compose_onsubmit[] = ' if (somevar == \'no\') { alert(\\"Sorry\\"); return false; }';
</verb></tscreen>

Any other form tag additions by a plugin (beside <tt/onsubmit/ event code) can
currently be echoed directly to the browser.

<sect2>The configuration testing hook
<p>
SquirrelMail has a script called <tt/configtest.php/ which can be used to test
the SquirrelMail configuration. Since SquirrelMail 1.5.2, the configtest script
includes the <tt/configtest/ hook. The hook uses the boolean hook function call.
Plugins that are attached to this hook should return a boolean <tt/TRUE/ if
they detect any errors in the plugin's configuration. Verbose messages can be
printed with a <tt/do_err('error message', FALSE)/ function call or with any
standard PHP inline output function.

The configtest script is executed in an anonymous, unauthenticated environment, so
username and password information isn't available as it would be in all other 
SquirrelMail scripts. Only a limited set of functions are loaded. The 
<tt/do_err()/ function is a special configtest script
function, which is used to print error messages. If a plugin uses the
<tt/do_err()/ function, it is recommended to set the second function argument to
<tt/FALSE/ even on fatal errors. The configuration testing will stop on a fatal
error, that is, if the hook call returns a boolean <tt/TRUE/, and it's best to
let the script continue checking for other system configuration problems.

<sect2>The identity hooks
<p>
This set of hooks allows plugins to add options to the SquirrelMail identity
preferences.

This set of hooks is passed special information in the array of arguments:

<descrip>

<tag/options_identities_process/
This hook is called at the top of the "Identities" page, which is most useful
when the user has changed any identity settings. This is where you'll want to
save any custom information you are keeping for each identity or catch any
custom submit buttons that you may have added to the identities page. In
SquirrelMail 1.4.4 or older, and in 1.5.0, the arguments to this hook are:

<tscreen><verb>
[0] = hook name (always "options_identities_process")
[1] = should I run the <tt/SaveUpdateFunction()/ (alterable)
</verb></tscreen>

By default, <tt/SaveUpdateFunction()/ isn't called. If you want to trigger it,
you have to set the second array element to <tt/1/ or <tt/TRUE/.

Since SquirrelMail 1.4.6 and 1.5.1, the arguments to this hook are:

<tscreen><verb>
[0] = hook name (always "options_identities_process")
[1] = action (hook is used only in 'update' action and any custom
      action added to form with option_identities_table and
      option_identities_buttons hooks)
[2] = processed identity number
</verb></tscreen>

This hook isn't available in SquirrelMail 1.4.5.

<tag/options_identities_renumber/
This hook is called when one of the identities is being renumbered. If a user
has three identities and deletes the second, this hook would be called with an
array that looks like this: <tt/('options_identities_renumber', 2, 1)/. The
arguments to this hook are:

<tscreen><verb>
[0] = hook name (always "options_identities_renumber")
[1] = being renumbered from ('default' or 1 through (# idents) - 1)
[2] = being renumbered to ('default' or 1 through (# idents) - 1)
</verb></tscreen>

This hook isn't available in SquirrelMail 1.4.5, and the renumbering order
differs since 1.4.5 and 1.5.1.

<tag/options_identities_table/
This hook allows you to insert additional rows into the table that holds each
identity. The arguments to this hook are:

<tscreen><verb>
[0] = additional HTML attributes applied to table row.
      use it like this in your plugin:
         &lt;tr "&lt;?php echo $args[0]; ?&gt;"&gt;
[1] = is this an empty section (the one at the end of the list)?
[2] = what is the 'post' value? (ident # or empty string if default)
</verb></tscreen>

You need to return any HTML you would like to add to the table. You could add a
table row with code similar to this:

<tscreen><verb>
function demo_identities_table(&ero;$args) {
    return '&lt;tr bgcolor="' . $args[0] . '"&gt;&lt;td&gt;&ero;nbsp;&etago;td&gt;&lt;td&gt;' .
        'YOUR CODE HERE' . '&etago;td&gt;&etago;tr&gt;' . "\n";
}
</verb></tscreen>

The first hook argument was modified in 1.4.5 and 1.5.1. In SquirrelMail
1.4.1-1.4.4 and 1.5.0i, the argument only contains the background color. You
should use <tt/&lt;tr bgcolor="&lt;?php echo $args[0]; ?&gt;"&gt;/ in these
SquirrelMail versions.

<tag/options_identities_buttons/
This hook allows you to add a button (or other HTML) to the row of buttons under
each identity. The arguments to this hook are:

<tscreen><verb>
[0] = is this an empty section (the one at the end of the list)?
[1] = what is the 'post' value? (ident # or empty string if default)
</verb></tscreen>

You need to return any HTML you would like to add here. You could add a button
with code similar to this:

<tscreen><verb>
function demo_identities_button(&ero;$args) {
    return '&lt;input type="submit" name="demo_button_' . $args[1] .
        '" value="Press Me" /&gt;';
}
</verb></tscreen>

Since SquirrelMail 1.4.6 and 1.5.1, the <tt/input/ element should use a
<tt/smaction[action_name][identity_no]/ value in the <tt/name/ attribute if you
want to process your button actions in the <tt/options_identity_process/ hook.

</descrip>

See sample implementation of identity hooks in the SquirrelMail demo plugin.

<tscreen><verb>
svn co https://squirrelmail.svn.sourceforge.net/svnroot/squirrelmail/trunk/squirrelmail/plugins/demo
</verb></tscreen>

<sect2>The preference hooks
<p>
These hooks are used when you want to add preferences to existing preference
pages. See <ref id="preferences" name="Preferences">.

<sect2>Requesting new hooks
<p>
It's impossible for the SquirrelMail team to foresee all of the places where 
hooks might be useful, so you might need to negotiate the insertion of a new 
hook to make your plugin work. Start by writing a patch which will insert the 
hook you want to add, and mail your request (with the patch attached) to the 
SquirrelMail development mailing list. Don't forget to explain the need for the 
new hook in your message.

<sect1>Preferences<label id="preferences">
<p>
Before you start adding user preferences to your plugin, please take a moment to
think about it: in some cases, more preferences may not be a good thing. Having
too many preferences can be confusing. Thinking from the user's perspective,
will the proposed preferences actually be used? Will users understand what these
preferences are for? Consider this carefully.

If you decide that more preferences really are needed for your plugin, there are
two ways to add them. When there's only a few preferences that doesn't merit an
entirely new preferences page, you can incorporate them as a section in an
existing SquirrelMail preference section ("Personal Information", "Display
Preferences", "Message Highlighting", "Folder Preferences", or "Index Order").
If there's an extensive number of preferences, a separate page might be needed.
There may also be other reasons to create a separate page for the user to
interact with.

<sect2>Adding preferences to an existing page
<p>
There are two ways to accomplish the integration of your plugin's settings into
another preferences page. The first, and preferred, way to add preferences to an
existing preference page is to use one of the <tt/"optpage_loadhook_&lt;pref
page&gt;/ hooks. The <tt/sent_subfolders/ plugin has an excellent example of
this method. Briefly, this way of adding preferences consists of adding some
plugin-specific information to a predefined data structure which SquirrelMail
then uses to build the HTML input forms for you.

As an example, we'll use the <tt/optpage_loadhook_display/ hook to add a new
group of preferences to the display preferences page. First, we inform
SquirrelMail that we want to use this hook by adding a line to the
<tt/squirrelmail_plugin_init_demo()/ function in
<tt>plugins/demo/setup.php</tt>:

<tscreen><verb>
$squirrelmail_plugin_hooks['optpage_loadhook_display']['demo'] = 'demo_options';
</verb></tscreen>

Make sure that the function <tt/demo_options()/ calls another function, located
elsewhere, called <tt/demo_options_do()/. The <tt/demo_options()/ function needs
to add a new key to two arrays: <tt/$optpage_data['grps']/ and
<tt/$optpage_data['vals']/. The value associated with the key in
<tt/$optpage_data['grps']/ should simply be the plugin's section heading at the
preferences page, and the value associated with the key in
<tt/$optpage_data['vals']/ an array with all the plugin's preferences. (Yes,
that's four levels of nested arrays.) The specified preference attributes are
used by SquirrelMail to build the HTML input elements automatically. This
example includes just one input element, a <tt/select/ (drop-down) list:

<tscreen><verb>
function demo_options_do() {
    global $optpage_data;
    $optpage_data['grps']['demo'] = _("Demo Options");
    $optionValues = array();
    $optionValues[] = array(
        'name'    =&gt; 'plugin_demo_favorite_color',
        'caption' =&gt; _("Please choose your favorite color"),
        'type'    =&gt; SMOPT_TYPE_STRLIST,
        'refresh' =&gt; SMOPT_REFRESH_ALL,
        'posvals' =&gt; array(0 =&gt; _("red"),
                           1 =&gt; _("blue"),
                           2 =&gt; _("green"),
                           3 =&gt; _("orange")),
        'save'    =&gt; 'save_plugin_demo_favorite_color'
    );
    $optpage_data['vals']['demo'] = $optionValues;
}
</verb></tscreen>

The array used to specify each plugin preference has the following possible
attributes:

<descrip>

<tag><tt/name/</tag>
The preference name, used both as a key when saving the preferences and as the
input element name.

<tag><tt/caption/</tag>
The text that prefaces this preference.

<tag><tt/trailing_text/ (optional)</tag>
A text that follows a text input or a select list. This is useful for
indicating units, meanings of special values, etc.

<tag><tt/type/</tag>
The type of input element, which should be one of:
<itemize>
  <item><tt><bf/SMOPT_TYPE_STRING/</tt> for a string/text.
  <item><tt><bf/SMOPT_TYPE_STRLIST/</tt> for a select list.
  <item><tt><bf/SMOPT_TYPE_TEXTAREA/</tt> for a text area.
  <item><tt><bf/SMOPT_TYPE_INTEGER/</tt> for an integer.
  <item><tt><bf/SMOPT_TYPE_FLOAT/</tt> for a floating point number.
  <item><tt><bf/SMOPT_TYPE_BOOLEAN/</tt> for a boolean (yes/no) radio buttons.
  <item><tt><bf/SMOPT_TYPE_HIDDEN/</tt> for a hidden input (not actually shown on preferences page).
  <item><tt><bf/SMOPT_TYPE_COMMENT/</tt> for a showing the text specified by the <tt/comment/ attribute, but no user input is needed.
  <item><tt><bf/SMOPT_TYPE_FLDRLIST/</tt> for a select list of IMAP folders.
</itemize>

<tag><tt/refresh/ (optional)</tag>
Indicates if a link should be shown to refresh part or all of the window after
saving. Possible values are:
<itemize>
  <item><tt><bf/SMOPT_REFRESH_NONE/</tt> doesn't show a refresh link.
  <item><tt><bf/SMOPT_REFRESH_FOLDERLIST/</tt> shows a link for refreshing the folder list.
  <item><tt><bf/SMOPT_REFRESH_ALL/</tt> shows a link for refreshing the entire window.
</itemize>

<tag><tt/initial_value/</tag>
The value that should initially be placed in this input element.

<tag><tt/posvals/</tag>
For select lists, this should be an associative array where each key is an
actual input value and the corresponding value is what is displayed to the user
for that list item in the drop-down list.

<tag><tt/save/</tag>
You may indicate that special functionality needs to be used instead of just
saving this setting by giving the name of a function to call when this value
would otherwise just be saved in the user's preferences.

<tag><tt/size/</tag>
Specifies the size of certain input elements (typically textual inputs).
Possible values are:
<itemize>
  <item><tt><bf/SMOPT_SIZE_TINY/</tt>
  <item><tt><bf/SMOPT_SIZE_SMALL/</tt>
  <item><tt><bf/SMOPT_SIZE_MEDIUM/</tt>
  <item><tt><bf/SMOPT_SIZE_LARGE/</tt>
  <item><tt><bf/SMOPT_SIZE_HUGE/</tt>
  <item><tt><bf/SMOPT_SIZE_NORMAL/</tt>
</itemize>

<tag><tt/comment/</tag>
For <tt/SMOPT_TYPE_COMMENT/ type preferences, this is the text displayed to the
user.

<tag><tt/extra_attributes/</tag>
This is where you may add any additional JavaScript or other attributes to the 
preference element.  The value of this setting should be an array, where the 
keys of the array are the attribute names as you expect them to show up in the
resulting HTML, and the values are the corresponding attribute values.  For 
example, you could add an "onchange" JavaScript handler to a drop-down list:

<tscreen><verb>
    $optpage_data['vals'][1][] = array(
        'extra_attributes' =&gt; array('onchange' =&gt; 'alert("Thank you for changing the drop-down list!");'),
        ...
</verb></tscreen>

<tag><tt/post_script/</tag>
You may specify some script (usually JavaScript) that will be placed after
(outside of) the input element.

<tag><tt/htmlencoded/</tag>
Disables HTML sanitizing. Don't disable the sanitizing if user input is
possible, unless your plugin uses its own sanitizing functions. Currently only
works with <tt/SMOPT_TYPE_STRLIST/.

<tag><tt/folder_filter/</tag>
Controls folder list limits in <tt/SMOPT_TYPE_FLDRLIST/ widget. See the
<tt/$flag/ argument in the <tt/sqimap_mailbox_option_list()/ function.
Available since 1.5.1.

</descrip>

Note that you do not have to create a whole new section at the preferences page
if you merely want to add a simple input item or two to a preferences section
that already exists. For example, the "Display Options" page has these groups:

<tscreen><verb>
0 - "General Display Options"
1 - "Mailbox Display Options"
2 - "Message Display and Composition"
</verb></tscreen>

To add our previous input drop-down to the "Mailbox Display Options", don't
create your own group - just add it to the existing one.

<tscreen><verb>
function demo_options_do() {
    global $optpage_data;
    $optpage_data['vals'][1][] = array(
        'name'    =&gt; 'plugin_demo_favorite_color',
        'caption' =&gt; _("Please choose your favorite color"),
        'type'    =&gt; SMOPT_TYPE_STRLIST,
        'refresh' =&gt; SMOPT_REFRESH_ALL,
        'posvals' =&gt; array(0 =&gt; _("red"),
                           1 =&gt; _("blue"),
                           2 =&gt; _("green"),
                           3 =&gt; _("orange")),
        'save'    =&gt; 'save_plugin_demo_favorite_color'
    );
}

</verb></tscreen>

If you indicated a <tt/save/ attribute for any of your preferences, you must
create that function (you'll only need to do this if you need to do some special
processing for one of your settings). The function gets one parameter, which is
an object with mostly the same attributes you defined when you made the
preference above. The <tt/new_value/ (and possibly <tt/value/, which is the
current value for this setting) is the most useful attribute in this context:

<tscreen><verb>
function save_plugin_demo_favorite_color($option) {
    // if user chose orange, make note that they are really dumb
    if ($option-&gt;new_value == 3) {
        // more code here as needed
    }

    // don't even save this setting if user chose green (old setting will remain)
    if ($option-&gt;new_value == 2) {
        return;
    }

    // for all other colors, save as normal
    save_option($option);
}
</verb></tscreen>

The second, deprecated, legacy method is to add the HTML code for your
preferences directly to the preferences page of your choice. Although currently
very popular, avoid it if you can. That said, here is how it works. Look for any
of the hooks named as <tt/options_&lt;pref page&gt;_inside/, where &lt;pref
page&gt; is "display", "personal", etc. For this example, we'll use
<tt/options_display_inside/ and, as above, "demo" as our plugin name:

Inform SquirrelMail that we want to use this hook by adding a line to the
<tt/squirrelmail_plugin_init_demo()/ function in
<tt>plugins/demo/setup.php</tt>:

<tscreen><verb>
$squirrelmail_plugin_hooks['options_display_inside']['demo'] = 'demo_show_options';
</verb></tscreen>

Note that there are also hooks such as <tt/options_display_bottom/, however,
they place your preferences at the bottom of the preferences page, which is
usually not desirable (mostly because they also come <it/after/ the closure of
the HTML <tt/form/ element). It is possible to use these hooks if you want to
create your own form with custom submission logic.

The function <tt/demo_show_options_do()/ should have output similar to this
(note that you will be inserting code into a table that is already defined with
two columns, so please be sure to keep this framework in your plugin):

<tscreen><verb>
     ------cut here-------
     &lt;tr&gt;
        &lt;td&gt;
           OPTION_NAME
        &etago;td&gt;
        &lt;td&gt;
           OPTION_INPUT
        &etago;td&gt;
     &etago;tr&gt;
     ------cut here-------
</verb></tscreen>

Of course, you can place any text where "OPTION_NAME" is and any input tags
where "OPTION_INPUT" is.

You will want to use the <tt/options_&lt;pref page&gt;_save/ hook (in this case,
<tt/options_display_save/) to save the user's settings after they have pressed
the "Submit" button. Again, inform SquirrelMail that we want to use this hook by
adding a line to the <tt/squirrelmail_plugin_init_demo()/ function in
<tt>plugins/demo/setup.php</tt>:

<tscreen><verb>
$squirrelmail_plugin_hooks['options_display_save']['demo'] = 'demo_save_options';
</verb></tscreen>

The function <tt/demo_save_options_do()/ should put the user's settings into
permanent storage (see <ref id="savepref" name="Saving and retrieving
preferences"> below for more information). This example assumes that in the
preferences page, the input element's <tt/name/ attribute was set to
"demo_option":

<tscreen><verb>
global $data_dir, $username;
sqgetGlobalVar('demo_option', $demo_option);
setPref($data_dir, $username, 'demo_option', $demo_option);
</verb></tscreen>

<sect2>Creating a custom preference page
<p>
It is also possible to create a custom preference page for a plugin. This is
particularly useful when the plugin has numerous preferences or needs to offer
special interaction with the user (for things such as changing password, etc.).
Here is an outline of how to do so (again, using the "demo" plugin name):

First of all you have to add a new listing to the main "Options page". Always
use the <tt/optpage_register_block/ hook where you create a simple array that
lets SquirrelMail build the HTML to add the plugin preferences entry
automatically. Inform SquirrelMail that we want to use this hook by adding a
line to the <tt/squirrelmail_plugin_init_demo()/ function in
<tt>plugins/demo/setup.php</tt>:

<tscreen><verb>
$squirrelmail_plugin_hooks['optpage_register_block']['demo'] = 'demo_options_block';
</verb></tscreen>

Assuming the function <tt/demo_options_block()/ calls another function elsewhere
called <tt/demo_options_block_do()/, that function only needs to create a simple
array and add it to the <tt/$optpage_blocks/ array:

<tscreen><verb>
global $optpage_blocks;
bindtextdomain('demo', SM_PATH . 'locale');
textdomain('demo');
$optpage_blocks[] = array(
    'name' =&gt; _("Favorite Color Settings"),
    'url'  =&gt; SM_PATH . 'plugins/demo/options.php',
    'desc' =&gt; _("Change your favorite color and find new exciting colors"),
    'js'   =&gt; FALSE
);
bindtextdomain('squirrelmail', SM_PATH . 'locale');
textdomain('squirrelmail');
</verb></tscreen>

The array must have four elements:

<descrip>
<tag/name/
The title of the plugin's preference page as it will be displayed at the Options
page. Note that the text domain has to be changed to properly translate this text.
<tag/url/
The URI that points to your plugin's custom preferences page.
<tag/desc/
A description of what the preferences page offers the user. This is displayed at
the Options page below the title. Note that the text domain has to be changed to 
properly translate this text.
<tag/js/
Indicates if this preference page requires the client browser to be
JavaScript-capable. Should be <tt/TRUE/ or <tt/FALSE/.
</descrip>

The next step is to create your custom options page, keeping in mind the guidelines
in <ref id="pagescalleddirectly" name="pages called directly"> and possibly using 
the techniques described in <ref id="savepref" name="Saving and retrieving
preferences"> below. 

<sect2>Saving and retrieving preferences<label id="savepref">
<p>
TODO: Complete this section. (What happened to the text for this section from
plugin.txt?)

<sect1>Plugin pages called directly by the client browser<label id="pagescalleddirectly">
<p>
There are a few places in a plugin, such as when hooking into the "menuline" or 
"optpage_register_block" hooks, where you can provide a link to a file that is
called directly by the client browser.  No matter what that page does, it should 
always validate that the calling client has a current login session. Thus, all
such pages should start with the following code:

<tscreen><verb>
if (file_exists('../../include/init.php'))
   include_once('../../include/init.php');
else if (file_exists('../../include/validate.php'))
{
   define('SM_PATH', '../../');
   include_once(SM_PATH . 'include/validate.php');
}
else
{
   chdir('..');
   define('SM_PATH', '../');
   include_once(SM_PATH . 'src/validate.php');
}
</verb></tscreen>

TODO: Possibly provide link to the include hierarchy provided by init.php/validate.php

<sect1>Compatibility with older versions of SquirrelMail
<p>
Whenever new versions of SquirrelMail are released, there is always a
considerable lag time before it is widely adopted. During that transitional
time, especially when the new SquirrelMail version contains any architectural
and/or functional changes, plugin developers are put in a unique and very
difficult position. That is, there will be people running both the old and new
versions of SquirrelMail who want to use your plugin, and you will probably want
to accommodate them both.

One way to keep both sides happy is to keep two different versions of
your plugin up to date, one that runs under the older SquirrelMail, and one that
requires the newest SquirrelMail. This is inconvenient, however, especially if
you are continuing to develop the plugin. 

Depending on the changes implemented in the new SquirrelMail version, another
approach you may be able to use is to include code that can auto-sense the 
SquirrelMail version and make adjustments on the fly. There is a function called 
<tt/check_sm_version()/ available which does that. Read more about it in the 
<url
url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---global.php.html#functioncheck_sm_version"
name="stable"> and <url
url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---global.php.html#functioncheck_sm_version"
name="development"> API documentation.

Finally, there is a plugin called "Compatibility" that is intended to solve 
this problem without requiring any special coding on the part of plugin authors.  
Authors can develop one version of their plugin and seamlessly support any 
SquirrelMail version.  Plugin code is typically developed against the newest 
SquirrelMail release, and users running older versions of SquirrelMail can 
use said plugin as long as they also have the "Compatibility" plugin.  For 
more inforamtion, please download "Compatibility" and read its README file.

<sect1>Documentation files
<p>
Two more files are needed in your plugin directory. One file shall describes
your plugin and offers detailed instructions for configuration or help with
troubleshooting, etc. This file is usually entitled <tt/README/. Some useful
sections to include might be:

There are a few files that you should make sure to include when you build your
final plugin distribution.

<itemize>
  <item>Plugin name and author
  <item>Current version
  <item>Plugin features
  <item>Detailed plugin description
  <item>How-to for plugin configuration
  <item>Change log
  <item>Future ideas/enhancements/to do list
</itemize>

The other files shall explain how to install your plugin. This file is typically
called <tt/INSTALL/. If you do not require any special installation actions, you
can probably copy one from another plugin or use this as a template:

<tscreen><verb>
Installing the Demo plugin
==========================

1) Start with untaring the file into the plugins directory. Here is an example
   for the 1.0 version of the Demo plugin.

  cd plugins
  tar -zxvf demo-1.0-1.4.0.tar.gz

2) Change into the demo directory, copy "config.php.sample" to "config.php" and
   edit "config.php", making adjustments as you deem necessary. For more
   detailed explanations about each of these parameters, consult the README
   file.

      cd demo
      cp config.php.sample config.php
      vi config.php

3) Then go to your config directory and run "conf.pl". Choose option 8 and move
   the plugin from the "Available Plugins" category to the "Installed Plugins"
   category. Save and exit.

      cd ../../config/
      ./conf.pl

Upgrading the Demo plugin
=========================

1) Start with untaring the file into the plugins directory. Here is a example
   for the 3.1 version of the demo plugin.

  cd plugins
  tar -zxvf demo-3.1-1.4.0.tar.gz

2) Change into the demo directory, check your "config.php" file against the new
   version, to see if there are any new settings that you must add to your
   "config.php" file.

      diff -Nau config.php config.php.sample

   Or simply replace your "config.php" file with the provided sample and
   reconfigure the plugin from scratch (see step 2 under the installation
   procedure above).
</verb></tscreen>

<sect1>How to release your plugin
<p>
As long as you've consulted the list of plugin standards and done your best to
follow them, there's little standing in the way of great fame as an official
SquirrelMail plugin developer.

First you have to make a distribution file. The file should be named
<tt/demo-1.0-1.4.0.tar.gz/, where "demo" is the name of your plugin, "1.0" is
the version of your plugin, and "1.4.0" is the version of SquirrelMail required
to use your plugin.

You can create the distribution file in most *nix environments by running this
command from the plugins directory (NOT your plugin directory):

<tscreen><verb>
tar -czvf demo-1.0-1.4.0.tar.gz demo
</verb></tscreen>

When the plugin is ready to be reviewed by the SquirrelMail plugin team, mail it
to the SquirrelMail plugins team members.  Also consider asking on the SquirrelMail
plugins mailing list for access to upload your plugin to the 
<url url="http://squirrelmail.org/plugins.php" name="official third party plugin 
list"> after your plugin is approved.

When the plugin is approved and you're granted access to upload it, all you have
to do is the actual uploading along with filling out some general information 
about the plugin and what it does.

<sect>Miscellaneous
<p>
TODO: This is a quick and dirty import of the documents in "/doc/Development".
They all need to be cleand up and in the LinuxDoc format.

<sect1>Addressbook internals
<p>

<tscreen><verb>
This document describes how the SquirrelMail address book works. It is
primarily intended for developers.


1. The Basics
-------------

The address book is written using PHP classes, with one class,
AddressBook, that use one or more "backend" classes to access
different address books.

All operations, such as search, lookup, add etc., are performed by
calling the appropriate methods from the AddressBook object. The
operation will then be distributed by calling the correct method in
the appropriate backend(s).

To initialize the address book, the function addressbook_init() from
functions/addressbook.php is called. This function will create an
AddressBook object, add one backend for a personal address book (file
based storage), and add the LDAP backends defined in the $ldap_server
configuration directive (if any).

An addressbook can also be initialized like this if you want to:

  $abook = new AddressBook;

  // Add one file based backend (personal address book)
  $abook->add_backend("local_file", Array("filename" => $filename,
                                          "create"   => true));

  $abook->add_backend("ldap_server", <array with parameters>);

  $res = $abook->search("John Doe");

  echo $res[0]["name"] . " " . $res[0]["email"];



2. The AddressBook class
------------------------

This class acts as the glue for the address book. The following public
methods are provided:

  add_backend(NAME, PARAMETERS)

     NAME - The name of the backend to add. A file with a
     class abook_NAME must be included before this can
     be done.

     PARAMETERS - A mixed variable that is passed on to
     the backend class constructor. See each backend
     for docs.

   This method will return a backend ID number (not usable at the
   moment), or false if it failed.


  search(QUERY, [BNUM])

     QUERY - Something to search for. At the moment, only
     a string is allowed here, but advanced expressions
     will be supported through an array of parameters.

     BNUM  - Optional backend number to search.

   This method will return an array of result arrays (see below), an
   empty array if nothing was found, or false if the search failed.


  s_search(QUERY, [BNUM])

   The same as search(), but the result array is sorted by backend and
   fullname before it is returned.


  lookup(NICKNAME, [BNUM])

     NICKNAME - Return the user identified by NICKNAME in
     the addressbook.

     BNUM - ID of the backend to look in (optional).

   This method will return one result array (see below), an empty
   array if nothing was found, or false if the search failed. The
   lookup is only performed in "local" type backends.


  list_addr()

   This method will return an array of result arrays (see below) for
   all addresses in the addressbook, or false if it failed. Only
   addresses in "local" type backends are returned.


  add(USERDATA, BNUM)

     USERDATA - An array with user data. Must contain the following
     keys: nickname, firstname, lastname, email, label
     See below for information about the keys.

     BNUM - ID of the backend, as returned by add_backend, to add this
     data to.

   This method will return the backend ID of the backend where data
   was added, or false if it failed.


  remove(NICKNAME, BNUM)

     NICKNAME - Delete the user identified by NICKNAME in the
     addressbook or, if NICKNAME is an array, all users indentified by
     nthe nicknames in the array.

     BNUM - ID of the backend, as returned by add_backend, to remove
     the user(s) from.

   This method will retrun true if the user(s) was removed, or false
   if removal failed.


  modify(NICKNAME, USERDATA, BNUM)

     NICKNAME - Update the user identified by NICKNAME in the
     addressbook.

     USERDATA - Array with user data. The exisiting data for the user
     will be replaced with this.

     BNUM - ID of the backend, as returned by add_backend, to update
     the user in.

   This method will retrun true if the user was modified, or false if
   something failed.


If one of the above methods fail, an error message is available in the
AddressBook->error variable. Feel free to ignore it.


For the result of a search, lookup or list_addr, one or more result
arrays are used. These arrays contain the following keys:

  nickname:  Unique identifier for this name in this backend. Only
             usable for the local_file backend, and possibly LDAP.
  name:      Person's full name.
  email:     Person's e-mail address.
  backend:   Backend ID where this was found
  source:    Name of the backend where this was found

In addition, the following keys may exist for some backends:

  label:     Additional information about the person
  firstname: Person's first name
  lastname:  Person's last name


3. The backend classes
----------------------

... more later ...

Ask pallo@squirrelmail.org if you have any questions on how to build
new address book backends.
</verb></tscreen>

<sect1>Creating compose links easily
<p>

<tscreen><verb>
makeComposeLink() PHP function helps to create links to the compose page
easily, taking into account the user's settings, "Compose in new window" and
"Use JavaScript". Here's how to use it:

1) Build the last part of the URL as follows:
   $comp_uri = 'src/compose.php?mailbox='.$mailboxbox.'&amp;send_to='.urlencode($usermail);

2) The display part of the link can be anything you like (such the name of the user):
   $disp = 'The user's name';

3) Print it:
   echo makeComposeLink($comp_uri, $disp);

makeComposeLink() has been available since SquirrelMail 1.4.2.



Using the comp_in_new JavaScript function
=========================================

comp_in_new is the JavaScript function to popup a new compose window.

the function needs one argument:
1) url with arguments to the compose window.

example 1:
<a href="javascript:void(0)" onclick="comp_in_new("")>

example 2:
<a href="javascript:void(0)" onclick="comp_in_new("../../src/compose.php?argument1=true&amp;argument2=test")>
</verb></tscreen>

<sect1>Collected information about IMAP servers
<p>

<tscreen><verb>
-----------
Cyrus IMAPD
-----------
An IMAP server developed at Carnegie Mellon University

Tested Cyrus IMAP4 v2.2.12-Invoca-RPM-2.2.12-6.fc4
CAPABILITY IMAP4 IMAP4rev1 ACL QUOTA LITERAL+ MAILBOX-REFERRALS NAMESPACE
 UIDPLUS ID NO_ATOMIC_RENAME UNSELECT CHILDREN MULTIAPPEND BINARY SORT
 THREAD=ORDEREDSUBJECT THREAD=REFERENCES ANNOTATEMORE IDLE LISTEXT
 LIST-SUBSCRIBED X-NETSCAPE

PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen $MDNSent \*)

NAMESPACE (("INBOX." ".")) (("user." ".")) (("shared." "."))

Server supports server side sorting since 2.0.4 version. euc-jp, euc-kr,
tis-620, cp1251, cp1255 character sets are not supported by sorting functions
(v.2.2.12).

Site URL: http://asg.web.cmu.edu/cyrus/


--------
UW IMAPD
--------
Part of University of Washington IMAP toolkit.

Tested 2002e (2003.339)
CAPABILITY IMAP4REV1 IDLE NAMESPACE MAILBOX-REFERRALS BINARY UNSELECT SCAN SORT
 THREAD=REFERENCES THREAD=ORDEREDSUBJECT MULTIAPPEND LOGIN-REFERRALS STARTTLS
 AUTH=LOGIN

PERMANENTFLAGS (Seen \* \Answered \Flagged \Deleted \Draft \Seen)

NAMESPACE (("" "/")("#mhinbox" NIL)("#mh/" "/")) (("~" "/")) (("#shared/" "/")("#ftp/" "/")("#news." ".")("#public/" "/"))

Server supports server side sorting. Plain text logins are disabled by default.
Version visible in IMAP greeting can be used by more than one packaged version.

Site URL: http://www.washington.edu/imap/


------------
Courier IMAP
------------
Fast, scalable, enterprise IMAP server that uses Maildirs

CAPABILITY IMAP4rev1 UIDPLUS CHILDREN NAMESPACE THREAD=ORDEREDSUBJECT
 THREAD=REFERENCES SORT QUOTA IDLE ACL ACL2=UNION

PERMANENTFLAGS (\* \Draft \Answered \Flagged \Deleted \Seen)

NAMESPACE (("INBOX." ".")) NIL (("#shared." ".")("shared." "."))

Recent (3.0.0+) versions support most of character sets used by SquirrelMail,
if courier-imap is compiled with --enable-unicode option. Only koi8-u
is not supported. Server can be compiled with custom number of supported
character sets. Sorting can be disabled in imapd configuration. Capability
string can be set in configuration. Supports CRAM-MD5, CRAM-SHA1 and
CRAM-SHA256, if userdb or other backend stores passwords in plain text. Does
not handle traditional mailbox files.

Site URL: http://www.courier-mta.org/


-----------
hMailServer
-----------
Open source email server for WinNT and later.

Tested 4.1.1 (Build 140).
CAPABILITY IMAP4 IMAP4rev1 QUOTA

PERMANENTFLAGS (\Deleted \Seen \Draft \Answered \Flagged)

Site URL: http://www.hmailserver.com/


---------
Mercury32
---------
Mercury Mail Transport System. Free email server for Win32 and Netware.

Tested Win32 v.4.01b
CAPABILITY IMAP4rev1 X-MERCURY
PERMANENTFLAGS (\Deleted \Draft \Seen \Answered)

Comments:
* Server side sorting and threading are not supported.
* Message flags are not supported.
* IMAP folders can store messages _or_ other folders.
* Supports STARTTLS, if configured.
* May have issues with 8bit IMAP folder names.

Site URL: http://www.pmail.com


-------
Dovecot
-------
Dovecot Secure IMAP server.

Tested v.0.99.14

CAPABILITY IMAP4rev1 SORT THREAD=REFERENCES MULTIAPPEND UNSELECT LITERAL+ IDLE
  CHILDREN LISTEXT LIST-SUBSCRIBED NAMESPACE

PERMANENTFLAGS (\Answered \Flagged \Deleted \Seen \Draft \*)

IMAP server supports server side sorting and threading. 1.0alpha1-5 versions
violate syntax of responses to UID commands. NAMESPACE is supported in 1.0alpha.
Remote plain text logins are disabled by default.

Site URL: http://www.dovecot.org


---------
Binc IMAP
---------
Simple, lightweight IMAP server.

Tested v.1.2.13 and 1.3.4

CAPABILITY IMAP4rev1 STARTTLS AUTH=LOGIN AUTH=PLAIN (1.2.13)
CAPABILITY IMAP4rev1 STARTTLS AUTH=LOGIN AUTH=PLAIN IDLE LITERAL+ NAMESPACE
 CHILDREN (1.3.4)

PERMANENTFLAGS (\Answered \Flagged \Deleted \Seen \Draft) - 1.2.13
PERMANENTFLAGS (\Answered \Flagged \Deleted \Seen \Draft \*) - 1.3.4

IMAP server does not support server side sorting and threading. Plain text
logins are disabled by default. Due to available storage backend configuration
options it is impossible to create single preset, which covers all setups.

Site URL: http://www.bincimap.org


-------------------
GNU Mailutils IMAPD
-------------------
Part of GNU mail utility collection

Tested v.0.6.1 (Debian Sarge) and v.0.6.90

CAPABILITY IMAP4rev1 NAMESPACE IDLE X-VERSION AUTH=GSSAPI AUTH=ANONYMOUS
 AUTH=EXTERNAL AUTH=PLAIN AUTH=LOGIN AUTH=SECURID AUTH=DIGEST-MD5 AUTH=CRAM-MD5

PERMANENTFLAGS (\Answered \Deleted \Seen)

NAMESPACE (("" "/")) NIL NIL

Can use UW preset. Server side sorting is not supported. IMAP folders can
store messages or subfolders. Can't create second level (mail/Folder/Subfolder/)
subfolders. Invalid unseen message count, when \Seen flag is toggled manually.
Folder listing with non-default sort order issues are fixed in cvs version.
Use of server with SquirrelMail is not recommended and not supported.

Site URL: http://savannah.gnu.org/projects/mailutils


------------
DBMail IMAPD
------------
IMAP server that is part of DBMail email suite. DBMail provides local delivery
agent, pop3 and imap servers. User information and emails are stored in
database.

Tested v.2.0.7
Information provided by Muhd Zamri

CAPABILITY IMAP4 IMAP4rev1 AUTH=LOGIN ACL NAMESPACE SORT

PERMANENTFLAGS (\Seen \Answered \Deleted \Flagged \Draft \Recent)

NAMESPACE (("" "/")) (("#Users" "/")) (("#Public" "/"))

IMAP server provides partial support of IMAP QUOTA extension. setquota command
is not supported and QUOTA extension is not advertised in CAPABILITY. SORT
extension is broken in tested version.

> A05 UID SORT (FROM) US-ASCII ALL
A05 BAD syntax error in sort keys

> A06 UID SORT (FROM) ISO-8859-1 ALL
A06 BAD UID command received in invalid state

Site URL: http://www.dbmail.org


----
Bejy
----
HTTP and email server written in Java. User information is stored in database.
SELECT response is in rfc 2060 format.

Tested v.1.4.1.58b

CAPABILITY IMAP4rev1

PERMANENTFLAGS - missing
FLAGS (\Answered \Flagged \Deleted \Seen \Draft)

Site URL: http://www.bejy.net

--------
Mac OS X
--------
No clear information about used software. Some OS X versions might use Eudora
Internet Messaging Suite (EIMS, http://www.eudora.com/eims/), some - Apple IMAP
server, some - Cyrus.


---------------------
Exchange IMAP service
---------------------
IMAP server included in proprietary Exchange Server, Microsoft messaging and
collaboration server.

Server does not support server side sorting.


----
PMDF
----
PMDF is a proprietary, high performance, standards-based Internet messaging
product suite for Windows, OpenVMS, Tru64 UNIX, and Solaris.

Tested IMAP4rev1 Server PMDF V6.2-X29.1
CAPABILITY IMAP4 IMAP4REV1 NAMESPACE X-NON-HIERARCHICAL-RENAME AUTH=LOGIN
 AUTH=PLAIN

PERMANENTFLAGS (\Answered \Flagged \Deleted \Seen)

NAMESPACE (("" "/")) NIL NIL

Supports TLS and SSL encryption, SASL CRAM-MD5 and DIGEST-MD5 authentication.
Includes SIEVE (rfc3028) support.

Site URL: http://www.process.com/tcpip/pmdf.html

-----------------
Merak IMAP server
-----------------
Proprietary IMAP server included in Merak Email Server Suite.

Tested 8.3.0.r and 8.3.1 beta.

CAPABILITY IMAP4rev1 AUTH=CRAM-MD5 AUTH=DIGEST-MD5 AUTH=LOGIN AUTH=PLAIN SORT
 THREAD-ORDEREDSUBJECT UIDPLUS QUOTA ACL NAMESPACE STARTTLS

PERMANENTFLAGS (\Seen \Answered \Flagged \Draft \Deleted)

NAMESPACE (("" "/")) NIL NIL

INBOX folder is lowercased. IMAP folder names are case insensitive. Possible
issue with IMAP SORT extension.

-----
TEST_5

Request:
A005 UID SORT (DATE) ISO-8859-1 ALL
Response:
* UID SORT 1 2
UID SORT Completed
-----
SquirrelMail expects '* SORT 1 2'

Site URL: http://www.icewarp.com


--------------------
MailSite IMAP server
--------------------
Commercial email server for Windows.

Tested 6.1.22.1 version.

CAPABILITY IMAP4rev1 ACL NAMESPACE UIDPLUS AUTH=NTLM AUTH=SCRAM-MD5
 AUTH=CRAM-MD5

PERMANENTFLAGS (\Answered \Flagged \Deleted \Seen \Draft \*)

NAMESPACE (("" "/")) (("#shared/" "/")) NIL

FETCH response to UID STORE command violates RFC 3501.

Site URL: http://www.rockliffe.com/


-----------------------------
IMAP server ready H mproxyus4
-----------------------------
Unidentified IMAP server or IMAP proxy used by 1&1 Internet Inc.
(http://www.1and1.com and http://www.1und1.de)

CAPABILITY CHILDREN ID IDLE IMAP4 IMAP4rev1 LITERAL+ LOGIN-REFERRALS
 MAILBOX-REFERRALS NAMESPACE UIDPLUS QUOTA STARTTLS AUTH=PLAIN AUTH=LOGIN

http://thread.gmane.org/gmane.mail.squirrelmail.user/26433
</verb></tscreen>

<sect1>MIME support introduction
<p>

<tscreen><verb>
The intended audience for this document are people who want to understand how
the MIME code works. This is a technical documentation of how mime.php
works and how it parses a MIME encoded message.


Object Structure
----------------
There are two objects that are used: "message" and "msg_header". Here is a
brief overview of what each object contains.

msg_header
   Contains variables for all the necessary parts of the header of a
   message. This includes (but is not limited to) the following:  to, from,
   subject, type (type0), subtype (type1), filename ...

message
   This contains the structure for the message. It contains two parts:
   $header and $entities[]. $header is of type msg_header, and $entities[]
   is an array of type $message. The $entities[] array is optional. If
   it does not exist, then we are at a leaf node, and have an actual
   attachment (entity) that can be displayed. Here is a tree view of how
   this object functions.

   header
   entities
      |
      +--- header
      |
      +--- header
      |    entities
      |       |
      |       +--- header
      |       |
      |       +--- header
      |
      +--- header


Getting the Structure
---------------------
Previously (version 0.4 and below), SquirrelMail handled all the parsing of
the email message. It would read the entire message in, search for
boundaries, and create an array similar to the $message object described
above. This was very inefficient.

Currently, all the parsing of the body of the message takes place on the
IMAP server itself. According to RFC 2060 section 7.4.2, we can use the
BODYSTRUCTURE function which will return the structure of the body (imagine
that). It goes into detail of how the bodystructure should be formatted,
and we have based our new MIME support on this specification.

A simple text/plain message would have a BODYSTRUCTURE similar to the
following:

   ("TEXT" "PLAIN" ("CHARSET" "US-ASCII") NIL NIL "7BIT" 1152 23)

A more complicated multipart message with an attachment would look like:

   (("TEXT" "PLAIN" ("CHARSET" "US-ASCII") NIL NIL "7BIT" 1152 23)("TEXT"
   "PLAIN" ("CHARSET" "US-ASCII" "NAME" "cc.diff")
   "<960723163407.20117h@cac.washington.edu>" "Compiler diff" "BASE64"
   4554 73) "MIXED"))

Our MIME functionality implements different functions that recursively
run through this text and parses out the structure of the message. If you
want to learn more about how the structure of a message is returned with
the BODYSTRUCTURE function, please see RFC 2060 section 7.4.2.

NOTE:  SquirrelMail passes the MIME Torture Test written by Mark
       Crispin (author of the IMAP protocol). This message is crazy! It
       has about 30 parts nested inside each other. A very good test,
       and SquirrelMail passed it. It can be found here:

       ftp://ftp.lysator.liu.se/mirror/unix/imapd/mime/torture-test.mbox

Getting the Body
----------------
Once all the structure of the message has been read into the $message
object, we then need to display the body of one entity. There are a number
of ways we decide which entity to display at a certain time, and I won't go
into that here.

Each entity has its own ID. Entity IDs look something like "1.2.1", or
"4.1", or just "2". You can find a detailed description of how entities
should be identified by reading RFC 2060 section 6.4.5. To fetch the body
of a particular entity, we use the function "BODY[<section>]". For
instance, if we were wanting to return entity 1.2.1, we would send the
IMAP server the command: "a001 FETCH <msg_id> BODY[1.2.1]".

This returns a string of the entire body. Based upon what is in the header,
we may need to decode it or do other things to it.


Closing Notes
-------------
That is basically how it works. There is a variable in mime.php called
$debug_mime that is defined at the top of that file. If you set it to true,
it will output all kinds of valuable information while it tries to decode
the MIME message.

The code in mime.php is pretty well documented, so you might want to poke
around there as well to find out more details of how this works.

If you have questions about this, please direct them to our mailing list:
squirrelmail-users@lists.sourceforge.net
</verb></tscreen>

<sect1>So what is this tree stuff?
<p>

<tscreen><verb>
In order to get correct folder deletion across the board for all
different RFC2060 compliant IMAP servers, deleting of folders
needed to work by deleting subfolders (inferiors) first, working
up to the top folder that is desired to be deleted.

The best way to do this was to use a tree, and walk the thing in
preorder to get subfolders first (leaves), working our way up the
tree. I chose to use an array for the tree structure.

The array has the following elements:
$tree[0]["value"]             = <full folder name>
$tree[0]["doIHaveChildren"]   = boolean
$tree[0]["subNodes"]          = indexes of the array that are
                                  child nodes of this node

The trickiest part was finding the correct parent node when creating
a new node in the tree. Check the documentation in the code for
more info on this.

Basically all we had to do was loop through each of the items that
need to be in the tree (folders, subfolders), find their parent,
let their parent know it has a new child, and insert the values
into the child.

Once the tree is generated, a simple preorder or postorder walk
of the tree can be done doing whatever function you desire (delete,
create, etc).

Preorder walking gives you the tree from the leaves up. Postorder
walks the tree from the root node down to the leaves.
</verb></tscreen>

<sect>Links
<p>
TODO: This chapter should provide links to external sources of information. PHP
manuals, SquirrelMail API documentation, etc.

<sect1>RFC standardization documents
<p>
SquirrelMail "talks" several protocols. To make sure that we are
standards-compatible, we need to refer to RFC documents. Here's a list of the
ones we use a lot:

<itemize>
  <item><url url="http://www.faqs.org/rfcs/rfc2045.html" name="RFC 2045"> -
        MIME Part One: Format of Internet Message Bodies
  <item><url url="http://www.faqs.org/rfcs/rfc2046.html" name="RFC 2046"> -
        MIME Part Two: Media Types
  <item><url url="http://www.faqs.org/rfcs/rfc2047.html" name="RFC 2047"> -
        MIME Part Three: Message Header Extensions for Non-ASCII Text
  <item><url url="http://www.faqs.org/rfcs/rfc2183.html" name="RFC 2183"> -
        Content-Disposition MIME header
  <item><url url="http://www.faqs.org/rfcs/rfc2195.html" name="RFC 2195"> -
        IMAP/POP AUTHorize Extension for Simple Challenge/Response
  <item><url url="http://www.faqs.org/rfcs/rfc2221.html" name="RFC 2221"> -
        IMAP4 Login Referrals
  <item><url url="http://www.faqs.org/rfcs/rfc2298.html" name="RFC 2298"> -
        Details return receipts
  <item><url url="http://www.faqs.org/rfcs/rfc2342.html" name="RFC 2342"> -
        The IMAP4 NAMESPACE command
  <item><url url="http://www.faqs.org/rfcs/rfc2369.html" name="RFC 2369"> -
        The Use of URLs as Meta-Syntax for Core Mail List Commands and their Transport through Message Header Fields (implemented in listcommands plugin)
  <item><url url="http://www.faqs.org/rfcs/rfc2616.html" name="RFC 2616"> -
        HTTP/1.1
  <item><url url="http://www.faqs.org/rfcs/rfc2683.html" name="RFC 2683"> -
        IMAP4 Implementation Recommendations
  <item><url url="http://www.faqs.org/rfcs/rfc2822.html" name="RFC 2822"> -
        Format of an email message (sendmail) (obsoletes RFC 822)
  <item><url url="http://www.faqs.org/rfcs/rfc2831.html" name="RFC 2831"> -
        Using Digest Authentication as a SASL Mechanism (digest-md5)
  <item><url url="http://www.faqs.org/rfcs/rfc3501.html" name="RFC 3501"> -
        IMAP version 4rev1 (obsoletes RFC 1730 and RFC 2060)
</itemize>

</article>
