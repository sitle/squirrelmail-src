<!doctype linuxdoc system>
<!--
  $Id$

  Copyright (c) 2005-2006 The SquirrelMail Project Team
  This file is part of SquirrelMail webmail interface documentation.

  SquirrelMail is free software; you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any later
  version.

  SquirrelMail is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along with
  SquirrelMail; if not, write to the Free Software Foundation, Inc., 51 Franklin
  Street, Fifth Floor, Boston, MA 02110-1301, USA
-->
<article>

<title>SquirrelMail Developer's Manual
<author>The SquirrelMail Project Team</author>
<date>$Date$
<abstract>
This document provides information for the developers of the SquirrelMail
webmail interface.
</abstract>

<toc>

<p>
Document version: $Revision$

<sect>SquirrelMail overview
<p>
SquirrelMail is a standards-based webmail package written in PHP. It includes
built-in pure PHP support for the IMAP and SMTP protocols, and all pages render
in pure HTML 4.0 (with no JavaScript required) for maximum compatibility across
browsers. It has very few requirements and is very easy to configure and
install. SquirrelMail has all the functionality you would want from an email
client, including strong MIME support, address books, and folder manipulation.

<sect1>The project goals
<p>
The founding principles of the SquirrelMail Project were aimed at an audience
that was looking for a webmail application that would run on low end servers for
clients with simple browsers and a small set of expectations. Well, the
SquirrelMail user base has swollen greatly beyond the expectations of the
original SquirrelMail developers. Much of this new audience often wants and
needs a webmail client that will be much, much more.

In order to meet adequately the expanded needs of our current client base, the
basic principles of the SquirrelMail Project must be expanded to include several
additional items. The SquirrelMail Project goals are:

<enum>
  <item>SquirrelMail must be <it/very easy/ to install and configure.
  <item>SquirrelMail must have low server <it/requirements/, allowing it to be
        run on low-end hardware with just a basic Apache and PHP installation.
  <item>SquirrelMail must have low client <it/requirements/, allowing it to be
        used on low end browsers without <it/requiring/ any fancy JavaScript, or
        so forth.
  <item>SquirrelMail will provide a <it/complete/ webmail application that can
        be used as an individual's primary access point to email.
  <item>SquirrelMail will maintain an architecture that will <it/flex/ to the
        needs of a variety of system administrators, server configurations, and
        web browsers while maintaining <it/efficiency/ and <it/speed/.
</enum>

An important note is that the principles should be expanded and not replaced.
This means that the original, founding requirements of the SquirrelMail project
must never be overlooked as new and cool things are developed. Rather, special
care should be taken to assure that both the new and the old is respected as
development progresses and the capabilities of SquirrelMail are extended.

<sect1>Project management
<p>
The SquirrelMail Project Team is organized as four subteams, in order to get
more good stuff done in a more organized fashion. There is no official project
leader. Major decisions are more of a consensus between the team leaders. Each
subteam has a leader (or two), who is responsible for coordinating the
activities of their team, answering questions, and helping new
developers/contributors get started. Even though we have team leaders, all
project members are supposed to help out with the various tasks.

<sect2>The stable branch team
<p>
<bf/Team leaders:/
<quote/Jonathan Angliss &lt;jon@squirrelmail.org&gt;/
<quote/Chris Hilts &lt;tassium@squirrelmail.org&gt;/

<bf/Team responsibilities:/

<enum>
  <item>Manage, prioritize, and fix submitted bugs regarding the stable branch.
  <item>Prepare and maintain the stable branch road map.
  <item>Decide when to make a new stable branch release.
  <item>Preparing, releasing, and announcing the stable branch releases.
  <item>Give input to the development team regarding the development branch
        going stable.
  <item>Giving approval to a development version going stable.
</enum>

<sect2>The development branch team
<p>
<bf/Team leaders:/
<quote/Marc Groot Koerkamp &lt;marc@squirrelmail.org&gt; /

<bf/Team responsibilities:/

<enum>
  <item>Manage, prioritize, and fix submitted bugs regarding the development branch.
  <item>Manage, prioritize, and implement submitted feature requests.
  <item>Design and develop a clean, modular, and scalable architecture, and
        refactor the existing code to fit into it.
  <item>Prepare and maintain the development branch road map.
  <item>Decide when to make a new development branch release.
  <item>Preparing, releasing, and announcing the development branch releases.
  <item>Give input to the stable team regarding the development branch going
        stable.
</enum>

<sect2>The internationalization team
<p>
<bf/Team leader:/
<quote/Tomas Kuliavas &lt;tokul@users.sourceforge.net&gt;/

<bf/Team responsibilities:/

<enum>
  <item>Organize the SquirrelMail translation collection.
  <item>Validate plugins for compliance with the development guidelines
        regarding translations.
  <item>Keep an eye on the licenses of various translations.
  <item>Recruit new translators and add new languages.
  <item>Try finding new maintainers for abandoned translations.
</enum>

<sect2>The plugin team
<p>
<bf/Team leaders:/
<quote/Jimmy Conner &lt;jimmy@sqmail.org&gt;/
<quote/Paul Lesneiwski &lt;paul@squirrelmail.org&gt;/

<bf/Team responsibilities:/

<enum>
  <item>Organize the SquirrelMail third party plugin collection.
  <item>Validate plugins for compliance with the development guidelines.
  <item>Keep an eye on the licenses of various plugins.
  <item>Try finding new maintainers for abandoned plugins.
  <item>Suggest plugins to be integrated in the core, or to become official
        plugins.
</enum>

<sect>General guidelines
<p>
This section should provide some generic information.

<sect1>Coding guidelines
<p>
To ensure that the SquirrelMail affects the logs as little as possible, executes
as quickly as possible and stays readable to the developers, please follow these
rules when coding.

<descrip>
<tag>Code with secure global variables
<p>
All code must work with the PHP setting <tt/register_globals/ set to <tt/off/.
This isn't hard, but you'll have to let go the idea that any variable that is
passed via GET, POST, sessions or cookies is available right away. <url
url="http://php.net/manual/en/ini.core.php#ini.register-globals" name="The PHP
manual"> has a chapter on the subject, explaining the problem more in detail.

There's a special function in SquirrelMail, <tt/sqGetGlobalVar()/, designed to
retrieve variables in a safe way. Use this function instead of accessing
<tt/$_GET/ etc. directly. Here's an example:

<tscreen><verb>
global $favorite_color;
sqgetGlobalVar('favorite_color', $favorite_color, SQ_FORM);
</verb></tscreen>

In the past, there have been some rather serious issues with PHP sessions and
SquirrelMail. Thus, if you need to place any values into the user's session,
there are some built-in SquirrelMail functions that you are strongly encouraged
to make use of. Using them also makes your job easier.

Strictly speaking, globalizing the variable shouldn't be necessary for the
SquirrelMail session functions, but certain versions of PHP seem to behave more
predictably if you do.

<tscreen><verb>
function demo_session($favorite_color = 'green') {
    global $favorite_color;

    // Placing a variable into the session:
    sqsession_register($favorite_color, 'favorite_color');

    // Retrieving a variable from the session:
    sqgetGlobalVar('favorite_color', $favorite_color, SQ_SESSION);

    // Checking for the presence of a variable in the session:
    if (sqsession_is_registered('favorite_color')) {
        // do something important
    }

    // Removing a variable from the session:
    sqsession_unregister('favorite_color');
}
</verb></tscreen>

Don't use the standard PHP functions <tt/session_register()/ and
<tt/session_unregister()/.

Be conscious of variable names and how they might interfere with one another for
SquirrelMail installations with <tt/register_globals/ set to <tt/on/. That is,
if you use a variable called <tt/$username/ (and do not declare it as global),
it will have a local scope and have no effect outside of the current function
with <tt/register_globals/ set to <tt/off/, but it would have potentially
disastrous effects in an environment where <tt/register_globals/ is set to
<tt/on/.

Since SquirrelMail 1.4.7 and 1.5.1, globals are cleaned in
<tt>functions/global.php</tt>. Make sure to include that file before setting any
own global variables. If variables are set before loading
<tt>functions/global.php</tt>, they can be corrupted in setups with
<tt/register_globals/ set to <tt/on/.

Read more about the functions in the SquirrelMail API Documentation.

<itemize>
  <item><tt/sqGetGlobalVar()/ (<url
        url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_squirrelmail_functions_global_php.html#functionsqgetGlobalVar"
        name="stable"> and <url
        url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions_global_php.html#functionsqgetGlobalVar"
        name="development">)
  <item><tt/sqsession_register()/ (<url
        url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---global.php.html#functionsqsession_register"
        name="stable"> and <url
        url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---global.php.html#functionsqsession_register"
        name="development">)
  <item><tt/sqsession_is_registered()/ (<url
        url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---global.php.html#functionsqsession_is_registered"
        name="stable"> and <url
        url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---global.php.html#functionsqsession_is_registered"
        name="development">)
  <item><tt/sqsession_unregister()/ (<url
        url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---global.php.html#functionsqsession_unregister"
        name="stable"> and <url
        url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---global.php.html#functionsqsession_unregister"
        name="development">)
</itemize>

<tag>Protect incoming and outgoing data
<p>
Any untrusted data must be escaped before output. This is to prevent cross site
scripting attacks. Pass every variable that comes in through the URL, a mail
message, or other external factors, through <tt/htmlspecialchars()/ before
outputting it. Test incoming data to see if it's the right format. If, for
instance, an integer is expected; test it with <tt/is_int()/. If the data is
expected to be within a certain range, make sure that it's really within that
range before using it.

<tag>Keep the code log safe
<p>
SquirrelMail code must be log safe code, i.e. do everything to avoid PHP notices
and other error messages, so SquirrelMail developers should always have error
reporting turned all the way up. You can do this by changing two settings in
your <tt/php.ini/ and restarting your web server:

<tscreen><verb>
display_errors = On
error_reporting = E_ALL
</verb></tscreen>

This way, you'll be sure to see all notices, warnings, and errors that your code
might generate. Please make sure to fix them all before you releasing your code.
This includes to initialize variables (just <tt/$a = 0/ is initialization) and
to use <tt/isset()/ or <tt/empty()/ in tests. Use <tt>ini_get("safe_mode")</tt>
to determine if you can use <tt>putenv()</tt>.

<tag>Do not end a file with a PHP end tag
<p>
At the very end of the file, do not use the PHP end tag <tt/?&gt;/ to close off
the file. It may seem innocuous, but if you have any blank lines either before
the first <tt/&lt;?php/ tag or after the last <tt/?&gt;/ tag in any of your
plugin files, you will break SquirrelMail in ways that may seem entirely
unrelated. For instance, this will often cause a line feed character to be
included with email attachments when they are viewed or downloaded, rendering
them useless! Files which aren't included by other files, for instance the files
in the directory <tt>src/</tt>, may of course end with HTML whereas included
files may not.

To ensure compability with all PHP installations, SquirrelMail code uses the
recommended PHP start tag <tt/&lt;?php/.

<tag>Group statements with braces
<p>
There shouldn't be a space between functions etc. and the brackets when using
them, except when writing <url
url="http://php.net/manual/en/language.control-structures.php" name="control
structures">. The use of braces, i.e. "{" and "}", is mandatory, even when
grouping just one statement. The indentation is done using spaces, never
tabulators, using four spaces per indentation level.

<bf>Examples:</bf>

<tscreen><verb>
if ($result > 5) {
    return TRUE;
} else {
    return FALSE;
}

function severeTesting() {
    ...
}
</verb></tscreen>

<tag>Keep the code internationalized
<p>
All SquirrelMail strings, but those in the configuration tools
<tt>config/conf.pl</tt> and <tt>src/configtest.php</tt>, must be
internationalized.

<tag>Use Single quotes when possible
<p>
Use single quotes (') instead of double quotes (") as much as possible because
it's faster to execute, but remember that you must use double quotes (") with
the <tt>gettext()</tt> strings (e.g. <tt>_("Translatable string")</tt>). Use
single quotes (') to refer an index between brackets of an array (example:
<tt>$foo['name']</tt> and not <tt>$foo[name]</tt>).

<tag>Use UNIX style line breaks
<p>
Use UNIX style line breaks when coding (i.e. line feeds only - no carriage
returns) and keep lines no longer than 80 characters when possible. Remember
that it isn't allowed to have a break in the middle of a <tt>gettext()</tt>
string.

<tag>Write useful documentation
<p>
The SquirrelMail Project use <url url="http://phpdocu.sf.net"
name="phpDocumentor"> to document the source code. Try to follow some common
sense and document what is really needed. Documenting the code properly can be a
big help for those who will take a look at your code, fix the bugs and even
improve it, in the true open-source spirit that SquirrelMail was built upon.
Anyone who adds or modifies a function, must add basic documentation about what
it does. In short, that looks like this for the following fantasy function:

<tscreen><verb>
/**
 * This function sends an IMAP query to the server and checks for
 * errors.
 * @param string servername The hostname of the IMAP server.
 * @param string query The IMAP query to send.
 * @param bool silent True if errors should be ignored silently.
 * @return array An array containing the results of the query.
 */
function sqimap_query($servername, $query, $silent = false) {
...
</verb></tscreen>

Every PHP file must have a general description of its content, like the example
below.

<tscreen><verb>
/**
 * about.php
 *
 * An "about box" detailing SquirrelMail info.
 *
 * @copyright &ero;copy; 1999-2006 The SquirrelMail Project Team
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 * @version &#36;Id: about.php,v 1.12 2006/04/05 00:22:11 stekkel Exp $
 * @package squirrelmail
 */
</verb></tscreen>

Plugins must have the package "plugins" and a subpackage tag with the name of
the plugin, which is "demo" in this example:

<tscreen><verb>
 * @package plugins
 * @subpackage demo
</verb></tscreen>

Extended phpDocumentor documentation can be found in the <url
url="http://phpdoc.org/docs/HTMLSmartyConverter/default/phpDocumentor/tutorial_phpDocumentor.pkg.html"
name="phpDocumentor Guide to Creating Fantastic Documentation">.

<tag>Output larger chunks of HTML outside PHP
<p>
When echoing chunks of HTML code it is better/faster to do it outside of PHP
mode and embed the occasional <tt>&lt;?php echo $variable; ?&gt;</tt> than to
put the whole lot in one or more PHP echo statements.

<tag>Refer peekers to the top level
<p>
Every subdirectory of SquirrelMail, including the plugin directories, must
contain an index file. In the documentation directory, the index file displays
the various documents, but in all other directories it's a reference to the
parent directory. At the root directory there's a reference to the login page.

Plugins developers can accomplish may copy the file <tt/index.php/ from the main
plugins directory and then modify the documentation in it as mentioned above.

</descrip>

If you have any questions about security or are unsure, please contact the mailing
list or IRC channel, because security is very important for a widely used
application like SquirrelMail!

<sect1>Including files
<p>
It's sometimes needed to reference functionality provided in other files, and
therefore those files need to be included. Files that are included by
SquirrelMail, such as <tt>functions/global.php</tt> or a plugin's
<tt/setup.php/, already have much of the functionality available, but files that
are requested directly by the client browser, such as files in <tt>src/</tt> or
a plugin's custom options page, <it/must/ have the initialization file included.

The initialization file will set up the SquirrelMail environment automatically
to ensure that the user has been authenticated and is currently logged in, all
user preferences are loaded, internationalization support is included, that
<tt/stripslashes()/ is used on all incoming data (if <tt/magic_quotes_gpc/ is
on), and that all other basic SquirrelMail resources and functions are
initialized and included.

Note that as of SquirrelMail 1.4.0, all files are accessed using a constant
called <tt/SM_PATH/ that always contains the relative path to the main
SquirrelMail directory. This constant is always available for use when including
other files from the SquirrelMail core or any plugins. For files that are
requested directly by the client browser, it needs to be set.

<sect2>Including the initialization file (before SquirrelMail 1.5.2)
<p>
Before you do anything else, you need to define the constant <tt/SM_PATH/ and
include the initialization file. Make sure that <tt/SM_PATH/ points at the top
level of the SquirrelMail installation. Here's an example for a plugin:

<tscreen><verb>
/** @ignore */
define('SM_PATH', '../../');

/* Including the SquirrelMail initialization file. */
include_once(SM_PATH . 'include/validate.php');
</verb></tscreen>

The list below contains the files that are included by
<tt>include/validate.php</tt>. If the SquirrelMail version isn't listed, files
are included from v.1.3.2.

<tscreen><verb>
1. class/mime.class.php
   1.1. class/mime/Rfc822Header.class.php
   1.2. class/mime/MessageHeader.class.php
   1.3. class/mime/AddressStructure.class.php
   1.4. class/mime/Message.class.php
   1.5. class/mime/SMimeMessage.class.php
   1.6. class/mime/Disposition.class.php
   1.7. class/mime/Language.class.php
   1.8. class/mime/ContentType.class.php
2. functions/global.php
   * Fixes differences between PHP 4.0.x and 4.1+ globals (only in 1.4.x).
   * Undoes magic_quotes_gpc=on sanitizing
   * Sets $PHP_SELF (since 1.5.1)
   * Starts session
3. functions/strings.php
   3.1. functions/global.php
   3.2. plugins/compatibility/functions.php (compatibility v.2.0.4+, requires
        code patching)
   * Sets squirrelmail version variable and constant.
   * Sets $PHP_SELF (before 1.5.1)
4. config/config.php
   4.1. config/config_local.php (from 1.4.0rc1)
5. functions/i18n.php
   5.1. functions/global.php (from 1.4.0)
   * Reads 'squirrelmail_language' cookie
   * Loads $languages (since 1.5.1 $languages array is built from
     locale/*/setup.php files)
   * Loads own gettext functions, if PHP gettext is unavailable
6. functions/auth.php
7. include/load_prefs.php
   7.1. include/validate.php
   7.2. functions/prefs.php
      7.2.1. functions/global.php (sqgetGlobalVar() function)
      7.2.2. functions/plugin.php (do_hook_function() function,,
             since 1.4.4 and 1.5.1, see 7.3)
      7.2.3. $prefs_backend (only in 1.4.3 and 1.5.0)
             do_hook_function('prefs_backend') (since 1.4.4 and 1.5.1)
             functions/db_prefs.php
             functions/file_prefs.php
        7.2.3.1. functions/display_messages.php
                 (loaded only by file_prefs.php)
        7.2.3.2. files loaded by plugin that uses 'prefs_backend' hook
   7.3. functions/plugin.php
      7.3.1. functions/global.php (from 1.4.0 and 1.5.0)
      7.3.2. functions/prefs.php (from 1.5.1)
      7.3.3. plugins/*/setup.php files for enabled plugins.
      * Starts all squirrelmail_plugin_init_pluginname functions
   7.4. functions/constants.php
   7.5. do_hook('loading_prefs')
      7.5.1. files loaded by plugins that use the 'loading_prefs' hook
8. functions/page_header.php
   8.1. functions/strings.php
   8.2. functions/html.php
   8.3. functions/imap_mailbox.php
      8.3.1. functions/imap_utf7_local.php
   8.4. functions/global.php
9. functions/prefs.php (already loaded. see 7.2)
</verb></tscreen>

<sect2>Including the initialization file (since SquirrelMail 1.5.2)
<p>
Before you do anything else, you need to include the initialization file. Here's
an example for a plugin:

<tscreen><verb>
/* Include the SquirrelMail initialization file. */
require('../../include/init.php');
</verb></tscreen>

This takes care of setting up the session, defining the constants like
<tt/SM_PATH/, and includes a minimum set of required files.

The files which are included by <tt>include/init.php</tt> depends on which file
the client browser requested. All files in <tt>src/</tt> include the following
files:

<itemize>
  <item><tt>config/config.php</tt>
  <item><tt>functions/display_messages.php</tt>
  <item><tt>functions/global.php</tt>
  <item><tt>functions/html.php</tt>
  <item><tt>functions/page_header.php</tt>
  <item><tt>functions/plugin.php</tt>
  <item><tt>include/constants.php</tt>
  <item><tt>include/languages.php</tt>
</itemize>

Except for <tt/login.php/ and <tt/redirect.php/, they also include:

<itemize>
  <item><tt>functions/strings.php</tt>
  <item><tt>functions/auth.php</tt>
</itemize>

<tt/login.php/ also includes:

<itemize>
  <item><tt>functions/prefs.php</tt>
  <item><tt>functions/db_prefs.php</tt> or <tt>functions/file_prefs.php</tt>
        depending of the configured preference backend.
</itemize>

Because the use of <tt/require()/ in <tt>include/init.php</tt>, a plugin will fail if it
tries to include already included files. Be aware of that.

<sect2>Including other files
<p>
When including files, please make sure to use the <tt/include_once()/ function
and <it/not/ <tt/include()/ or <tt/require()/. They can cause fatal errors when
other plugins or SquirrelMail files include the same file. If you use
<tt/require_once()/ instead of <tt/include_once()/, PHP will raise a fatal
error if something goes wrong with the inclusion. That's the reason plugins
<it/must/ use <tt/include_once()/ instead of <tt/require_once()/.

Files that aren't included by the initialization file can be included like this:

<tscreen><verb>
include_once(SM_PATH . 'functions/imap_general.php');
</verb></tscreen>

<sect1>The base URI funcion
<p>
TODO: Add information about the base URI funcion.

<sect1>Version numbering
<sect2>The version number format
<p>
The approach we take for version numbering is very similar to the way the Linux
kernel handles it. With this approach, it is easy to tell what's going on just
by looking at the three-part version number. The <it>full version number</it> is
a three-part number, using the format <tt>x.y.z</tt>, indicating a specific
implementation of SquirrelMail. Our examples will be <tt>1.0.6</tt> and
<tt>1.1.2</tt>.

The first number is the <it>major release number</it> (that's the <tt>x</tt>).
At first, this was <tt>0</tt> which meant we hadn't had any major releases yet.
In January of 2001, we released <tt>1.0.0</tt> which was our first major stable
release, and everything since then has been in the <tt>1</tt> family.

A major release of SquirrelMail should have a high-level set of specific goals
that it is meeting. For SquirrelMail 1.0, this was the reaching of a stable
release. For later versions, this may include implementation of more modular
libraries and API behind the code, a templating system for the user-interface,
and so forth.

The second number is the <it>minor release number</it> (that's the <tt>y</tt>).
The minor release number will tell you whether a release is a <it>stable</it> or
<it>development</it> branch of SquirrelMail. Even numbers (<tt>0</tt>,
<tt>2</tt>, <tt>4</tt>...) mean that it's a <it>stable</it> release, and odd
numbers (<tt>1</tt>, <tt>3</tt>, <tt>5</tt>...) mean it's a <it>development</it>
release.

A minor release of SquirrelMail should have a lower-level set of specific goals
that it is meeting. These goals should, somehow or another :), be a subset of
the goals for the major release of which it is a part. Basically, the minor
releases allow for the major goals of a major release to be broken into a more
discrete, attainable set of objectives.

Lastly, the final number is a <it>release incrementor</it> (that's the
<tt>z</tt>). In a stable branch, new versions of SquirrelMail will be release as
bugs are found and squished. In a development branch, new versions of
SquirrelMail will be released as progress is made toward the goals set for the
next major and minor release. New releases will happen <it>as needed</it> in a
stable branch. In a development branch, however, they should happen
<it>frequently</it>, as more progress is made toward the next minor release.

<sect2>Important points
<p>

<itemize>
  <item>Versions with a even minor release number are stable.
  <item>Versions with a odd minor release number are development.
  <item>New incremental releases in a stable branch should ONLY CONTAIN bug
        fixes. New features should always be implemented in the current
        development branch.
</itemize>

<sect2>The release timeline
<p>
The goals and objectives for each minor release should be carefully chosen so
that a new minor release can take place every three to four months. This is so
that our users can see actual improvements and will stick with us as we work to
make SquirrelMail a better web mail application.

<sect1>Submitting a patch
<p>
If you do not have commit access to the SquirrelMail Project CVS, you can
provide a patch for bugs or features that you want to add. The developers will
then decide whether or not it can be applied to SquirrelMail. You can submit
your patch through the patches tracker on SourceForge.net, or you can attach it
to an existing bug report or feature request.

Important points when writing a patch, to improve the chances that it will be
committed:

<itemize>
  <item>Patch against the latest CVS version (prefered) or the latest released
        version.
  <item>Always use <tt/diff -u/. Do not submit entire changed files or use
        different patch options. Make sure you don't reverse the patch.
  <item>Take care to follow the SquirrelMail coding guidelines.
</itemize>

Do you feel that your patch is ignored? Feel free to ask on the <url
url="http://www.squirrelmail.org/wiki/MailingLists" name="SquirrelMail
development mailing list">.

<sect>Internationalization
<p>
This chapter should explain how SquirrelMail internationalization works and
provide information about some aspects of implementation.

<sect1>Supported languages
<p>
Valid language codes are (<em>list depends on SquirrelMail version</em>):
<itemize>
  <item>ar    - Arabic, windows-1256 charset
  <item>bg_BG - Bulgarian, windows-1251 charset
  <item>bn_IN - Bengali, utf-8 charset
  <item>ca_ES - Catalan, iso-8859-1 charset
  <item>cs_CZ - Czech, iso-8859-2 charset
  <item>cy_GB - Welsh, iso-8859-1 charset
  <item>da_DK - Danish, iso-8859-1 charset
  <item>de_DE - German, iso-8859-1 charset
  <item>el_GR - Greek, iso-8859-7 charset
  <item>en_GB - British, iso-8859-15 charset
  <item>en_US - English, charset depends on $default_charset
  <item>es_ES - Spanish, iso-8859-1 charset
  <item>et_EE - Estonian, iso-8859-15 charset
  <item>eu_ES - Basque, iso-8859-1 charset
  <item>fa_IR - Farsi, utf-8 charset
  <item>fi_FI - Finnish, iso-8859-1 charset
  <item>fo_FO - Faroese, iso-8859-1 charset
  <item>fr_FR - French, iso-8859-1 charset
  <item>he_IL - Hebrew, windows-1255 charset
  <item>hr_HR - Croatian, iso-8859-2 charset
  <item>hu_HU - Hungarian, iso-8859-2 charset
  <item>id_ID - Indonesian, iso-8859-1 charset
  <item>is_IS - Icelandic, iso-8859-1 charset
  <item>it_IT - Italian, iso-8859-1 charset
  <item>ja_JP - Japanese, euc-jp charset (emails are created in iso-2022-jp)
  <item>ka - Georgian, utf-8 charset (since 1.5.1 and 1.4.6)
  <item>ko_KR - Korean, euc-kr charset
  <item>lt_LT - Lithuanian, utf-8 charset
  <item>ms_MY - Malay, iso-8859-1 charset
  <item>nb_NO - Norwegian (Bokmal), iso-8859-1 charset
  <item>nl_NL - Dutch, iso-8859-1 charset
  <item>nn_NO - Norwegian (Nynorsk), iso-8859-1 charset
  <item>pl_PL - Polish, iso-8859-2 charset
  <item>pt_BR - Portuguese (Brazil), iso-8859-1 charset
  <item>pt_PT - Portuguese (Portugal), iso-8859-1 charset
  <item>ro_RO - Romanian, iso-8859-2 charset
  <item>ru_UA - Ukrainian Russian, koi8-r charset
  <item>ru_RU - Russian, utf-8 charset
  <item>sk_SK - Slovak, iso-8859-2 charset
  <item>sl_SI - Slovenian, iso-8859-2 charset
  <item>sr_YU - Serbian, iso-8859-2 charset
  <item>sv_SE - Swedish, iso-8859-1 charset
  <item>ug    - Uighur, utf-8 charset (some systems don't support Uighur system locale)
  <item>th_TH - Thai, tis-620 charset
  <item>tl_PH - Tagalog, iso-8859-1 charset (main translation is missing, only some plugins are translated)
  <item>tr_TR - Turkish, iso-8859-9 charset
  <item>uk_UA - Ukrainian, koi8-u charset
  <item>zh_CN - Chinese Simplified, gb2312 charset
  <item>zh_TW - Chinese Traditional, big5 charset
</itemize>

Charset totals:
<itemize>
  <item>iso-8859-1   = 21
  <item>iso-8859-2   = 8
  <item>utf-8        = 6
  <item>iso-8859-15  = 2
  <item>iso-8859-7   = 1
  <item>iso-8859-9   = 1
  <item>koi8-r       = 1
  <item>koi8-u       = 1
  <item>windows-1251 = 1
  <item>windows-1255 = 1
  <item>windows-1256 = 1
  <item>tis-620      = 1
  <item>gb2312       = 1
  <item>big5         = 1
  <item>euc-jp       = 1
  <item>euc-kr       = 1
</itemize>

<sect1>The <tt>$languages</tt> array
<p>
The <tt>$languages</tt> array is stored in <tt>functions/i18n.php</tt> and defines translations
that are enabled in SquirrelMail. Since SquirrelMail 1.5.1 <tt>functions/i18n.php</tt>
stores only English entry. Other languages are loaded automatically from
<tt>locale/&lt;language_code&gt;/setup.php</tt> files.

Format of array:

<tscreen><verb>
    $languages['language_code']['key'] = 'value'
</verb></tscreen>

Possible array key names:
<descrip>
  <tag/NAME/ Translation name in English. Any 8bit symbols must be HTML encoded.
  <tag/CHARSET/ Charset used by translation
  <tag/ALIAS/ 'language_code' should contain short language name
              (ISO-639). 'value' should contain name of other 'language_code'
              that defines translation with NAME and CHARSET keys.
              Entry links short language form with long form (language+country).
              See: http://www.loc.gov/standards/iso639-2/langhome.html and
              http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html
  <tag/ALTNAME/ Native translation name. Any 8bit symbols must be HTML encoded.
              Name is visible when $show_alternative_names is enabled.
  <tag/LOCALE/ Full locale name (in xx_XX.charset format or other format required
              by PHP gettext functions). From 1.4.4/1.5.1 'value' can contain
              array. If PHP version is older than 4.3.0, system uses only first
              locale name listed in array. First locale name must be compatible
              with FreeBSD system locale names.
  <tag/DIR/ Text direction. Used to define Right-to-Left languages. Possible
              values 'rtl' or 'ltr'. If undefined - defaults to 'ltr'.
  <tag/XTRA_CODE/ translation uses special functions. (see chapter about XTRA_CODE functions)
</descrip>

Each 'language_code' definition requires NAME+CHARSET or ALIAS keys. Other keys are
optional.

<sect1>XTRA_CODE functions
<p>
XTRA_CODE functions provide way to change interface behavior, when translation
requires special handling of some SquirrelMail functions. Functions are enabled
by setting XTRA_CODE option in $languages array and including appropriate
functions in <tt>functions/i18n.php</tt>. First part of function name is word listed in
$languages['language_code']['XTRA_CODE'] value. Second part is one of special
keywords. Possible keywords:
<descrip>
 <tag/_decode/ Used in <tt>src/compose.php</tt>, <tt>src/i18n.php</tt>, <tt>src/view_text.php</tt>, and <tt>functions/mime.php</tt>.
Requires mbstring support.

 <tag/_encode/ Used in <tt>src/compose.php</tt>, and <tt>src/read_body.php</tt>.

 <tag/_encodeheader/ Used in <tt>functions/mime.php</tt>. Should accept one string
 argument and return correctly encoded MIME header string.

 <tag/_decodeheader/ Used in <tt>functions/mime.php</tt>. Returning function.

 <tag/_downloadfilename/ Used in <tt>functions/mime.php</tt>.

 <tag/_utf7_imap_encode/ Used in <tt>functions/imap_utf7_local.php</tt>. Returning function.

 <tag/_utf7_imap_decode/ Used in <tt>functions/imap_utf7_local.php</tt>. Returning function.

 <tag/_strimwidth/ Used in <tt>functions/mailbox_display.php</tt>. Returning function.

 <tag/_wordwrap/ Used in <tt>functions/strings.php</tt> (sqWordWrap).
</descrip>

<sect1>Display of different charsets
<p>
When SquirrelMail generates HTML pages, it uses charset defined in translation
selected by end user. Interface can display emails encoded in different
charsets. In order to display characters that might be unsupported by user's
charset, SquirrelMail uses decoding functions that convert non us-ascii symbols
into HTML entities. All decoding functions are stored in functions/decode/
directory.

By default SquirrelMail includes decoding functions that support iso-8859-x,
windows-125x, utf-8, us-ascii, koi8-r, koi8-u, tis-620, ns-4551_1, iso-ir-111,
cp855 and cp866 charsets. Other decoding functions are distributed in separate
packages. Separate packaging of decoding functions is supported from
SquirrelMail 1.4.4 and 1.5.0. us-ascii decoding replaces all 8bit symbols with
question marks. UTF-8 decoding function does not enable decoding of five and six
byte UTF-8 symbols by default (code is commented) and replaces all incorrectly
formated 8bit symbols with question marks.

Some decoding functions might require PHP recode extension or PHP 4.3+ mbstring
extension. If your PHP installation does not support them, you might be using
slower and cpu/memory intensive functions.

<sect1>IMAP folder names
<p>
IMAP folder names use UTF7-IMAP charset. Folder names that are stored in
conf.pl must be encoded in UTF7-IMAP charset. SquirrelMail uses internal
functions that convert folder names from/to UTF7-IMAP charset. By default those
functions work with ISO-8859-1 charset. Other charsets are supported only
when PHP mbstring extension supports them.

TODO: write independent implementation of charset to UTF7-IMAP conversion.

<sect1>Plural forms
<p>
Since 1.5.1, SquirrelMail includes support of plural forms. It allows to use
correct translation forms with numbers. For example. "We have %s squirrel on
the roof." and "We have %s squirrels on the roof." can be written in one
function call without checking actual number for squirrels. Gettext functions
also deal with non English languages that might use different word forms for
two, five, ten or more units.

Support is provided by ngettext functions that exist in PHP gettext extension
from PHP 4.2.0 and by ngettext function replacements from php-gettext classes
(http://savannah.nongnu.org/projects/php-gettext). In order to use it correctly
when PHP gettext extension does not have ngettext support, SquirrelMail uses
bindtextdomain and textdomain wrappers that load missing functions.

If plugins want to use ngettext functions without increasing PHP requirements
to 4.2.0 with gettext support, they should require SquirrelMail 1.5.1, use
sq_bindtextdomain function instead of bindtextdomain and use sq_textdomain
function instead of textdomain function. If SquirrelMail wrapper functions
are used, there is no need to issue sq_bindtextdomain when plugins reverts to
SquirrelMail domain.

More information about ngettext and plural forms can be found at:
http://www.gnu.org/software/gettext/manual/html_chapter/gettext_10.html#SEC150

<sect1>Language setup
<p>
SquirrelMail uses <tt>set_up_language()</tt> function to setup language environment.
Environment is setup automatically when <tt>include/validate.php</tt> is loaded.

SquirrelMail gets interface language from three places:
 a) user preference. It is set in Options -> Display Preferences -> Language.
    preference uses language key. If user's preferences are not available (user
    is not logged in), system tries to extract language value from
    'squirrelmail_language' cookie.
 b) default SquirrelMail language that is set in configuration
    ($squirrelmail_default_language variable).
 c) preferred language setting provided by browser. It is used only when default
    SquirrelMail language is set to empty string

If language information is not available, SquirrelMail falls back to US English
translation.

<sect1>Time zones
<p>
If the PHP installation allows modifying environment variable TZ, SquirrelMail allows
the end users to select different time zone in their preferences. It can be set in
Options -> Personal Information -> Your current timezone. Time zone is
setup automatically when <tt>include/validate.php</tt> is loaded.

If TZ variable can't be modified (PHP is running is safe mode and variable
is not listed in PHP safe_mode_allowed_env_vars), user's time zone options are
not visible and interface use default webserver's time zone.

SquirrelMail 1.5.0 and older store list of available time zones in
<tt>locale/timezones.cfg</tt>. Since 1.5.1 standard times zones are moved to
<tt>include/timezones/standard.php</tt> and time zone handling differs from older
SquirrelMail versions. Time zone configuration is controlled in SquirrelMail
configuration utility (<tt/conf.pl/), 4. General Options &gt; 15. Time zone
configuration menu option. Administrator can select standard, strict, custom
and custom strict time zone handling.

Standard handling does not differ from previous SquirrelMail versions and
SquirrelMail uses GNU C geographical location based time zone names. Strict
handling uses time zone codes with offset from GMT. Strict time zones should
work on systems that don't support GNU C time zone naming. Custom and custom
strict handling uses <tt>config/timezones.php</tt> file instead of
<tt>include/timezones/standard.php</tt>.

<tt>config/timezones.php</tt> file should store $aTimeZones array with different set of
time zones. See default time zone set in <tt>include/timezones/standard.php</tt>. For
example:

<tscreen><verb>
&lt;?php
// World outside US border is a mirage

$aTimeZones=array();
$aTimeZones['America/New_York']['NAME']='US Eastern standard time';
$aTimeZones['America/New_York']['TZ']='EST5EDT';

$aTimeZones['America/Chicago']['NAME']='US Central standard time';
$aTimeZones['America/Chicago']['TZ']='CST6CDT';

// Oliver County, ND
$aTimeZones['America/North_Dakota/Center']['NAME']='US, Oliver County [ND]';
$aTimeZones['America/North_Dakota/Center']['TZ']='CST6CDT'; // CST since 1992

$aTimeZones['America/Denver']['NAME']='US Mountain standard time';
$aTimeZones['America/Denver']['TZ']='MST7MDT';

$aTimeZones['America/Los_Angeles']['NAME']='US Pacific standard time';
$aTimeZones['America/Los_Angeles']['TZ']='PST8PDT';

// Aliaska
$aTimeZones['America/Juneau']['NAME']='Aliaska, Juneau';
$aTimeZones['America/Juneau']['TZ']='NAST9NADT';
$aTimeZones['America/Yakutat']['NAME']='Aliaska, Yakutat';
$aTimeZones['America/Yakutat']['TZ']='NAST9NADT';
$aTimeZones['America/Anchorage']['NAME']='Aliaska, Anchorage';
$aTimeZones['America/Anchorage']['TZ']='NAST9NADT';
$aTimeZones['America/Nome']['NAME']='Aliaska, Nome';
$aTimeZones['America/Nome']['TZ']='NAST9NADT';
$aTimeZones['America/Adak']['NAME']='US, Aleutian Islands';
$aTimeZones['America/Adak']['TZ']='AST10ADT';

$aTimeZones['Pacific/Honolulu']['NAME']='US, Hawaii';
$aTimeZones['Pacific/Honolulu']['TZ']='UCT10';
$aTimeZones['America/Phoenix']['NAME']='US, Arizona';
$aTimeZones['America/Phoenix']['TZ']='MST7'; // gmt-7
$aTimeZones['America/Shiprock']['LINK']='America/Denver';

$aTimeZones['America/Boise']['NAME']='US, South Idaho';
$aTimeZones['America/Boise']['TZ']='MST7MDT';
$aTimeZones['America/Indianapolis']['NAME']='US, Indiana';
$aTimeZones['America/Indianapolis']['TZ']='EST5';
$aTimeZones['America/Indiana/Indianapolis']['LINK']='America/Indianapolis';
// Crawford County, Indiana
$aTimeZones['America/Indiana/Marengo']['NAME']='US, Crawford County [IN]';
$aTimeZones['America/Indiana/Marengo']['TZ']='EST5';
// Starke County, Indiana
$aTimeZones['America/Indiana/Knox']['NAME']='US, Starke County [IN]';
$aTimeZones['America/Indiana/Knox']['TZ']='EST5';
// Switzerland County, Indiana
$aTimeZones['America/Indiana/Vevay']['NAME']='US, Switzerland County [IN]';
$aTimeZones['America/Indiana/Vevay']['TZ']='EST5';
$aTimeZones['America/Louisville']['NAME']='US, Louisville [KY]';
$aTimeZones['America/Louisville']['TZ']='EST5EDT';
$aTimeZones['America/Kentucky/Louisville']['LINK']='America/Louisville';
// Wayne, Clinton, and Russell Counties, Kentucky
$aTimeZones['America/Kentucky/Monticello']['NAME']='US, Wayne, Clinton, and Russell Counties [KY]';
$aTimeZones['America/Kentucky/Monticello']['TZ']='EST5EDT';
// Michigan
$aTimeZones['America/Detroit']['NAME']='US, Michigan';
$aTimeZones['America/Detroit']['TZ']='EST5EDT';
// The Michigan border with Wisconsin switched from EST to CST/CDT in 1973.
$aTimeZones['America/Menominee']['NAME']='US, Menominee [MI]';
$aTimeZones['America/Menominee']['TZ']='CST6CDT';
?&gt;
</verb></tscreen>

GNU C time zone naming should be supported by many Unix OSes. It is recommended
way of setting time zone, because it handles historical changes and daylight
savings specific to selected geographical location. Strict time zones might
provide inaccurate or outdated time zone settings.

If modifications in TZ environment are visible in your webserver's logs (time
offset is changed), make sure that you can reproduce such behavior in latest PHP
version and report bug to PHP developers. Issue can be fixed by blocking use of
time zone (PHP safe mode and TZ is not listed in safe_mode_allowed_env_vars
setting or forced_prefs plugin) or by attaching special PHP script with
putenv('TZ=some time zone') call in PHP auto_append_file setting (suggestion is
not tested and you might have to fix all SquirrelMail exit calls).

Please note, that use of auto_append_file provides only temporally workaround
and does not fix your PHP setup. Script that runs as unprivileged user, should
be unable to affect webserver's logging system.

<sect1>Sanitizing HTML strings
<p>
PHP provides the functions <tt><url url="http://www.php.net/htmlspecialchars"
name="htmlspecialchars()"></tt> and <tt><url
url="http://www.php.net/htmlentities" name="htmlentities()"></tt> for HTML
string sanitizing. When SquirrelMail developers want to sanitize HTML formating
symbols, they should use <tt>htmlspecialchars()</tt> and avoid using
<tt>htmlentities()</tt>.

<tt>htmlentities()</tt> uses the ISO-8859-1 charset by default, sanitizing the
ISO-8859-1 eight bit symbols. Other charsets use the same eight bit ranges to
store different symbols, so this will break all translations not using
ISO-8859-1.

Depending on the parameters, <tt>htmlspecialchars()</tt> only sanitizes three,
four or five seven bit symbols (&ero;, &dquot;, ', &lt; and &gt;).
<tt>htmlspecialchars()</tt> only breaks HTML encoded strings using the <url
url="http://en.wikipedia.org/wiki/ISO_2022" name="ISO-2022"> charsets. ISO-2022
charsets use seven bit ranges to store different symbols. The used encoding
table depends on escape sequences present in ISO-2022 text.

A charset option is added to <tt>htmlentities()</tt> and
<tt>htmlspecialchars()</tt> since PHP 4.1.0 but list of supported charsets is
limited. The fallback charset is same good old and dangerous ISO-8859-1.

Differences between two functions can be examined with the <tt><url
url="http://www.php.net/get-html-translation-table"
name="get_html_translation_table()"></tt> function.

If SquirrelMail charset decoding functions are used, they should apply
<tt>htmlspecialchars()</tt> to the decoded string automatically. Don't try to
use <tt>htmlspecialchars()</tt> twince on the same string, since that might
break the decoded string.

<sect>Developing plugins
<p>
Due to the large number and wide range of functions plugins can cover it is
impractical to add all but the most popular to the SquirrelMail core project.
There is a separate <url url="http://sourceforge.net/projects/sm-plugins/"
name="SM Plugins"> project registered on SourceForge to house plugin code,
developers should consider joining this project.

In addition to this document, help writing plugins is easily obtained by posting
to the <url url="http://www.squirrelmail.org/wiki/MailingLists"
name="SquirrelMail plugins mailing list">. There is also some information to be
found in the document <tt><url
url="http://squirrelmail.cvs.sourceforge.net/squirrelmail/squirrelmail/doc/Development/plugin.txt?view=markup"
name="doc/Development/plugin.txt"></tt>.

<sect1>The plugin architecture
<p>
The plugin architecture of SquirrelMail is designed to make it possible
to add new features without having to patch SquirrelMail itself.
Functionality like password changing, displaying ads and calendars should
be possible to add as plugins.

<sect2>The idea
<p>
The idea is to be able to run random code at given places in the SquirrelMail
code. This random code should then be able to do whatever needed to enhance the
functionality of SquirrelMail. The places where code can be executed are called
"hooks".

There are some limitations in what these hooks can do. It is difficult to use
them to change the layout and to change functionality that already is in
SquirrelMail.

Some way for the plugins to interact with the help subsystem and translations
will be provided.

<sect2>The implementation
<p>
The plugin jumping off point in the main SquirrelMail code is in the file
<tt>functions/plugin.php</tt>. In places where hooks are made available, they
are executed by calling the function <tt>do_hook('hookname')</tt>. The
<tt>do_hook()</tt> function then traverses the array
<tt>$squirrelmail_plugin_hooks['hookname']</tt> and executes all the functions
that are named in that array. Those functions are placed there when plugins
register themselves with SquirrelMail as discussed below. A plugin may add its
own internal functions to this array under any hook name provided by the
SquirrelMail developers.

A plugin must reside in a subdirectory of the <tt>plugins/</tt> directory. The
name of the subdirectory is considered to be the name of the plugin. (The plugin
will not function correctly if this is not the case.)

To start using a plugin, its name must be added to the <tt>$plugins</tt> array
in <tt>config.php</tt> like this:

<tscreen><verb>
$plugins[0] = 'plugin_name';
</verb></tscreen>

When a plugin is registered, the file <tt>plugins/plugin_name/setup.php</tt> is
included and the function <tt>squirrelmail_plugin_init_plugin_name()</tt> is
called with no parameters. That function is where the plugin may register itself
against any hooks it wishes to take advantage of.

<sect1>The starting point
<p>
All plugins must contain a file called <tt>setup.php</tt> and must include a
function called <tt>squirrelmail_plugin_init_plugin_name()</tt> therein. Since
including numerous plugins can slow SquirrelMail performance considerably, the
<tt>setup.php</tt> file should contain little else. Any functions that are
registered against plugin hooks should do little more than call another function
in a different file.

Any other files used by the plugin should also be placed in the plugin directory
(or subdirectory thereof) and should contain the bulk of the plugin logic.

The function <tt>squirrelmail_plugin_init_plugin_name()</tt> is called to
initalize a plugin. This function could look something like this (if the plugin
was named "demo" and resided in the directory <tt>plugins/demo/</tt>):

<tscreen><verb>
function squirrelmail_plugin_init_demo() {
    global $squirrelmail_plugin_hooks;

    $squirrelmail_plugin_hooks['generic_header']['demo']
        = 'plugin_demo_header';
    $squirrelmail_plugin_hooks['menuline']['demo'] = 'plugin_demo_menuline';
}
</verb></tscreen>

Please note that as of SquirrelMail 1.5.0, this function will no longer be
called at run time and will instead be called only once at configuration time.
Thus, the inclusion of any dynamic code (anything except hook registration) here
is strongly discouraged.

In this example, the "demo" plugin should also have two other functions in its
<tt>setup.php</tt> file called <tt>plugin_demo_header()</tt> and
<tt>plugin_demo_menuline()</tt>. The first of these might look something like
this:

<tscreen><verb>
function plugin_demo_header() {
    include_once(SM_PATH . 'plugins/demo/functions.php');
    plugin_demo_header_do();
}
</verb></tscreen>

The function called <tt>plugin_demo_header_do()</tt> would be in the file called
<tt>functions.php</tt> in the <tt>demo</tt> plugin directory and would contain
the plugin's core logic for the <tt>generic_header</tt> hook.

<sect1>Hooks
<p>
Hooks, when executed, are called with differing parameters and may or may not
take return values, all depending on the type of hook being called and the
context in which it is being used. On the source side (where the hook call
originates), all hooks have at least one parameter, which is the name of the
hook. After that, things get complicated.

<sect2>Hook types: parameters and return values
<p>
SquirrelMail uses four hook functions: <tt/do_hook()/, <tt/do_hook_function()/,
<tt/concat_hook_function()/, and <tt/boolean_hook_function()/.

The <tt/do_hook()/ function is a simple function that allows injecting custom
HTML or override default interface data. It doesn't pass any data and doesn't
ask for anything back. A limited number of <tt/do_hook()/ calls do pass some
extra parameters, in which case your plugin may modify the given data if you do
so by reference. It is not necessary to return anything from your function in
such a case; modifying the parameter data by reference is what does the job
(although the hook call itself (in the source) must grab the return value for
this to work). Note that in this case, the parameter to your hook function will
be an array, the first element simply being the hook name, followed by any other
parameters that may have been included in the actual hook call in the source.
Modify parameters with care!

Read more about the <tt/do_hook()/ function in the <url
url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---plugin.php.html#functiondo_hook"
name="stable"> and <url
url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---plugin.php.html#functiondo_hook"
name="development"> API documentation.

The <tt/do_hook_function()/ was intended to be the main hook type used when the
source needs to get something back from your plugin. It is somewhat limited in
that it will only use the value returned from the <it/last/ plugin registered
against the hook. The source for this hook might use the return value for
internal purposes, or might expect you to provide text or HTML to be sent to the
client browser (you'll have to look at its use in context to understand how you
should return values here). The parameters that your hook function gets will be
anything you see <it/after/ the hook name in the actual hook call in the source.
These cannot be changed in the same way that the <tt/do_hook()/ parameters can
be.

Read more about the <tt/do_hook_function()/ function in the <url
url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---plugin.php.html#functiondo_hook_function"
name="stable"> and <url
url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---plugin.php.html#functiondo_hook_function"
name="development"> API documentation.

The <tt/concat_hook_function()/ fixes some shortcomings of the
<tt/do_hook_function()/. It uses the return values of all plugins registered
against the hook. In order to do so, the return value is assumed to be a string,
which is just piled on top of whatever it got from the other plugins working on
the same hook. Again, you'll have to inspect the source code to see how such
data is put to use, but most of the time, it is used to create a string of HTML
to be inserted into the output page. The parameters that your hook function will
get are the same as for the <tt/do_hook_function/; they are anything <it/after/
the hook name in the actual hook call in the source.

Read more about the <tt/concat_hook_function()/ function in the <url
url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---plugin.php.html#functionconcat_hook_function"
name="stable"> and <url
url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---plugin.php.html#functionconcat_hook_function"
name="development"> API documentation.

The <tt/boolean_hook_function()/ allows plugins to vote for a specified action.
What that action is is entirely dependent on how the hook is used in the source
(look for yourself). Plugins make their vote by returning boolean <tt/TRUE/ or
<tt/FALSE/ values. This hook may be configured to tally votes in one of three
ways. This configuration is done with the third parameter in the hook call in
the source:

<itemize>
  <item>&gt; 0 -- At least one <tt/TRUE/ will override all <tt/FALSE/.
  <item>&lt; 0 -- At least one <tt/FALSE/s will override all <tt/TRUE/s.
  <item>= 0 -- Majority wins. Any ties are broken with the last parameter in the
        hook call.
</itemize>

Your hook function will get the second paramter in the hook call in the source
as its parameter (this might be an array if multiple values need to be passed).

Read more about the <tt/boolean_hook_function()/ function in the <url
url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---plugin.php.html#functionboolean_hook_function"
name="stable"> and <url
url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---plugin.php.html#functionboolean_hook_function"
name="development"> API documentation.

<sect2>List of hooks
<p>
This is a list of all hooks currently available in SquirrelMail, ordered
by file.

TODO: reduce list of hooks by grouping them into separate chapters.

<tscreen><verb>
  Hook Name                      Found In                        Called With(#)
  ---------                      --------                        --------------
  loading_constants              functions/constants.php         do_hook
  logout_error                   functions/display_messages.php  do_hook
  error_box                      functions/display_messages.php  concat_hook
  get_pref_override              functions/file_prefs.php        hook_func
  get_pref                       functions/file_prefs.php        hook_func
  special_mailbox                functions/imap_mailbox.php      hook_func
% rename_or_delete_folder        functions/imap_mailbox.php      hook_func
  folder_status (since 1.5.1)    functions/imap_mailbox.php      hook_func
                                 functions/imap_general.php      hook_func
  mailbox_index_before           functions/mailbox_display.php   do_hook
  mailbox_form_before            functions/mailbox_display.php   do_hook
  mailbox_index_after            functions/mailbox_display.php   do_hook
  check_handleAsSent_result      functions/mailbox_display.php   do_hook
  subject_link                   functions/mailbox_display.php   concat_hook
  mailbox_display_buttons        functions/mailbox_display.php   do_hook
  mailbox_display_button_action  functions/mailbox_display.php   hook_func
  message_body                   functions/mime.php              do_hook
^ attachment $type0/$type1       functions/mime.php              do_hook
  attachments_bottom             functions/mime.php              hook_func
  decode_body                    functions/mime.php              hook_func
  generic_header                 functions/page_header.php       do_hook
  menuline                       functions/page_header.php       do_hook
  prefs_backend                  functions/prefs.php             hook_func
  loading_prefs                  include/load_prefs.php          do_hook
  addrbook_html_search_below     src/addrbook_search_html.php    do_hook
  addressbook_bottom             src/addressbook.php             do_hook
! compose_form                   src/compose.php                 do_hook
  compose_bottom                 src/compose.php                 do_hook
  compose_button_row             src/compose.php                 do_hook
  compose_send                   src/compose.php                 do_hook
  compose_send_after             src/compose.php                 do_hook
  folders_bottom                 src/folders.php                 do_hook
  help_top                       src/help.php                    do_hook
  help_chapter                   src/help.php                    do_hook
  help_bottom                    src/help.php                    do_hook
  left_main_after_each_folder    src/left_main.php               concat_hook
  left_main_before               src/left_main.php               do_hook
  left_main_after                src/left_main.php               do_hook
  login_cookie                   src/login.php                   do_hook
  login_top                      src/login.php                   do_hook
  login_form                     src/login.php                   concat_hook
    (was do_hook before 1.5.1)
  login_bottom                   src/login.php                   do_hook
* optpage_set_loadinfo           src/options.php                 do_hook
* optpage_loadhook_personal      src/options.php                 do_hook
* optpage_loadhook_display       src/options.php                 do_hook
* optpage_loadhook_highlight     src/options.php                 do_hook
* optpage_loadhook_folder        src/options.php                 do_hook
* optpage_loadhook_order         src/options.php                 do_hook
* options_personal_save          src/options.php                 do_hook
* options_display_save           src/options.php                 do_hook
* options_folder_save            src/options.php                 do_hook
* options_save                   src/options.php                 do_hook
* optpage_register_block         src/options.php                 do_hook
* options_link_and_description   src/options.php                 do_hook
* options_personal_inside        src/options.php                 do_hook
* options_display_inside         src/options.php                 do_hook
* options_highlight_inside       src/options.php                 do_hook
* options_folder_inside          src/options.php                 do_hook
* options_order_inside           src/options.php                 do_hook
* options_personal_bottom        src/options.php                 do_hook
* options_display_bottom         src/options.php                 do_hook
* options_highlight_bottom       src/options.php                 do_hook
* options_folder_bottom          src/options.php                 do_hook
* options_order_bottom           src/options.php                 do_hook
* options_highlight_bottom       src/options_highlight.php       do_hook
& options_identities_top         src/options_identities.php      do_hook
  message_body                   src/printer_friendly_bottom.php do_hook
  read_body_header               src/read_body.php               do_hook
  read_body_menu_top             src/read_body.php               hook_func
  read_body_menu_bottom          src/read_body.php               do_hook
  read_body_header_right         src/read_body.php               do_hook
  read_body_top                  src/read_body.php               do_hook
  read_body_bottom               src/read_body.php               do_hook
  login_before                   src/redirect.php                do_hook
  login_verified                 src/redirect.php                do_hook
  right_main_after_header        src/right_main.php              do_hook
  right_main_bottom              src/right_main.php              do_hook
  search_before_form             src/search.php                  do_hook
  search_after_form              src/search.php                  do_hook
  search_bottom                  src/search.php                  do_hook
  logout                         src/signout.php                 do_hook
  message_body (since 1.5.2)     src/view_html.php               do_hook
  message_body (since 1.5.2)     src/view_text.php               do_hook
  webmail_top                    src/webmail.php                 do_hook
  webmail_bottom                 src/webmail.php                 concat_hook
  logout_above_text              src/signout.php                 concat_hook
O info_bottom                    plugins/info/options.php        do_hook
</verb></tscreen>

<sect2>Address book hooks
<p>
SquirrelMail 1.4.5 and 1.5.1 introduced two hooks that allow custom address book
backends. These hooks are placed in <tt>functions/addressbook.php</tt> file.
<tt/abook_add_class/ hook is simple hook designed to load custom address book
classes before any other code is loaded. abook_init hook allows to modify <tt/$abook/
object that represents configured address books. Hook is executed after
initiation of local address book backends (file and DB based ones) and before
remote (LDAP) backend init. Second abook_init argument stores address book
object, third argument stores return value of <tt/$abook-&gt;add_backend/ method.

<sect2>Identity Hooks
<p>
This set of hooks allows to add plugin options to SquirrelMail identity
preferences.

<descrip>
  <tag/options_identities_process/
   This hook is called at the top of the Identities page, which is
   most useful when the user has changed any identity settings - this
   is where you'll want to save any custom information you are keeping
   for each identity or catch any custom submit buttons that you may
   have added to the identities page. The arguments to this hook are:

   <tscreen><verb>
    (SquirrelMail 1.4.4 or older and 1.5.0)
      [0] = hook name (always "options_identities_process")
      [1] = should I run the SaveUpdateFunction() (alterable)
   </verb></tscreen>

   Obviously, set the second array element to 1/true if you want to
   trigger SaveUpdateFunction() after the hook is finished - by default,
   it will not be called.

   <tscreen><verb>
    (SquirrelMail 1.4.6+ or 1.5.1+)
      [0] = hook name (always "options_identities_process")
      [1] = action (hook is used only in 'update' action and any custom
            action added to form with option_identities_table and
            option_identities_buttons hooks)
      [2] = processed identity number
   </verb></tscreen>

   Hook is not available in SquirrelMail 1.4.5.

  <tag/options_identities_renumber/
   This hook is called when one of the identities is being renumbered,
   such as if the user had three identities and deletes the second -
   this hook would be called with an array that looks like this:
   ('options_identities_renumber', 2, 1). The arguments to this hook
   are:

   <tscreen><verb>
      [0] = hook name (always "options_identities_renumber")
      [1] = being renumbered from ('default' or 1 through (# idents) - 1)
      [2] = being renumbered to ('default' or 1 through (# idents) - 1)
   </verb></tscreen>

   Hook is not available in SquirrelMail 1.4.5. Renumbering order differs
   in 1.4.5+ and 1.5.1+.

  <tag/options_identities_table/
   This hook allows you to insert additional rows into the table that
   holds each identity. The arguments to this hook are:

   <tscreen><verb>
      [0] = additional HTML attributes applied to table row.
            use it like this in your plugin:
               <tr "<?php echo $args[0]; ?>">
      [1] = is this an empty section (the one at the end of the list)?
      [2] = what is the 'post' value? (ident # or empty string if default)
   </verb></tscreen>

   You need to return any HTML you would like to add to the table.
   You could add a table row with code similar to this:

   <tscreen><verb>
      function demo_identities_table(&ero;$args) {
         return '<tr bgcolor="' . $args[0] . '"><td>&ero;nbsp;&etago;td><td>'
              . 'YOUR CODE HERE' . '&etago;td>&etago;tr>' . "\n";
      }
   </verb></tscreen>

   First hook argument was modified in 1.4.5/1.5.1. In SquirrelMail 1.4.1-1.4.4
   and 1.5.0 argument contains only background color. You should use
   <tt>&lt;tr bgcolor="&lt;?php echo $args[0]; ?&gt;"&gt;</tt> in these SquirrelMail versions.

   <tag/options_identities_buttons/
   This hook allows you to add a button (or other HTML) to the row of
   buttons under each identity. The arguments to this hook are:

   <tscreen><verb>
      [0] = is this an empty section (the one at the end of the list)?
      [1] = what is the 'post' value? (ident # or empty string if default)
   </verb></tscreen>

   You need to return any HTML you would like to add here. You could add
   a button with code similar to this:

   <tscreen><verb>
      function demo_identities_button(&ero;$args) {
         return '<input type="submit" name="demo_button_' . $args[1]
              . '" value="Press Me" />';
      }
   </verb></tscreen>

   Input element should use 'smaction[action_name][identity_no]' value in
   'name' attribute, if you want to process your button actions in
   SquirrelMail 1.4.6+ and 1.5.1+ options_identity_process hook.
</descrip>

See sample implementation of identity hooks in SquirrelMail demo plugin.

<tscreen><verb>
  cvs -d:pserver:anonymous@squirrelmail.cvs.sourceforge.net:/cvsroot/squirrelmail \
    co plugins/demo
</verb></tscreen>

<sect2>Attachment Hooks
<p>
When a message has attachments, this hook is called with the MIME types. For
instance, a .zip file hook is "attachment application/x-zip". The hook should
probably show a link to do a specific action, such as "Verify" or "View" for a
.zip file. Thus, to register your plugin for .zip attachments, you'd do this
in <tt>setup.php</tt> (assuming your plugin is called "demo"):

<tscreen><verb>
   $squirrelmail_plugin_hooks['attachment application/x-zip']['demo']
      = 'demo_handle_zip_attachment';
</verb></tscreen>

This is a breakdown of the data passed in the array to the hook that is called:

<tscreen><verb>
  [0] = Hook's name ('attachment text/plain')
  [1] = Array of links of actions (see below) (alterable)
  [2] = Used for returning to mail message (startMessage)
  [3] = Used for finding message to display (id)
  [4] = Mailbox name, urlencode()'d (urlMailbox)
  [5] = Entity ID inside mail message (ent)
  [6] = Default URL to go to when filename is clicked on (alterable)
  [7] = Filename that is displayed for the attachment
  [8] = Sent if message was found from a search (where)
  [9] = Sent if message was found from a search (what)
</verb></tscreen>

To set up links for actions, you assign them like this:
<tscreen><verb>
  $Args[1]['<plugin_name>']['href'] = 'URL to link to';
  $Args[1]['<plugin_name>']['text'] = _("What to display");
  $Args[1]['<plugin_name>']['extra'] = 'extra stuff, such as an <img ...> tag';
</verb></tscreen>

Note: _("What to display") is explained in the section about
internationalization.

You can leave the 'text' empty and put an image tag in 'extra' to show an
image-only link for the attachment, or do the opposite (leave 'extra' empty)
to display a text-only link.

It's also possible to specify a hook as "attachment type0/*",
for example "attachment text/*". This hook will be executed whenever there's
no more specific rule available for that type.

Putting all this together, the <tt>demo_handle_zip_attachment()</tt> function should
look like this (note the argument being passed):

<tscreen><verb>
   function demo_handle_zip_attachment(&$Args)
   {
      include_once(SM_PATH . 'plugins/demo/functions.php');
      demo_handle_zip_attachment_do($Args);
   }
</verb></tscreen>

And the <tt>demo_handle_zip_attachment_do()</tt> function in the
<tt>plugins/demo/functions.php</tt> file would typically (but not necessarily)
display a custom link:

<tscreen><verb>
   function demo_handle_zip_attachment_do(&ero;$Args)
   {
      $Args[1]['demo']['href'] = SM_PATH . 'plugins/demo/zip_handler.php?'
         . 'passed_id=' . $Args[3] . '&ero;mailbox=' . $Args[4]
         . '&ero;passed_ent_id=' . $Args[5];
      $Args[1]['demo']['text'] = _("Show zip contents");
   }
</verb></tscreen>

The file plugins/demo/zip_handler.php can now do whatever it needs with the
attachment (note that this will hand information about how to retrieve the
source message from the IMAP server as GET varibles).

<sect2>Hook for configuration testing
<p>
SquirrelMail has configtest.php script which can be used to test SquirrelMail
configuration. Since SquirrelMail 1.5.2 configtest script includes 'configtest' 
hook. Hook uses boolean hook function call. Plugins that are attached to this
hook should return boolean true, if they detect some error in plugin's 
configuration. Verbose messages can be printed with <tt/do_err('error
message',false)/ function call or with any standard PHP inline output function.

configtest script is executed in anonymous, unauthenticated
environment. username and password information is not available. Only limited
set of functions is loaded. do_err() function is a special configtest script
function, which is used to print error messages. If plugin uses do_err()
function, it is recommended to set second function argument to false even on
fatal error. Configuration testing will stop with fatal error, if hook call
returns boolean true.

<sect1>Compatibility with older versions of SquirrelMail
<p>
Whenever new versions of SquirrelMail are released, there is always a
considerable lag time before it is widely adopted. During that transitional
time, especially when the new SquirrelMail version contains any architectural
and/or functional changes, plugin developers are put in a unique and very
difficult position. That is, there will be people running both the old and new
versions of SquirrelMail who want to use your plugin, and you will probably want
to accommodate them both.

The easiest way to keep both sides happy is to keep two different versions of
your plugin up to date, one that runs under the older SquirrelMail, and one that
requires the newest SquirrelMail. This is inconvenient, however, especially if
you are continuing to develop the plugin. Depending on the changes implemented
in the new SquirrelMail version, you may be able to include code that can
auto-sense the SquirrelMail version and make adjustments on the fly. There is a
function called <tt/check_sm_version()/ available which does that. Read more
about it in the <url
url="http://www.squirrelmail.org/docs/phpdoc14/squirrelmail/_functions---global.php.html#functioncheck_sm_version"
name="stable"> and <url
url="http://www.squirrelmail.org/docs/phpdoc/squirrelmail/_functions---global.php.html#functioncheck_sm_version"
name="development"> API documentation.

There is a plugin called "Compatibility" that is intended for use by plugin
authors so they can develop one version of their plugin and seamlessly support
both 1.2.x and 1.4.x SquirrelMail installations. For more information about how
to use the "Compatibility" plugin, download it and read its README file.

<sect1>Requesting new hooks
<p>
It's impossible to foresee all of the places where hooks might be useful and
it's also impossible to put in hooks everywhere, so you might need to negotiate
the insertion of a new hook to make your plugin work. Start by writing a patch
which will insert the hook you want to add, and mail your request (with the
patch attached) to the SquirrelMail plugins mailing list. Don't forget to
motivate the need for a new hook in your mail.

<sect1>How to release your plugin
<p>
As long as you've consulted the list of plugin standards and done your best to
follow them, there's little standing in the way of great fame as an official
SquirrelMail plugin developer.

First you have to make a distribution file. The file should be named
<tt/demo-1.0-1.4.0.tar.gz/, where "demo" is the name of your plugin, "1.0" is
the version of your plugin, and "1.4.0" is the version of SquirrelMail required
to use your plugin.

There is a convenient Perl script in the plugins directory that will help you do
this:

<tscreen><verb>
make_archive.pl -v demo 1.0 1.4.0
</verb></tscreen>

The parameter "-v" is optional and indicates that the script should run in
verbose mode.

You can also create the distribution file manually in most *nix environments by
running this command from the plugins directory (NOT your plugin directory):

<tscreen><verb>
tar -czvf demo-1.0-1.4.0.tar.gz demo
</verb></tscreen>

When the plugin is ready to be reviewed by the SquirrelMail plugin team, mail it
to the SquirrelMail plugins mailing list. If you don't have access to upload
your plugin to the <url url="http://squirrelmail.org/plugins.php" name="official
third party plugin list">, state that in your mail. Access will be granted when
the plugin is approved.

When the plugin is approved and you're granted access to upload it, all you have
to do is the actual uploading. You also need to write a plugin description and a
release note.

<sect>Links
<p>
TODO: This chapter should provide links to external sources of information. PHP
manuals, SquirrelMail API documentation, etc.

<sect1>RFC standardization documents
<p>
SquirrelMail "talks" several protocols. To make sure that we are
standards-compatible, we need to refer to RFC documents. Here's a list of the
ones we use a lot:

<itemize>
  <item><url url="http://www.faqs.org/rfcs/rfc2045.html" name="RFC 2045"> -
        MIME Part One: Format of Internet Message Bodies
  <item><url url="http://www.faqs.org/rfcs/rfc2046.html" name="RFC 2046"> -
        MIME Part Two: Media Types
  <item><url url="http://www.faqs.org/rfcs/rfc2047.html" name="RFC 2047"> -
        MIME Part Three: Message Header Extensions for Non-ASCII Text
  <item><url url="http://www.faqs.org/rfcs/rfc2183.html" name="RFC 2183"> -
        Content-Disposition MIME header
  <item><url url="http://www.faqs.org/rfcs/rfc2195.html" name="RFC 2195"> -
        IMAP/POP AUTHorize Extension for Simple Challenge/Response
  <item><url url="http://www.faqs.org/rfcs/rfc2221.html" name="RFC 2221"> -
        IMAP4 Login Referrals
  <item><url url="http://www.faqs.org/rfcs/rfc2298.html" name="RFC 2298"> -
        Details return receipts
  <item><url url="http://www.faqs.org/rfcs/rfc2342.html" name="RFC 2342"> -
        The IMAP4 NAMESPACE command
  <item><url url="http://www.faqs.org/rfcs/rfc2369.html" name="RFC 2369"> -
        The Use of URLs as Meta-Syntax for Core Mail List Commands and their Transport through Message Header Fields (implemented in listcommands plugin)
  <item><url url="http://www.faqs.org/rfcs/rfc2616.html" name="RFC 2616"> -
        HTTP/1.1
  <item><url url="http://www.faqs.org/rfcs/rfc2683.html" name="RFC 2683"> -
        IMAP4 Implementation Recommendations
  <item><url url="http://www.faqs.org/rfcs/rfc2822.html" name="RFC 2822"> -
        Format of an email message (sendmail) (obsoletes RFC 822)
  <item><url url="http://www.faqs.org/rfcs/rfc2831.html" name="RFC 2831"> -
        Using Digest Authentication as a SASL Mechanism (digest-md5)
  <item><url url="http://www.faqs.org/rfcs/rfc3501.html" name="RFC 3501"> -
        IMAP version 4rev1 (obsoletes RFC 1730 and RFC 2060)
</itemize>

</article>
