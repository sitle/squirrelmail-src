<?php
/*
	This file is part of the Wiki Type Framework (WTF).
	Copyright 2002, Paul James
	See README and COPYING for more information, or see http://wtf.peej.co.uk

	WTF is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	WTF is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with WTF; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*
wtf.pi.php.php
PHP PI Module
*/

$PI['php'] = 'PHPPI';
$PIGROUP['php'] = GODS;
$PIVALIDATE['php'] = 'PHPPIVALIDATE';

// functions which are not allowed (can specify only the beginning portion of a function name eg: 'mysql_' will match 'mysql_connect')
$BADFUNCS = Array(
	'mysql_',
	'msql_',
	'com_',
	'dba_',
	'dbase_',
	'dbm',
	'dbx_',
	'dbplus_',
	'fbsql_',
	'filepro',
	'ifx_',
	'ifxus_',
	'ibase_',
	'ini_',
	'ingres_',
	'mssql_',
	'odbc_',
	'oci',
	'ora_',
	'ovrimos_',
	'posix_',
	'pg_',
	'printer_',
	'recode_',
	'sem_',
	'shm_',
	'sesam_',
	'shmop_',
	'sybase_',
	'yp_',
	'zip_',
	'gz',
	'exec',
	'passthru',
	'system',
	'`',
	'shell_exec',
	'debugger_on',
	'debugger_off',
	'openlog',
	'closelog',
	'syslog',
	'dl',
	'putenv',
	'set_magic_quotes_runtime',
	'set_time_limit',
	'leak',
	'basename',
	'chgrp',
	'chmod',
	'chown',
	'clearstatcache',
	'copy',
	'delete',
	'dirname',
	'diskfreespace',
	'disk_total_space',
	'fclose',
	'feof',
	'fflush',
	'fgetc',
	'fgetcsv',
	'fgets',
	'fgetss',
	'file',
	'file_exists',
	'fileatime',
	'filectime',
	'filegroup',
	'fileinode',
	'filemtime',
	'fileowner',
	'fileperms',
	'filesize',
	'filetype',
	'flock',
	'fopen',
	'fpassthru',
	'fputs',
	'fread',
	'fscanf',
	'fseek',
	'fstat',
	'ftell',
	'ftruncate',
	'fwrite',
	'set_file_buffer',
	'imap_',
	'is_dir',
	'is_executable',
	'is_file',
	'is_link',
	'is_readable',
	'is_writable',
	'is_writeable',
	'is_uploaded_file',
	'link',
	'linkinfo',
	'mail',
	'mkdir',
	'move_uploaded_file',
	'pathinfo',
	'pclose',
	'popen',
	'readfile',
	'readlink',
	'rename',
	'rewind',
	'rmdir',
	'stat',
	'lstat',
	'realpath',
	'symlink',
	'tempnam',
	'tmpfile',
	'touch',
	'umask',
	'unlink',
	'chroot',
	'chdir',
	'dir',
	'closedir',
	'getcwd',
	'opendir',
	'readdir',
	'rewinddir'
);

// execute embedded PHP code
function PHPPI($code) {
	global $TAGS, $PPTAG, $SKIN, $MODULES, $FORMAT, $HARDTHING, $HARDCLASS, $ENTITY;
	global $conn, $wtf;
	track('PHPPI');
	ob_start();
	$result = eval($code); // evaluate code and get return results
	$output = ob_get_contents().$result; // capture code output and append return results
	ob_end_clean();
	track();
	if ($result === FALSE) {
		return strip_tags(preg_replace('|<b>Parse error</b>:  parse error, (.+) in <b>.+\([0-9]+\) : eval\(\)\'d code</b> on line <b>([0-9]+)</b>|', 'PHP parse error: \\1 on line \\2', $output));
		//return '<error>Parse error in embedded PHP code.</error>';
	} else {
		return $output;
	}
}

// check for bad PHP function calls
function PHPPIVALIDATE($code) {
	global $TAGS, $PPTAG, $SKIN, $MODULES, $FORMAT, $HARDTHING, $HARDCLASS, $ENTITY;
	global $conn, $wtf;
	global $BADFUNCS;
	track('PHPPIVALIDATE');
	foreach ($BADFUNCS as $func) {
		$regex = '/'.$func.'(([A-Za-z0-9])*)(( )*)\(/';
		if (preg_match($regex, $code)) {
			track(); return 'The function \''.$func.'\' has been disabled from code inserts. ';
		}
	}
	ob_start();
	$result = eval($code); // evaluate code and get return results
	$output = ob_get_contents().$result; // capture code output and append return results
	ob_end_clean();
	if ($result === FALSE) {
		track(); return strip_tags(preg_replace('|<b>Parse error</b>:  parse error, (.+) in <b>.+\([0-9]+\) : eval\(\)\'d code</b> on line <b>([0-9]+)</b>|', 'PHP parse error: \\1 on line \\2', $output));
	}
	$result = validateContent($wtf->user, $output);
	if ($result['error'] === FALSE) {
		track(); return FALSE;
	} else {
		track(); return 'Error in XML generated by PHP code block.';
	}
}
?>