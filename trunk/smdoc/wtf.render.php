<?php
/*
	This file is part of the Wiki Type Framework (WTF).
	Copyright 2002, Paul James
	See README and COPYING for more information, or see http://wtf.peej.co.uk

	WTF is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	WTF is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with WTF; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

/*
wtf.render.php
XML Template Renderer
*/

/*** Page Rendering ***/

/* render page */
function render(&$obj) {
	global $FORMAT, $SKIN, $SKINBROWSER, $CONTENTTYPE, $EXECTIME, $ENTITY;
	track('render');

	$querystring = '?';
	foreach ($_GET as $key => $value) {
		$querystring .= $key.'='.$value.'&';
	}
	$querystring = htmlspecialchars(substr($querystring, 0, -1));

// XML header
	$xml = '<?xml version="1.0"?>';

// WTF comment
	$xml .= '<!--XML Generated by Wiki Type Framework ('.VERSION.')--><!--'.COPYRIGHT.'-->';
	
// define entities
	if (isset($ENTITY)) {
		$xml .= '<!DOCTYPE wtf [';
		foreach ($ENTITY as $entity => $cdata) {
			$xml .= '<!ENTITY '.$entity.' "'.$cdata.'">';
		}
		$xml .= ']>';
	}
	
// WTF content
	$xml .= '<wtf querystring="'.$querystring.'" ';
	$xml .= 'thingid="'.$obj->thingid.'" pagename="'.htmlspecialchars($obj->thing->title).'" class="'.$obj->class.'" version="'.$obj->version.'" ';
	$xml .= 'userid="'.$obj->user->objectid.'" username="'.$obj->user->title.'" ';
	$xml .= 'wtf_version="'.VERSION.'" exectime="'.$EXECTIME.'" datetime="'.date(DATEFORMAT).'">';
	$xml .= $obj->output;
	$xml .= writeDebug();
	$xml .= '</wtf>';

 	$view = getValue('view', FALSE);
	if ($view) {
		$obj->user->skin = $view;
	}
	
	if (!RENDER) {
		$obj->user->skin = 'xml';
	} elseif (!isset($obj->user->skin) && isset($SKINBROWSER)) {
		foreach($SKINBROWSER as $regex => $skin) {
			if (preg_match($regex, $_SERVER['HTTP_USER_AGENT'])) {
				$obj->user->skin = $skin;
				break;
			}
		}
	} elseif (!isset($obj->user->skin) || !isset($SKIN[$obj->user->skin])) {
		$obj->user->skin = DEFAULTSKIN;
	}

	if (GZIPOUTPUT && strstr($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip')) { 
		ob_start('ob_gzhandler');
	}

	header('X-Wiki-Type-Framework: '.VERSION.';');
	if ($obj->user->skin == 'xml') {
		header('Content-Type: text/xml;');
		echo $xml;
	} elseif (file_exists(PATH.$SKIN[$obj->user->skin])) { // output formatting
		require(PATH.$SKIN[$obj->user->skin]);
		header('Content-Type: '.$CONTENTTYPE.';');
		$render_noParse = FALSE;
		$xml_parser = xml_parser_create();
		xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, FALSE);
		xml_set_element_handler($xml_parser, 'render_startElement', 'render_endElement');
		xml_set_character_data_handler($xml_parser, 'render_characterData');
		xml_set_default_handler($xml_parser, "render_defaultHandler");
		if (!xml_parse($xml_parser, $xml, TRUE)) {
			terminal_error('XML error: '.xml_error_string(xml_get_error_code($xml_parser)).' at line '.xml_get_current_line_number($xml_parser));
		}
		xml_parser_free($xml_parser);
	} else {
		terminal_error('Unable to load formatting.');
	}

	define('TERMINATEDOKAY', TRUE);
	track();
}

/*** Render Format ***/

/* process entities */
function render_defaultHandler($parser, $data) {
	global $ENTITY;
	if (substr($data, 0, 1) == "&" && substr($data, -1, 1) == ";") { // entity, do replacement
		$entityName = substr($data, 1, -1);
		if (isset($ENTITY[$entityName])) {
			echo $ENTITY[$entityName];
		}
	}
}

/* process page start tags */
function render_startElement($parser, $name, $attrs) {
	global $FORMAT, $DEBUGSTRING, $attrlist;
	global $NOPARSETAG, $render_noParse;

	$name = strtolower($name);

	if (!$render_noParse && isset($NOPARSETAG) && in_array($name, $NOPARSETAG)) {
		$render_noParse = $name;
	}
	
	if (isset($FORMAT[$name])) {
		$output = $FORMAT[$name];

		foreach ($attrs as $attr => $item) {
			$attr = strtolower($attr);
			$item = htmlspecialchars($item);
			$output = str_replace('{'.$attr.'}', $item, $output);
			if (isset($FORMAT[$name.'.'.$attr]) && $attroutput = $FORMAT[$name.'.'.$attr]) {
				$output = str_replace('{'.$attr.'}', $item, $attroutput);
			}
			$attrlist[$name.'.'.$attr] = $item;
		}
		foreach ($attrlist as $attr => $item) {
//			$item = htmlspecialchars($item);
			$output = str_replace('{'.$attr.'}', $item, $output);
			if (isset($FORMAT[$name.'.'.$attr]) && $attroutput = $FORMAT[$name.'.'.$attr]) {
				$output = str_replace('{'.$attr.'}', $item, $attroutput);
			}
		}
		$output = preg_replace ('/"{(.*)}"/', '""', $output);
		echo $output;
	}
}

/* process page end tags */
function render_endElement($parser, $name) {
	global $FORMAT, $DEBUGSTRING, $attrlist;
	global $render_noParse;

	$name = strtolower($name);
	
	if ($render_noParse == $name) {
		$render_noParse = FALSE;
	}
	
	if (isset($FORMAT['/'.$name])) {
		$output = $FORMAT['/'.$name];

		foreach ($attrlist as $attr => $item) {
			if (($pos = strpos($attr, $name.'.')) !== false) {
				$output = str_replace('{'.substr($attr, $pos + strlen($name) + 1, strlen($attr)).'}', $item, $output);
				if (isset($FORMAT['/'.$attr]) && $attroutput = $FORMAT['/'.$attr]) {
					$output = str_replace('{'.$attr.'}', $item, $attroutput);
				}
			}
			unset($attrlist[$name.'.'.$attr]);
		}
		foreach ($attrlist as $attr => $item) {
			$output = str_replace('{'.$attr.'}', $item, $output);
		}
		$output = preg_replace('/"{(.*)}"/', '""', $output);
		echo $output;
	}
}

/* process page char data */
function render_characterData($parser, $data) {
	global $wtf, $render_noParse;

	$data = htmlspecialchars($data);
	
	if (!$render_noParse) { // if parsing is not disabled for this tag
// apply quickformat
//		if (DEBUG) echo '((';
		echo processQuickFormat($data, $wtf->thingid, NULL);
//		if (DEBUG) echo '))';
	} else {
		echo $data;
	}

}

?>