#!/bin/bash
#
# This script creates a release package for the SquirrelMail IMAP proxy server.
#
# It requires one argument -- the version number.
#
# Copyright 1999-2013 The SquirrelMail Project Team
# License   http://opensource.org/licenses/gpl-license.php GNU Public License
# Version   $Id$
#

error_temp_file="/tmp/squirrelmail-make-release-command-errors-temporary-file-delete_me_if_you_see_me"
self=`/bin/basename $0`

echo

if [ -z $1 ]; then
    echo "${self}: Error: Missing version number"
    echo "Usage: $0 1.4.20"
    echo
    exit 1
fi
version=$1


# Function: execute_command
#
# Purpose: execute a command and show the status (success or failure)
#
# Parameters: $1 - The command to execute
#             $2 - Path to file where stdout should be redirected, if given
#                  (otherwise, stdout is tossed away)
#
# Returns: 0 if the command executed returned 0
#          1 otherwise
#
execute_command() {
    command=$1
    redirect_stdout=$2

    echo -n "+ $command ... "

    # although it's nice not to use temporary files for error output,
    # this method executes commands in a subshell, so commands like cd
    # won't affect the shell where we really want it:
    # error=$(($command 1>/dev/null) 2>&1)
    # error=$(($command 1>${redirect_stdout}) 2>&1)
    #
    if [ -z $redirect_stdout ]; then
        $command 1>/dev/null 2>${error_temp_file}
    else
        $command 1>${redirect_stdout} 2>${error_temp_file}
    fi
    command_status=$?
    error=$(<${error_temp_file})
    rm -f ${error_temp_file}

    if [ $command_status = 0 ]; then
        echo "success" 2>&1
        return 0
    else
        echo "failed ($error)" 2>&1
        return 1
    fi
}


# convert dots to underscores
# and any dashes to underscores
#
parsed_version=`echo ${version} | sed 's/\./_/g'`
parsed_version=`echo ${parsed_version} | sed 's/-/_/g'`
package="squirrelmail-imap_proxy-${version}"
release_directory="${package}-release_work_area"
svn_tag="imap_proxy-release-${parsed_version}"


echo ==== Releasing SquirrelMail IMAP Proxy version ${version} with tag ${svn_tag} ====

echo "+ Creating \"${release_directory}\""


# rm
#
execute_command "rm -rf ${release_directory}" || {
    echo "${self}: Error: Failed to remove directory \"${release_directory}\".  Exiting."
    echo
    exit 1
}


# mkdir
#
execute_command "mkdir ${release_directory}" || {
    echo "${self}: Error: Failed to make directory \"${release_directory}\".  Exiting."
    echo
    exit 1
}


# cd
#
execute_command "cd ${release_directory}" || {
    echo "${self}: Error: Failed to change into directory \"${release_directory}\".  Exiting."
    echo
    exit 1
}


# SVN export
# (don't use the "execute_command" function so SVN errors & status show on screen
#
echo "+ Exporting svn"
svn export https://squirrelmail.svn.sourceforge.net/svnroot/squirrelmail/tags/${svn_tag} ${package}
if [ $? != 0 ]; then
    echo "${self}: Error: Failed to export svn.  Exiting."
    echo
    exit 1
fi


# cd
#
execute_command "cd ${package}" || {
    echo "${self}: Error: Failed to change into directory \"${release_directory}/${package}\".  Exiting."
    echo
    exit 1
}


# set sensible read/write permissions
#
echo "+ Setting general read/write permissions"
execute_command 'find    -exec chmod ugo+r,u+w,go-w {} ;' || {
    echo "${self}: Error: Failed to set general permissions.  Exiting."
    echo
    exit 1
}


# remove execute permissions from files
#
echo "+ Remove execute permissions from files"
execute_command 'find -type f    -exec chmod ugo-x {} ;' || {
    echo "${self}: Error: Failed to set file permissions.  Exiting."
    echo
    exit 1
}


# add execute permissions to directories
#
echo "+ Adding execute permissions to directories"
execute_command 'find -type d    -exec chmod ugo+x {} ;' || {
    echo "${self}: Error: Failed to set directory permissions.  Exiting."
    echo
    exit 1
}


# add execute permissions to scripts and executables
#
echo "+ Adding execute permissions to scripts and executables"
while read path; do
    execute_command "chmod ugo+x ${path}" || {
        echo "${self}: Error: Failed to set execute permission on ${path}.  Exiting."
        echo
        exit 1
    }
done <<EOF
config.guess
config.sub
configure
install-sh
mkinstalldirs
scripts/imapproxy.init
EOF
# FIXME: If we ever distribute these, they belong in the list above
# scripts/rc.pimpdaddy
# scripts/pimpdaddy


# cd
#
execute_command "cd .." || {
    echo "${self}: Error: Failed to change back up into directory \"${release_directory}\".  Exiting."
    echo
    exit 1
}


# mv
#
execute_command "mv ${package} ${package}.orig" || {
    echo "${self}: Error: Failed to rename directory from \"${release_directory}/${package}\" to \"${release_directory}/${package}.orig\".  Exiting."
    echo
    exit 1
}


# mkdir
#
execute_command "mkdir ${package}" || {
    echo "${self}: Error: Failed to make directory \"${release_directory}/${package}\".  Exiting."
    echo
    exit 1
}


# make all the necessary subdirectories.
#
echo "+ Creating subdirectories"
while read dir; do
    execute_command "mkdir ${package}/${dir}" || {
        echo "${self}: Error: Failed to make directory \"${release_directory}/${package}/${dir}\".  Exiting."
        exit 1
    }
done <<EOF
bin
include
scripts
src
EOF


# copy all the files into place
#
echo "+ Copying files"
while read source dest; do
    execute_command "cp -p ${package}.orig/${source} ${package}/${dest}" || {
        echo "${self}: Error: Failed to copy file ${source}.  Exiting."
        exit 1
    }
done <<EOF
Makefile.in Makefile.in
imapproxy.spec imapproxy.spec
configure configure
configure.in configure.in
config.guess config.guess
config.sub config.sub
config.h.in config.h.in
acconfig.h acconfig.h
aclocal.m4 aclocal.m4
install-sh install-sh
stamp-h stamp-h
mkinstalldirs mkinstalldirs
include/common.h include/common.h
include/imapproxy.h include/imapproxy.h
scripts/imapproxy.init scripts/imapproxy.init
scripts/imapproxy.conf scripts/imapproxy.conf
src/becomenonroot.c src/becomenonroot.c
src/config.c src/config.c
src/hash.c src/hash.c
src/icc.c src/icc.c
src/select.c src/select.c
src/imapcommon.c src/imapcommon.c
src/main.c src/main.c
src/pimpstat.c src/pimpstat.c
src/request.c src/request.c
src/logging.c src/logging.c
src/threads.c src/threads.c
README README
README.debian README.debian
README.ssl README.ssl
README.known_issues README.known_issues
COPYING COPYING
copyright copyright
pkginfo pkginfo
prototype prototype
ChangeLog ChangeLog
EOF


# create archive files
#
echo "+ Creating archive files"
execute_command "tar cvf ${package}.tar ${package}" || {
    echo "${self}: Error: Failed to create .tar file.  Exiting."
    echo
    exit 1
}
execute_command "gzip -9 ${package}.tar" || {
    echo "${self}: Error: Failed to create .tar.gz file.  Exiting."
    echo
    exit 1
}
execute_command "tar cjvf ${package}.tar.bz2 ${package}" || {
    echo "${self}: Error: Failed to create .tar.bz2 file.  Exiting."
    echo
    exit 1
}
execute_command "zip -9 -r ${package}.zip ${package}" || {
    echo "${self}: Error: Failed to create .zip file.  Exiting."
    echo
    exit 1
}


# create checksums
#
echo "+ Creating checksums"
execute_command "md5sum ${package}.tar.gz" "${package}.tar.gz.md5" || {
    echo "${self}: Error: Failed to create checksum file.  Exiting."
    echo
    exit 1
}
execute_command "sha1sum ${package}.tar.gz" "${package}.tar.gz.sha1" || {
    echo "${self}: Error: Failed to create checksum file.  Exiting."
    echo
    exit 1
}
execute_command "md5sum ${package}.tar.bz2" "${package}.tar.bz2.md5" || {
    echo "${self}: Error: Failed to create checksum file.  Exiting."
    echo
    exit 1
}
execute_command "sha1sum ${package}.tar.bz2" "${package}.tar.bz2.sha1" || {
    echo "${self}: Error: Failed to create checksum file.  Exiting."
    echo
    exit 1
}
execute_command "md5sum ${package}.zip" "${package}.zip.md5" || {
    echo "${self}: Error: Failed to create checksum file.  Exiting."
    echo
    exit 1
}
execute_command "sha1sum ${package}.zip" "${package}.zip.sha1" || {
    echo "${self}: Error: Failed to create checksum file.  Exiting."
    echo
    exit 1
}


# Upload
#
#echo "+ Uploading to upload.sf.net"
# Is your sf.net username different from your local username?
# Use a ~/.ssh/config snippet to set it correctly for frs.sourceforge.net
#execute_command "rsync -avP -e ssh ${package}.tar.gz ${package}.tar.bz2 ${package}.zip frs.sourceforge.net:uploads/" || {
#    echo "${self}: Error: Failed to upload.  Exiting."
#    echo
#    exit 1
#}



echo "+ Finished"
echo


