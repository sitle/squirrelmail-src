DO NOT USE THIS PLUG-IN.
--------------------------

If you don't want to add potential weaknesses to your system, then don't
use this plugin. To work, it requires to store the domain base-user password(s)
within the PHP script. If someone finds out this password, it will mean that
ALL your virtual users under that domain will be potential victims (it's like
a root password for that virtual domain -- if someone has it, he can change all
preferences and read all users' email, etc.etc.etc). Besides, it's a system
password, too, which implies a whole lot of other things, but I hope you're
smart enough not to run any services on behalf of your qmail virtual domain
users.

Comprehend what's said above. If you still want to go ahead, here are ways
to make this plugin relatively secure.

The idea is to make the vchpass.php file in the plugins/vchpass/ directory
ONLY readable by the apache process, since it contains your virtual domain
base-user password (no, it cannot be crypt()-ed, since PHP needs to know the
cleartext version of it to send to vmailmgrd).

REFUSING ACCESS FROM THE WEB
-----------------------------
Unless you've completely messed up your PHP/Apache installation, this is by
default. The source of the .php file cannot be passed to user accessing it via
the Internet.

REFUSING ACCESS FROM LOCAL USERS
----------------------------------
We want ONLY Apache to have access to it. One way to do it is to run
-> chown nobody:nogroup vchpass.php 
(or whatever your Apache runs as)

and then change the mode to only be readable by user:

-> chmod 0600 vchpass.php

This way you limit access to this file only to the Apache process. This will
be a GOOD ENOUGH SECURITY only if:
    - you're not running any other processes as nobody:nogroup (a lot of
      times other processes share that, e.g. FTP)
    - Other users on this machine cannot write/execute PHP/CGI scripts that
      run from under your Apache server (if other users have their web sites
      on this box, they can write a simple PHP script to read this file and
      display it in the browser: since the script will be executed on behalf
      of nobody:nogroup user it will have read access to the file).

If you don't run any other services as nobody:nogroup and you don't allow your
web-users to execute CGI scripts, <!--#include's, or write PHP, this should be 
good enough to protect your virtual domain base-user password (this means 
that it'll take a significant effort for anyone to gain read access to this 
file).

If you allow other users to execute CGI's, do <!--#include's, or write PHP 
scripts, then read on. If you do allow these and decide to leave it at this 
stage, your hope is only that they don't find out about this plug-in.

ENTER THE SuEXEC (PRETTY SECURE, BUT MAJOR PITA)
-------------------------------------------------

(Note: This is most likely broken, since apparently PHP is not currently
paying any attention to apache's suEXEC, unless it's being executed as
a CGI, not as a module. Since this *might* change in the future, I'm 
leaving this part as it is. Check www.php.net for any news on PHP's
adhering to Apache's suEXEC. At the time of writing, this section does no
good.)

Since we cannot afford to store vchpass.php owned by nobody:nogroup, we will
need to create a special user that Apache will SU to to read/execute this 
file. This involves significant amounts of pain, since you will need to 
re-compile Apache to allow SuEXEC. Ways to do so are not covered here,
please refer to the Apache documentation found somewhere at 
http://www.apache.org/httpd.html. Your goal is to make Apache read the
plugins/vchpass directory as some obscure user, e.g. "squirrel". This user
should have no password and no other processes should be running under it.
Once you've done so and made sure that the vchpass.php is being accessed by
Apache as from user "squirrel", you can:

-> chown squirrel vchpass.php
-> chmod 0600 vchpass.php

This will limit read access to this file ONLY to user "squirrel". This
means that it will require a substantial effort for anyone to be able to
read the contents of this file. This is pretty secure, but still far from
being good enough from a paranoid point of view. If you're paranoid, read
on.

MOST SECURE
------------
Do not use this plug-in.
